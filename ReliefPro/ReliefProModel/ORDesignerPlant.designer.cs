#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.33440
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReliefProModel
{
	using ALinq;
	using ALinq.Mapping;
	using System.ComponentModel;
	using System;
	using System.Reflection;
	
	
	[ALinq.Mapping.DatabaseAttribute(Name="plant")]
	[ALinq.Mapping.ProviderAttribute(typeof(ALinq.Access.AccessDbProvider))]
	public partial class ORDesignerPlantDataContext : ALinq.DataContext
	{
		
		private static ALinq.Mapping.MappingSource mappingSource = new ALinq.Mapping.AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertsystbBasicUnit(systbBasicUnit instance);
    partial void UpdatesystbBasicUnit(systbBasicUnit instance);
    partial void DeletesystbBasicUnit(systbBasicUnit instance);
    partial void InsertsystbBasicUnitCurrent(systbBasicUnitCurrent instance);
    partial void UpdatesystbBasicUnitCurrent(systbBasicUnitCurrent instance);
    partial void DeletesystbBasicUnitCurrent(systbBasicUnitCurrent instance);
    partial void InsertsystbBasicUnitDefault(systbBasicUnitDefault instance);
    partial void UpdatesystbBasicUnitDefault(systbBasicUnitDefault instance);
    partial void DeletesystbBasicUnitDefault(systbBasicUnitDefault instance);
    partial void InsertsystbGlossary(systbGlossary instance);
    partial void UpdatesystbGlossary(systbGlossary instance);
    partial void DeletesystbGlossary(systbGlossary instance);
    partial void InsertsystbProIIEqType(systbProIIEqType instance);
    partial void UpdatesystbProIIEqType(systbProIIEqType instance);
    partial void DeletesystbProIIEqType(systbProIIEqType instance);
    partial void InsertsystbScenarioFactor(systbScenarioFactor instance);
    partial void UpdatesystbScenarioFactor(systbScenarioFactor instance);
    partial void DeletesystbScenarioFactor(systbScenarioFactor instance);
    partial void InsertsystbSystemUnit(systbSystemUnit instance);
    partial void UpdatesystbSystemUnit(systbSystemUnit instance);
    partial void DeletesystbSystemUnit(systbSystemUnit instance);
    partial void InsertsystbUnitType(systbUnitType instance);
    partial void UpdatesystbUnitType(systbUnitType instance);
    partial void DeletesystbUnitType(systbUnitType instance);
    partial void InserttbAbnormalHeaterDetail(tbAbnormalHeaterDetail instance);
    partial void UpdatetbAbnormalHeaterDetail(tbAbnormalHeaterDetail instance);
    partial void DeletetbAbnormalHeaterDetail(tbAbnormalHeaterDetail instance);
    partial void InserttbAirCooledHXFireSize(tbAirCooledHXFireSize instance);
    partial void UpdatetbAirCooledHXFireSize(tbAirCooledHXFireSize instance);
    partial void DeletetbAirCooledHXFireSize(tbAirCooledHXFireSize instance);
    partial void InserttbBlockedVaporOutlet(tbBlockedVaporOutlet instance);
    partial void UpdatetbBlockedVaporOutlet(tbBlockedVaporOutlet instance);
    partial void DeletetbBlockedVaporOutlet(tbBlockedVaporOutlet instance);
    partial void InserttbCompressorBlockedOutlet(tbCompressorBlockedOutlet instance);
    partial void UpdatetbCompressorBlockedOutlet(tbCompressorBlockedOutlet instance);
    partial void DeletetbCompressorBlockedOutlet(tbCompressorBlockedOutlet instance);
    partial void InserttbCondenserCalc(tbCondenserCalc instance);
    partial void UpdatetbCondenserCalc(tbCondenserCalc instance);
    partial void DeletetbCondenserCalc(tbCondenserCalc instance);
    partial void InserttbDevice(tbDevice instance);
    partial void UpdatetbDevice(tbDevice instance);
    partial void DeletetbDevice(tbDevice instance);
    partial void InserttbDrumBlockedOutlet(tbDrumBlockedOutlet instance);
    partial void UpdatetbDrumBlockedOutlet(tbDrumBlockedOutlet instance);
    partial void DeletetbDrumBlockedOutlet(tbDrumBlockedOutlet instance);
    partial void InserttbDrumDepressuring(tbDrumDepressuring instance);
    partial void UpdatetbDrumDepressuring(tbDrumDepressuring instance);
    partial void DeletetbDrumDepressuring(tbDrumDepressuring instance);
    partial void InserttbDrumFireAllGas(tbDrumFireAllGas instance);
    partial void UpdatetbDrumFireAllGas(tbDrumFireAllGas instance);
    partial void DeletetbDrumFireAllGas(tbDrumFireAllGas instance);
    partial void InserttbDrumFireSize(tbDrumFireSize instance);
    partial void UpdatetbDrumFireSize(tbDrumFireSize instance);
    partial void DeletetbDrumFireSize(tbDrumFireSize instance);
    partial void InserttbFeedBottomHX(tbFeedBottomHX instance);
    partial void UpdatetbFeedBottomHX(tbFeedBottomHX instance);
    partial void DeletetbFeedBottomHX(tbFeedBottomHX instance);
    partial void InserttbFlashCalcResult(tbFlashCalcResult instance);
    partial void UpdatetbFlashCalcResult(tbFlashCalcResult instance);
    partial void DeletetbFlashCalcResult(tbFlashCalcResult instance);
    partial void InserttbFlashResult(tbFlashResult instance);
    partial void UpdatetbFlashResult(tbFlashResult instance);
    partial void DeletetbFlashResult(tbFlashResult instance);
    partial void InserttbGeneralFailureCommon(tbGeneralFailureCommon instance);
    partial void UpdatetbGeneralFailureCommon(tbGeneralFailureCommon instance);
    partial void DeletetbGeneralFailureCommon(tbGeneralFailureCommon instance);
    partial void InserttbGeneralFailureCommonDetail(tbGeneralFailureCommonDetail instance);
    partial void UpdatetbGeneralFailureCommonDetail(tbGeneralFailureCommonDetail instance);
    partial void DeletetbGeneralFailureCommonDetail(tbGeneralFailureCommonDetail instance);
    partial void InserttbGlobalConditionsSettings(tbGlobalConditionsSettings instance);
    partial void UpdatetbGlobalConditionsSettings(tbGlobalConditionsSettings instance);
    partial void DeletetbGlobalConditionsSettings(tbGlobalConditionsSettings instance);
    partial void InserttbGlobalFlareSystem(tbGlobalFlareSystem instance);
    partial void UpdatetbGlobalFlareSystem(tbGlobalFlareSystem instance);
    partial void DeletetbGlobalFlareSystem(tbGlobalFlareSystem instance);
    partial void InserttbHeatSource(tbHeatSource instance);
    partial void UpdatetbHeatSource(tbHeatSource instance);
    partial void DeletetbHeatSource(tbHeatSource instance);
    partial void InserttbHXBlockedIn(tbHXBlockedIn instance);
    partial void UpdatetbHXBlockedIn(tbHXBlockedIn instance);
    partial void DeletetbHXBlockedIn(tbHXBlockedIn instance);
    partial void InserttbHXFireSize(tbHXFireSize instance);
    partial void UpdatetbHXFireSize(tbHXFireSize instance);
    partial void DeletetbHXFireSize(tbHXFireSize instance);
    partial void InserttbInletValveOpen(tbInletValveOpen instance);
    partial void UpdatetbInletValveOpen(tbInletValveOpen instance);
    partial void DeletetbInletValveOpen(tbInletValveOpen instance);
    partial void InserttbLatent(tbLatent instance);
    partial void UpdatetbLatent(tbLatent instance);
    partial void DeletetbLatent(tbLatent instance);
    partial void InserttbLatentProduct(tbLatentProduct instance);
    partial void UpdatetbLatentProduct(tbLatentProduct instance);
    partial void DeletetbLatentProduct(tbLatentProduct instance);
    partial void InserttbProIIEqData(tbProIIEqData instance);
    partial void UpdatetbProIIEqData(tbProIIEqData instance);
    partial void DeletetbProIIEqData(tbProIIEqData instance);
    partial void InserttbProIIStreamData(tbProIIStreamData instance);
    partial void UpdatetbProIIStreamData(tbProIIStreamData instance);
    partial void DeletetbProIIStreamData(tbProIIStreamData instance);
    partial void InserttbPSV(tbPSV instance);
    partial void UpdatetbPSV(tbPSV instance);
    partial void DeletetbPSV(tbPSV instance);
    partial void InserttbPUsummary(tbPUsummary instance);
    partial void UpdatetbPUsummary(tbPUsummary instance);
    partial void DeletetbPUsummary(tbPUsummary instance);
    partial void InserttbReactorLoopCommon(tbReactorLoopCommon instance);
    partial void UpdatetbReactorLoopCommon(tbReactorLoopCommon instance);
    partial void DeletetbReactorLoopCommon(tbReactorLoopCommon instance);
    partial void InserttbReactorLoopDetail(tbReactorLoopDetail instance);
    partial void UpdatetbReactorLoopDetail(tbReactorLoopDetail instance);
    partial void DeletetbReactorLoopDetail(tbReactorLoopDetail instance);
    partial void InserttbReactorLoopEqDiff(tbReactorLoopEqDiff instance);
    partial void UpdatetbReactorLoopEqDiff(tbReactorLoopEqDiff instance);
    partial void DeletetbReactorLoopEqDiff(tbReactorLoopEqDiff instance);
    partial void InserttbReboilerPinch(tbReboilerPinch instance);
    partial void UpdatetbReboilerPinch(tbReboilerPinch instance);
    partial void DeletetbReboilerPinch(tbReboilerPinch instance);
    partial void InserttbScenario(tbScenario instance);
    partial void UpdatetbScenario(tbScenario instance);
    partial void DeletetbScenario(tbScenario instance);
    partial void InserttbScenarioHeatSource(tbScenarioHeatSource instance);
    partial void UpdatetbScenarioHeatSource(tbScenarioHeatSource instance);
    partial void DeletetbScenarioHeatSource(tbScenarioHeatSource instance);
    partial void InserttbSink(tbSink instance);
    partial void UpdatetbSink(tbSink instance);
    partial void DeletetbSink(tbSink instance);
    partial void InserttbSource(tbSource instance);
    partial void UpdatetbSource(tbSource instance);
    partial void DeletetbSource(tbSource instance);
    partial void InserttbSourceFile(tbSourceFile instance);
    partial void UpdatetbSourceFile(tbSourceFile instance);
    partial void DeletetbSourceFile(tbSourceFile instance);
    partial void InserttbStream(tbStream instance);
    partial void UpdatetbStream(tbStream instance);
    partial void DeletetbStream(tbStream instance);
    partial void InserttbTowerAccumulator(tbTowerAccumulator instance);
    partial void UpdatetbTowerAccumulator(tbTowerAccumulator instance);
    partial void DeletetbTowerAccumulator(tbTowerAccumulator instance);
    partial void InserttbTowerFireColumn(tbTowerFireColumn instance);
    partial void UpdatetbTowerFireColumn(tbTowerFireColumn instance);
    partial void DeletetbTowerFireColumn(tbTowerFireColumn instance);
    partial void InserttbTowerFireColumnDetail(tbTowerFireColumnDetail instance);
    partial void UpdatetbTowerFireColumnDetail(tbTowerFireColumnDetail instance);
    partial void DeletetbTowerFireColumnDetail(tbTowerFireColumnDetail instance);
    partial void InserttbTowerFireCooler(tbTowerFireCooler instance);
    partial void UpdatetbTowerFireCooler(tbTowerFireCooler instance);
    partial void DeletetbTowerFireCooler(tbTowerFireCooler instance);
    partial void InserttbTowerFireDrum(tbTowerFireDrum instance);
    partial void UpdatetbTowerFireDrum(tbTowerFireDrum instance);
    partial void DeletetbTowerFireDrum(tbTowerFireDrum instance);
    partial void InserttbTowerFireEq(tbTowerFireEq instance);
    partial void UpdatetbTowerFireEq(tbTowerFireEq instance);
    partial void DeletetbTowerFireEq(tbTowerFireEq instance);
    partial void InserttbTowerFireHX(tbTowerFireHX instance);
    partial void UpdatetbTowerFireHX(tbTowerFireHX instance);
    partial void DeletetbTowerFireHX(tbTowerFireHX instance);
    partial void InserttbTowerFireOther(tbTowerFireOther instance);
    partial void UpdatetbTowerFireOther(tbTowerFireOther instance);
    partial void DeletetbTowerFireOther(tbTowerFireOther instance);
    partial void InserttbTowerFlashProduct(tbTowerFlashProduct instance);
    partial void UpdatetbTowerFlashProduct(tbTowerFlashProduct instance);
    partial void DeletetbTowerFlashProduct(tbTowerFlashProduct instance);
    partial void InserttbTowerHX(tbTowerHX instance);
    partial void UpdatetbTowerHX(tbTowerHX instance);
    partial void DeletetbTowerHX(tbTowerHX instance);
    partial void InserttbTowerHXDetail(tbTowerHXDetail instance);
    partial void UpdatetbTowerHXDetail(tbTowerHXDetail instance);
    partial void DeletetbTowerHXDetail(tbTowerHXDetail instance);
    partial void InserttbTowerScenarioHX(tbTowerScenarioHX instance);
    partial void UpdatetbTowerScenarioHX(tbTowerScenarioHX instance);
    partial void DeletetbTowerScenarioHX(tbTowerScenarioHX instance);
    partial void InserttbTowerScenarioStream(tbTowerScenarioStream instance);
    partial void UpdatetbTowerScenarioStream(tbTowerScenarioStream instance);
    partial void DeletetbTowerScenarioStream(tbTowerScenarioStream instance);
    partial void InserttbTowerSideColumn(tbTowerSideColumn instance);
    partial void UpdatetbTowerSideColumn(tbTowerSideColumn instance);
    partial void DeletetbTowerSideColumn(tbTowerSideColumn instance);
    partial void InserttbTreePS(tbTreePS instance);
    partial void UpdatetbTreePS(tbTreePS instance);
    partial void DeletetbTreePS(tbTreePS instance);
    partial void InserttbTreeUnit(tbTreeUnit instance);
    partial void UpdatetbTreeUnit(tbTreeUnit instance);
    partial void DeletetbTreeUnit(tbTreeUnit instance);
    #endregion
		
		public ORDesignerPlantDataContext() : 
				base(global::ReliefProModel.Properties.Settings.Default.plantConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ORDesignerPlantDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ORDesignerPlantDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ORDesignerPlantDataContext(string connection, ALinq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ORDesignerPlantDataContext(System.Data.IDbConnection connection, ALinq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ALinq.Table<systbBasicUnit> systbBasicUnit
		{
			get
			{
				return this.GetTable<systbBasicUnit>();
			}
		}
		
		public ALinq.Table<systbBasicUnitCurrent> systbBasicUnitCurrent
		{
			get
			{
				return this.GetTable<systbBasicUnitCurrent>();
			}
		}
		
		public ALinq.Table<systbBasicUnitDefault> systbBasicUnitDefault
		{
			get
			{
				return this.GetTable<systbBasicUnitDefault>();
			}
		}
		
		public ALinq.Table<systbGlossary> systbGlossary
		{
			get
			{
				return this.GetTable<systbGlossary>();
			}
		}
		
		public ALinq.Table<systbProIIEqType> systbProIIEqType
		{
			get
			{
				return this.GetTable<systbProIIEqType>();
			}
		}
		
		public ALinq.Table<systbScenarioFactor> systbScenarioFactor
		{
			get
			{
				return this.GetTable<systbScenarioFactor>();
			}
		}
		
		public ALinq.Table<systbSystemUnit> systbSystemUnit
		{
			get
			{
				return this.GetTable<systbSystemUnit>();
			}
		}
		
		public ALinq.Table<systbUnitType> systbUnitType
		{
			get
			{
				return this.GetTable<systbUnitType>();
			}
		}
		
		public ALinq.Table<tbAbnormalHeaterDetail> tbAbnormalHeaterDetail
		{
			get
			{
				return this.GetTable<tbAbnormalHeaterDetail>();
			}
		}
		
		public ALinq.Table<tbAirCooledHXFireSize> tbAirCooledHXFireSize
		{
			get
			{
				return this.GetTable<tbAirCooledHXFireSize>();
			}
		}
		
		public ALinq.Table<tbBlockedVaporOutlet> tbBlockedVaporOutlet
		{
			get
			{
				return this.GetTable<tbBlockedVaporOutlet>();
			}
		}
		
		public ALinq.Table<tbCompressorBlockedOutlet> tbCompressorBlockedOutlet
		{
			get
			{
				return this.GetTable<tbCompressorBlockedOutlet>();
			}
		}
		
		public ALinq.Table<tbCondenserCalc> tbCondenserCalc
		{
			get
			{
				return this.GetTable<tbCondenserCalc>();
			}
		}
		
		public ALinq.Table<tbDevice> tbDevice
		{
			get
			{
				return this.GetTable<tbDevice>();
			}
		}
		
		public ALinq.Table<tbDrumBlockedOutlet> tbDrumBlockedOutlet
		{
			get
			{
				return this.GetTable<tbDrumBlockedOutlet>();
			}
		}
		
		public ALinq.Table<tbDrumDepressuring> tbDrumDepressuring
		{
			get
			{
				return this.GetTable<tbDrumDepressuring>();
			}
		}
		
		public ALinq.Table<tbDrumFireAllGas> tbDrumFireAllGas
		{
			get
			{
				return this.GetTable<tbDrumFireAllGas>();
			}
		}
		
		public ALinq.Table<tbDrumFireSize> tbDrumFireSize
		{
			get
			{
				return this.GetTable<tbDrumFireSize>();
			}
		}
		
		public ALinq.Table<tbFeedBottomHX> tbFeedBottomHX
		{
			get
			{
				return this.GetTable<tbFeedBottomHX>();
			}
		}
		
		public ALinq.Table<tbFlashCalcResult> tbFlashCalcResult
		{
			get
			{
				return this.GetTable<tbFlashCalcResult>();
			}
		}
		
		public ALinq.Table<tbFlashResult> tbFlashResult
		{
			get
			{
				return this.GetTable<tbFlashResult>();
			}
		}
		
		public ALinq.Table<tbGeneralFailureCommon> tbGeneralFailureCommon
		{
			get
			{
				return this.GetTable<tbGeneralFailureCommon>();
			}
		}
		
		public ALinq.Table<tbGeneralFailureCommonDetail> tbGeneralFailureCommonDetail
		{
			get
			{
				return this.GetTable<tbGeneralFailureCommonDetail>();
			}
		}
		
		public ALinq.Table<tbGlobalConditionsSettings> tbGlobalConditionsSettings
		{
			get
			{
				return this.GetTable<tbGlobalConditionsSettings>();
			}
		}
		
		public ALinq.Table<tbGlobalFlareSystem> tbGlobalFlareSystem
		{
			get
			{
				return this.GetTable<tbGlobalFlareSystem>();
			}
		}
		
		public ALinq.Table<tbHeatSource> tbHeatSource
		{
			get
			{
				return this.GetTable<tbHeatSource>();
			}
		}
		
		public ALinq.Table<tbHXBlockedIn> tbHXBlockedIn
		{
			get
			{
				return this.GetTable<tbHXBlockedIn>();
			}
		}
		
		public ALinq.Table<tbHXFireSize> tbHXFireSize
		{
			get
			{
				return this.GetTable<tbHXFireSize>();
			}
		}
		
		public ALinq.Table<tbInletValveOpen> tbInletValveOpen
		{
			get
			{
				return this.GetTable<tbInletValveOpen>();
			}
		}
		
		public ALinq.Table<tbLatent> tbLatent
		{
			get
			{
				return this.GetTable<tbLatent>();
			}
		}
		
		public ALinq.Table<tbLatentProduct> tbLatentProduct
		{
			get
			{
				return this.GetTable<tbLatentProduct>();
			}
		}
		
		public ALinq.Table<tbProIIEqData> tbProIIEqData
		{
			get
			{
				return this.GetTable<tbProIIEqData>();
			}
		}
		
		public ALinq.Table<tbProIIStreamData> tbProIIStreamData
		{
			get
			{
				return this.GetTable<tbProIIStreamData>();
			}
		}
		
		public ALinq.Table<tbPSV> tbPSV
		{
			get
			{
				return this.GetTable<tbPSV>();
			}
		}
		
		public ALinq.Table<tbPUsummary> tbPUsummary
		{
			get
			{
				return this.GetTable<tbPUsummary>();
			}
		}
		
		public ALinq.Table<tbReactorLoopCommon> tbReactorLoopCommon
		{
			get
			{
				return this.GetTable<tbReactorLoopCommon>();
			}
		}
		
		public ALinq.Table<tbReactorLoopDetail> tbReactorLoopDetail
		{
			get
			{
				return this.GetTable<tbReactorLoopDetail>();
			}
		}
		
		public ALinq.Table<tbReactorLoopEqDiff> tbReactorLoopEqDiff
		{
			get
			{
				return this.GetTable<tbReactorLoopEqDiff>();
			}
		}
		
		public ALinq.Table<tbReboilerPinch> tbReboilerPinch
		{
			get
			{
				return this.GetTable<tbReboilerPinch>();
			}
		}
		
		public ALinq.Table<tbScenario> tbScenario
		{
			get
			{
				return this.GetTable<tbScenario>();
			}
		}
		
		public ALinq.Table<tbScenarioHeatSource> tbScenarioHeatSource
		{
			get
			{
				return this.GetTable<tbScenarioHeatSource>();
			}
		}
		
		public ALinq.Table<tbSink> tbSink
		{
			get
			{
				return this.GetTable<tbSink>();
			}
		}
		
		public ALinq.Table<tbSource> tbSource
		{
			get
			{
				return this.GetTable<tbSource>();
			}
		}
		
		public ALinq.Table<tbSourceFile> tbSourceFile
		{
			get
			{
				return this.GetTable<tbSourceFile>();
			}
		}
		
		public ALinq.Table<tbStream> tbStream
		{
			get
			{
				return this.GetTable<tbStream>();
			}
		}
		
		public ALinq.Table<tbTowerAccumulator> tbTowerAccumulator
		{
			get
			{
				return this.GetTable<tbTowerAccumulator>();
			}
		}
		
		public ALinq.Table<tbTowerFireColumn> tbTowerFireColumn
		{
			get
			{
				return this.GetTable<tbTowerFireColumn>();
			}
		}
		
		public ALinq.Table<tbTowerFireColumnDetail> tbTowerFireColumnDetail
		{
			get
			{
				return this.GetTable<tbTowerFireColumnDetail>();
			}
		}
		
		public ALinq.Table<tbTowerFireCooler> tbTowerFireCooler
		{
			get
			{
				return this.GetTable<tbTowerFireCooler>();
			}
		}
		
		public ALinq.Table<tbTowerFireDrum> tbTowerFireDrum
		{
			get
			{
				return this.GetTable<tbTowerFireDrum>();
			}
		}
		
		public ALinq.Table<tbTowerFireEq> tbTowerFireEq
		{
			get
			{
				return this.GetTable<tbTowerFireEq>();
			}
		}
		
		public ALinq.Table<tbTowerFireHX> tbTowerFireHX
		{
			get
			{
				return this.GetTable<tbTowerFireHX>();
			}
		}
		
		public ALinq.Table<tbTowerFireOther> tbTowerFireOther
		{
			get
			{
				return this.GetTable<tbTowerFireOther>();
			}
		}
		
		public ALinq.Table<tbTowerFlashProduct> tbTowerFlashProduct
		{
			get
			{
				return this.GetTable<tbTowerFlashProduct>();
			}
		}
		
		public ALinq.Table<tbTowerHX> tbTowerHX
		{
			get
			{
				return this.GetTable<tbTowerHX>();
			}
		}
		
		public ALinq.Table<tbTowerHXDetail> tbTowerHXDetail
		{
			get
			{
				return this.GetTable<tbTowerHXDetail>();
			}
		}
		
		public ALinq.Table<tbTowerScenarioHX> tbTowerScenarioHX
		{
			get
			{
				return this.GetTable<tbTowerScenarioHX>();
			}
		}
		
		public ALinq.Table<tbTowerScenarioStream> tbTowerScenarioStream
		{
			get
			{
				return this.GetTable<tbTowerScenarioStream>();
			}
		}
		
		public ALinq.Table<tbTowerSideColumn> tbTowerSideColumn
		{
			get
			{
				return this.GetTable<tbTowerSideColumn>();
			}
		}
		
		public ALinq.Table<tbTreePS> tbTreePS
		{
			get
			{
				return this.GetTable<tbTreePS>();
			}
		}
		
		public ALinq.Table<tbTreeUnit> tbTreeUnit
		{
			get
			{
				return this.GetTable<tbTreeUnit>();
			}
		}
	}
	
	[Table()]
	public partial class systbBasicUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IsDefault;
		
		private string _UnitName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIsDefaultChanging(System.Nullable<int> value);
    partial void OnIsDefaultChanged();
    partial void OnUnitNameChanging(string value);
    partial void OnUnitNameChanged();
    #endregion
		
		public systbBasicUnit()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_UnitName", UpdateCheck=UpdateCheck.Never)]
		public string UnitName
		{
			get
			{
				return this._UnitName;
			}
			set
			{
				if ((this._UnitName != value))
				{
					this.OnUnitNameChanging(value);
					this.SendPropertyChanging();
					this._UnitName = value;
					this.SendPropertyChanged("UnitName");
					this.OnUnitNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class systbBasicUnitCurrent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _BasicUnitID;
		
		private System.Nullable<int> _SystemUnitID;
		
		private System.Nullable<int> _UnitTypeID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBasicUnitIDChanging(System.Nullable<int> value);
    partial void OnBasicUnitIDChanged();
    partial void OnSystemUnitIDChanging(System.Nullable<int> value);
    partial void OnSystemUnitIDChanged();
    partial void OnUnitTypeIDChanging(System.Nullable<int> value);
    partial void OnUnitTypeIDChanged();
    #endregion
		
		public systbBasicUnitCurrent()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_BasicUnitID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BasicUnitID
		{
			get
			{
				return this._BasicUnitID;
			}
			set
			{
				if ((this._BasicUnitID != value))
				{
					this.OnBasicUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BasicUnitID = value;
					this.SendPropertyChanged("BasicUnitID");
					this.OnBasicUnitIDChanged();
				}
			}
		}
		
		[Column(Storage="_SystemUnitID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SystemUnitID
		{
			get
			{
				return this._SystemUnitID;
			}
			set
			{
				if ((this._SystemUnitID != value))
				{
					this.OnSystemUnitIDChanging(value);
					this.SendPropertyChanging();
					this._SystemUnitID = value;
					this.SendPropertyChanged("SystemUnitID");
					this.OnSystemUnitIDChanged();
				}
			}
		}
		
		[Column(Storage="_UnitTypeID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> UnitTypeID
		{
			get
			{
				return this._UnitTypeID;
			}
			set
			{
				if ((this._UnitTypeID != value))
				{
					this.OnUnitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UnitTypeID = value;
					this.SendPropertyChanged("UnitTypeID");
					this.OnUnitTypeIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class systbBasicUnitDefault : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _BasicUnitID;
		
		private System.Nullable<int> _SystemUnitID;
		
		private System.Nullable<int> _UnitTypeID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBasicUnitIDChanging(System.Nullable<int> value);
    partial void OnBasicUnitIDChanged();
    partial void OnSystemUnitIDChanging(System.Nullable<int> value);
    partial void OnSystemUnitIDChanged();
    partial void OnUnitTypeIDChanging(System.Nullable<int> value);
    partial void OnUnitTypeIDChanged();
    #endregion
		
		public systbBasicUnitDefault()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_BasicUnitID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BasicUnitID
		{
			get
			{
				return this._BasicUnitID;
			}
			set
			{
				if ((this._BasicUnitID != value))
				{
					this.OnBasicUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BasicUnitID = value;
					this.SendPropertyChanged("BasicUnitID");
					this.OnBasicUnitIDChanged();
				}
			}
		}
		
		[Column(Storage="_SystemUnitID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SystemUnitID
		{
			get
			{
				return this._SystemUnitID;
			}
			set
			{
				if ((this._SystemUnitID != value))
				{
					this.OnSystemUnitIDChanging(value);
					this.SendPropertyChanging();
					this._SystemUnitID = value;
					this.SendPropertyChanged("SystemUnitID");
					this.OnSystemUnitIDChanged();
				}
			}
		}
		
		[Column(Storage="_UnitTypeID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> UnitTypeID
		{
			get
			{
				return this._UnitTypeID;
			}
			set
			{
				if ((this._UnitTypeID != value))
				{
					this.OnUnitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UnitTypeID = value;
					this.SendPropertyChanged("UnitTypeID");
					this.OnUnitTypeIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class systbGlossary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _Id;
		
		private string _GName;
		
		private System.Nullable<int> _GType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Nullable<int> value);
    partial void OnIdChanged();
    partial void OnGNameChanging(string value);
    partial void OnGNameChanged();
    partial void OnGTypeChanging(System.Nullable<int> value);
    partial void OnGTypeChanged();
    #endregion
		
		public systbGlossary()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_GName", UpdateCheck=UpdateCheck.Never)]
		public string GName
		{
			get
			{
				return this._GName;
			}
			set
			{
				if ((this._GName != value))
				{
					this.OnGNameChanging(value);
					this.SendPropertyChanging();
					this._GName = value;
					this.SendPropertyChanged("GName");
					this.OnGNameChanged();
				}
			}
		}
		
		[Column(Storage="_GType", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> GType
		{
			get
			{
				return this._GType;
			}
			set
			{
				if ((this._GType != value))
				{
					this.OnGTypeChanging(value);
					this.SendPropertyChanging();
					this._GType = value;
					this.SendPropertyChanged("GType");
					this.OnGTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class systbProIIEqType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private string _Eqtypename;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEqtypenameChanging(string value);
    partial void OnEqtypenameChanged();
    #endregion
		
		public systbProIIEqType()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Eqtypename", UpdateCheck=UpdateCheck.Never)]
		public string Eqtypename
		{
			get
			{
				return this._Eqtypename;
			}
			set
			{
				if ((this._Eqtypename != value))
				{
					this.OnEqtypenameChanging(value);
					this.SendPropertyChanging();
					this._Eqtypename = value;
					this.SendPropertyChanged("Eqtypename");
					this.OnEqtypenameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class systbScenarioFactor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _AbnormalHeatInput;
		
		private string _AutomaticControlsFailure;
		
		private string _BlockedOutlet;
		
		private string _Category;
		
		private string _Categoryvalue;
		
		private string _ColdFeedStops;
		
		private string _CoolingWaterFailure;
		
		private string _Fire;
		
		private string _GeneralElectricPowerFailure;
		
		private string _InletValveFailsOpen;
		
		private string _PumpAroundFailure;
		
		private string _refluxFailure;
		
		private string _RefrigerantFailure;
		
		private string _SteamFailure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAbnormalHeatInputChanging(string value);
    partial void OnAbnormalHeatInputChanged();
    partial void OnAutomaticControlsFailureChanging(string value);
    partial void OnAutomaticControlsFailureChanged();
    partial void OnBlockedOutletChanging(string value);
    partial void OnBlockedOutletChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnCategoryvalueChanging(string value);
    partial void OnCategoryvalueChanged();
    partial void OnColdFeedStopsChanging(string value);
    partial void OnColdFeedStopsChanged();
    partial void OnCoolingWaterFailureChanging(string value);
    partial void OnCoolingWaterFailureChanged();
    partial void OnFireChanging(string value);
    partial void OnFireChanged();
    partial void OnGeneralElectricPowerFailureChanging(string value);
    partial void OnGeneralElectricPowerFailureChanged();
    partial void OnInletValveFailsOpenChanging(string value);
    partial void OnInletValveFailsOpenChanged();
    partial void OnPumpAroundFailureChanging(string value);
    partial void OnPumpAroundFailureChanged();
    partial void OnrefluxFailureChanging(string value);
    partial void OnrefluxFailureChanged();
    partial void OnRefrigerantFailureChanging(string value);
    partial void OnRefrigerantFailureChanged();
    partial void OnSteamFailureChanging(string value);
    partial void OnSteamFailureChanged();
    #endregion
		
		public systbScenarioFactor()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_AbnormalHeatInput", UpdateCheck=UpdateCheck.Never)]
		public string AbnormalHeatInput
		{
			get
			{
				return this._AbnormalHeatInput;
			}
			set
			{
				if ((this._AbnormalHeatInput != value))
				{
					this.OnAbnormalHeatInputChanging(value);
					this.SendPropertyChanging();
					this._AbnormalHeatInput = value;
					this.SendPropertyChanged("AbnormalHeatInput");
					this.OnAbnormalHeatInputChanged();
				}
			}
		}
		
		[Column(Storage="_AutomaticControlsFailure", UpdateCheck=UpdateCheck.Never)]
		public string AutomaticControlsFailure
		{
			get
			{
				return this._AutomaticControlsFailure;
			}
			set
			{
				if ((this._AutomaticControlsFailure != value))
				{
					this.OnAutomaticControlsFailureChanging(value);
					this.SendPropertyChanging();
					this._AutomaticControlsFailure = value;
					this.SendPropertyChanged("AutomaticControlsFailure");
					this.OnAutomaticControlsFailureChanged();
				}
			}
		}
		
		[Column(Storage="_BlockedOutlet", UpdateCheck=UpdateCheck.Never)]
		public string BlockedOutlet
		{
			get
			{
				return this._BlockedOutlet;
			}
			set
			{
				if ((this._BlockedOutlet != value))
				{
					this.OnBlockedOutletChanging(value);
					this.SendPropertyChanging();
					this._BlockedOutlet = value;
					this.SendPropertyChanged("BlockedOutlet");
					this.OnBlockedOutletChanged();
				}
			}
		}
		
		[Column(Storage="_Category", UpdateCheck=UpdateCheck.Never)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Categoryvalue", UpdateCheck=UpdateCheck.Never)]
		public string Categoryvalue
		{
			get
			{
				return this._Categoryvalue;
			}
			set
			{
				if ((this._Categoryvalue != value))
				{
					this.OnCategoryvalueChanging(value);
					this.SendPropertyChanging();
					this._Categoryvalue = value;
					this.SendPropertyChanged("Categoryvalue");
					this.OnCategoryvalueChanged();
				}
			}
		}
		
		[Column(Storage="_ColdFeedStops", UpdateCheck=UpdateCheck.Never)]
		public string ColdFeedStops
		{
			get
			{
				return this._ColdFeedStops;
			}
			set
			{
				if ((this._ColdFeedStops != value))
				{
					this.OnColdFeedStopsChanging(value);
					this.SendPropertyChanging();
					this._ColdFeedStops = value;
					this.SendPropertyChanged("ColdFeedStops");
					this.OnColdFeedStopsChanged();
				}
			}
		}
		
		[Column(Storage="_CoolingWaterFailure", UpdateCheck=UpdateCheck.Never)]
		public string CoolingWaterFailure
		{
			get
			{
				return this._CoolingWaterFailure;
			}
			set
			{
				if ((this._CoolingWaterFailure != value))
				{
					this.OnCoolingWaterFailureChanging(value);
					this.SendPropertyChanging();
					this._CoolingWaterFailure = value;
					this.SendPropertyChanged("CoolingWaterFailure");
					this.OnCoolingWaterFailureChanged();
				}
			}
		}
		
		[Column(Storage="_Fire", UpdateCheck=UpdateCheck.Never)]
		public string Fire
		{
			get
			{
				return this._Fire;
			}
			set
			{
				if ((this._Fire != value))
				{
					this.OnFireChanging(value);
					this.SendPropertyChanging();
					this._Fire = value;
					this.SendPropertyChanged("Fire");
					this.OnFireChanged();
				}
			}
		}
		
		[Column(Storage="_GeneralElectricPowerFailure", UpdateCheck=UpdateCheck.Never)]
		public string GeneralElectricPowerFailure
		{
			get
			{
				return this._GeneralElectricPowerFailure;
			}
			set
			{
				if ((this._GeneralElectricPowerFailure != value))
				{
					this.OnGeneralElectricPowerFailureChanging(value);
					this.SendPropertyChanging();
					this._GeneralElectricPowerFailure = value;
					this.SendPropertyChanged("GeneralElectricPowerFailure");
					this.OnGeneralElectricPowerFailureChanged();
				}
			}
		}
		
		[Column(Storage="_InletValveFailsOpen", UpdateCheck=UpdateCheck.Never)]
		public string InletValveFailsOpen
		{
			get
			{
				return this._InletValveFailsOpen;
			}
			set
			{
				if ((this._InletValveFailsOpen != value))
				{
					this.OnInletValveFailsOpenChanging(value);
					this.SendPropertyChanging();
					this._InletValveFailsOpen = value;
					this.SendPropertyChanged("InletValveFailsOpen");
					this.OnInletValveFailsOpenChanged();
				}
			}
		}
		
		[Column(Storage="_PumpAroundFailure", UpdateCheck=UpdateCheck.Never)]
		public string PumpAroundFailure
		{
			get
			{
				return this._PumpAroundFailure;
			}
			set
			{
				if ((this._PumpAroundFailure != value))
				{
					this.OnPumpAroundFailureChanging(value);
					this.SendPropertyChanging();
					this._PumpAroundFailure = value;
					this.SendPropertyChanged("PumpAroundFailure");
					this.OnPumpAroundFailureChanged();
				}
			}
		}
		
		[Column(Storage="_refluxFailure", UpdateCheck=UpdateCheck.Never)]
		public string refluxFailure
		{
			get
			{
				return this._refluxFailure;
			}
			set
			{
				if ((this._refluxFailure != value))
				{
					this.OnrefluxFailureChanging(value);
					this.SendPropertyChanging();
					this._refluxFailure = value;
					this.SendPropertyChanged("refluxFailure");
					this.OnrefluxFailureChanged();
				}
			}
		}
		
		[Column(Storage="_RefrigerantFailure", UpdateCheck=UpdateCheck.Never)]
		public string RefrigerantFailure
		{
			get
			{
				return this._RefrigerantFailure;
			}
			set
			{
				if ((this._RefrigerantFailure != value))
				{
					this.OnRefrigerantFailureChanging(value);
					this.SendPropertyChanging();
					this._RefrigerantFailure = value;
					this.SendPropertyChanged("RefrigerantFailure");
					this.OnRefrigerantFailureChanged();
				}
			}
		}
		
		[Column(Storage="_SteamFailure", UpdateCheck=UpdateCheck.Never)]
		public string SteamFailure
		{
			get
			{
				return this._SteamFailure;
			}
			set
			{
				if ((this._SteamFailure != value))
				{
					this.OnSteamFailureChanging(value);
					this.SendPropertyChanging();
					this._SteamFailure = value;
					this.SendPropertyChanged("SteamFailure");
					this.OnSteamFailureChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class systbSystemUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _Id;
		
		private System.Nullable<double> _Constant;
		
		private string _Description;
		
		private string _Name;
		
		private System.Nullable<double> _ScaleFactor;
		
		private System.Nullable<double> _UnitType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Nullable<int> value);
    partial void OnIdChanged();
    partial void OnConstantChanging(System.Nullable<double> value);
    partial void OnConstantChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnScaleFactorChanging(System.Nullable<double> value);
    partial void OnScaleFactorChanged();
    partial void OnUnitTypeChanging(System.Nullable<double> value);
    partial void OnUnitTypeChanged();
    #endregion
		
		public systbSystemUnit()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Constant", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Constant
		{
			get
			{
				return this._Constant;
			}
			set
			{
				if ((this._Constant != value))
				{
					this.OnConstantChanging(value);
					this.SendPropertyChanging();
					this._Constant = value;
					this.SendPropertyChanged("Constant");
					this.OnConstantChanged();
				}
			}
		}
		
		[Column(Storage="_Description", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Name", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ScaleFactor", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ScaleFactor
		{
			get
			{
				return this._ScaleFactor;
			}
			set
			{
				if ((this._ScaleFactor != value))
				{
					this.OnScaleFactorChanging(value);
					this.SendPropertyChanging();
					this._ScaleFactor = value;
					this.SendPropertyChanged("ScaleFactor");
					this.OnScaleFactorChanged();
				}
			}
		}
		
		[Column(Storage="_UnitType", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> UnitType
		{
			get
			{
				return this._UnitType;
			}
			set
			{
				if ((this._UnitType != value))
				{
					this.OnUnitTypeChanging(value);
					this.SendPropertyChanging();
					this._UnitType = value;
					this.SendPropertyChanged("UnitType");
					this.OnUnitTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class systbUnitType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _Id;
		
		private string _Description;
		
		private System.Nullable<int> _isCalc;
		
		private string _Name;
		
		private string _ShortName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Nullable<int> value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnisCalcChanging(System.Nullable<int> value);
    partial void OnisCalcChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    #endregion
		
		public systbUnitType()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_isCalc", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> isCalc
		{
			get
			{
				return this._isCalc;
			}
			set
			{
				if ((this._isCalc != value))
				{
					this.OnisCalcChanging(value);
					this.SendPropertyChanging();
					this._isCalc = value;
					this.SendPropertyChanged("isCalc");
					this.OnisCalcChanged();
				}
			}
		}
		
		[Column(Storage="_Name", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", UpdateCheck=UpdateCheck.Never)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbAbnormalHeaterDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _AbnormalType;
		
		private System.Nullable<double> _Duty;
		
		private System.Nullable<double> _DutyFactor;
		
		private System.Nullable<int> _HeaterID;
		
		private string _HeaterName;
		
		private string _HeaterType;
		
		private System.Nullable<int> _ScenarioID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAbnormalTypeChanging(System.Nullable<int> value);
    partial void OnAbnormalTypeChanged();
    partial void OnDutyChanging(System.Nullable<double> value);
    partial void OnDutyChanged();
    partial void OnDutyFactorChanging(System.Nullable<double> value);
    partial void OnDutyFactorChanged();
    partial void OnHeaterIDChanging(System.Nullable<int> value);
    partial void OnHeaterIDChanged();
    partial void OnHeaterNameChanging(string value);
    partial void OnHeaterNameChanged();
    partial void OnHeaterTypeChanging(string value);
    partial void OnHeaterTypeChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    #endregion
		
		public tbAbnormalHeaterDetail()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_AbnormalType", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> AbnormalType
		{
			get
			{
				return this._AbnormalType;
			}
			set
			{
				if ((this._AbnormalType != value))
				{
					this.OnAbnormalTypeChanging(value);
					this.SendPropertyChanging();
					this._AbnormalType = value;
					this.SendPropertyChanged("AbnormalType");
					this.OnAbnormalTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Duty", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Duty
		{
			get
			{
				return this._Duty;
			}
			set
			{
				if ((this._Duty != value))
				{
					this.OnDutyChanging(value);
					this.SendPropertyChanging();
					this._Duty = value;
					this.SendPropertyChanged("Duty");
					this.OnDutyChanged();
				}
			}
		}
		
		[Column(Storage="_DutyFactor", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> DutyFactor
		{
			get
			{
				return this._DutyFactor;
			}
			set
			{
				if ((this._DutyFactor != value))
				{
					this.OnDutyFactorChanging(value);
					this.SendPropertyChanging();
					this._DutyFactor = value;
					this.SendPropertyChanged("DutyFactor");
					this.OnDutyFactorChanged();
				}
			}
		}
		
		[Column(Storage="_HeaterID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> HeaterID
		{
			get
			{
				return this._HeaterID;
			}
			set
			{
				if ((this._HeaterID != value))
				{
					this.OnHeaterIDChanging(value);
					this.SendPropertyChanging();
					this._HeaterID = value;
					this.SendPropertyChanged("HeaterID");
					this.OnHeaterIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaterName", UpdateCheck=UpdateCheck.Never)]
		public string HeaterName
		{
			get
			{
				return this._HeaterName;
			}
			set
			{
				if ((this._HeaterName != value))
				{
					this.OnHeaterNameChanging(value);
					this.SendPropertyChanging();
					this._HeaterName = value;
					this.SendPropertyChanged("HeaterName");
					this.OnHeaterNameChanged();
				}
			}
		}
		
		[Column(Storage="_HeaterType", UpdateCheck=UpdateCheck.Never)]
		public string HeaterType
		{
			get
			{
				return this._HeaterType;
			}
			set
			{
				if ((this._HeaterType != value))
				{
					this.OnHeaterTypeChanging(value);
					this.SendPropertyChanging();
					this._HeaterType = value;
					this.SendPropertyChanged("HeaterType");
					this.OnHeaterTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbAirCooledHXFireSize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _PipingContingency;
		
		private string _PipingcontingencyColor;
		
		private System.Nullable<int> _ScenarioID;
		
		private string _ScenarioidColor;
		
		private System.Nullable<double> _WettedBundle;
		
		private string _WettedbundleColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPipingContingencyChanging(System.Nullable<double> value);
    partial void OnPipingContingencyChanged();
    partial void OnPipingcontingencyColorChanging(string value);
    partial void OnPipingcontingencyColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnScenarioidColorChanging(string value);
    partial void OnScenarioidColorChanged();
    partial void OnWettedBundleChanging(System.Nullable<double> value);
    partial void OnWettedBundleChanged();
    partial void OnWettedbundleColorChanging(string value);
    partial void OnWettedbundleColorChanged();
    #endregion
		
		public tbAirCooledHXFireSize()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_PipingContingency", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> PipingContingency
		{
			get
			{
				return this._PipingContingency;
			}
			set
			{
				if ((this._PipingContingency != value))
				{
					this.OnPipingContingencyChanging(value);
					this.SendPropertyChanging();
					this._PipingContingency = value;
					this.SendPropertyChanged("PipingContingency");
					this.OnPipingContingencyChanged();
				}
			}
		}
		
		[Column(Storage="_PipingcontingencyColor", UpdateCheck=UpdateCheck.Never)]
		public string PipingcontingencyColor
		{
			get
			{
				return this._PipingcontingencyColor;
			}
			set
			{
				if ((this._PipingcontingencyColor != value))
				{
					this.OnPipingcontingencyColorChanging(value);
					this.SendPropertyChanging();
					this._PipingcontingencyColor = value;
					this.SendPropertyChanged("PipingcontingencyColor");
					this.OnPipingcontingencyColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioidColor", UpdateCheck=UpdateCheck.Never)]
		public string ScenarioidColor
		{
			get
			{
				return this._ScenarioidColor;
			}
			set
			{
				if ((this._ScenarioidColor != value))
				{
					this.OnScenarioidColorChanging(value);
					this.SendPropertyChanging();
					this._ScenarioidColor = value;
					this.SendPropertyChanged("ScenarioidColor");
					this.OnScenarioidColorChanged();
				}
			}
		}
		
		[Column(Storage="_WettedBundle", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> WettedBundle
		{
			get
			{
				return this._WettedBundle;
			}
			set
			{
				if ((this._WettedBundle != value))
				{
					this.OnWettedBundleChanging(value);
					this.SendPropertyChanging();
					this._WettedBundle = value;
					this.SendPropertyChanged("WettedBundle");
					this.OnWettedBundleChanged();
				}
			}
		}
		
		[Column(Storage="_WettedbundleColor", UpdateCheck=UpdateCheck.Never)]
		public string WettedbundleColor
		{
			get
			{
				return this._WettedbundleColor;
			}
			set
			{
				if ((this._WettedbundleColor != value))
				{
					this.OnWettedbundleColorChanging(value);
					this.SendPropertyChanging();
					this._WettedbundleColor = value;
					this.SendPropertyChanged("WettedbundleColor");
					this.OnWettedbundleColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbBlockedVaporOutlet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _InletAbsorbentUpstreamMaxPressure;
		
		private string _InletabsorbentupstreammaxpressureColor;
		
		private System.Nullable<double> _InletGasUpstreamMaxPressure;
		
		private string _InletgasupstreammaxpressureColor;
		
		private System.Nullable<double> _NormalGasFeedWeightRate;
		
		private string _NormalgasfeedweightrateColor;
		
		private System.Nullable<double> _NormalGasProductWeightRate;
		
		private string _NormalgasproductweightrateColor;
		
		private System.Nullable<short> _OutletType;
		
		private System.Nullable<short> _ScenarioID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnInletAbsorbentUpstreamMaxPressureChanging(System.Nullable<double> value);
    partial void OnInletAbsorbentUpstreamMaxPressureChanged();
    partial void OnInletabsorbentupstreammaxpressureColorChanging(string value);
    partial void OnInletabsorbentupstreammaxpressureColorChanged();
    partial void OnInletGasUpstreamMaxPressureChanging(System.Nullable<double> value);
    partial void OnInletGasUpstreamMaxPressureChanged();
    partial void OnInletgasupstreammaxpressureColorChanging(string value);
    partial void OnInletgasupstreammaxpressureColorChanged();
    partial void OnNormalGasFeedWeightRateChanging(System.Nullable<double> value);
    partial void OnNormalGasFeedWeightRateChanged();
    partial void OnNormalgasfeedweightrateColorChanging(string value);
    partial void OnNormalgasfeedweightrateColorChanged();
    partial void OnNormalGasProductWeightRateChanging(System.Nullable<double> value);
    partial void OnNormalGasProductWeightRateChanged();
    partial void OnNormalgasproductweightrateColorChanging(string value);
    partial void OnNormalgasproductweightrateColorChanged();
    partial void OnOutletTypeChanging(System.Nullable<short> value);
    partial void OnOutletTypeChanged();
    partial void OnScenarioIDChanging(System.Nullable<short> value);
    partial void OnScenarioIDChanged();
    #endregion
		
		public tbBlockedVaporOutlet()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_InletAbsorbentUpstreamMaxPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> InletAbsorbentUpstreamMaxPressure
		{
			get
			{
				return this._InletAbsorbentUpstreamMaxPressure;
			}
			set
			{
				if ((this._InletAbsorbentUpstreamMaxPressure != value))
				{
					this.OnInletAbsorbentUpstreamMaxPressureChanging(value);
					this.SendPropertyChanging();
					this._InletAbsorbentUpstreamMaxPressure = value;
					this.SendPropertyChanged("InletAbsorbentUpstreamMaxPressure");
					this.OnInletAbsorbentUpstreamMaxPressureChanged();
				}
			}
		}
		
		[Column(Storage="_InletabsorbentupstreammaxpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string InletabsorbentupstreammaxpressureColor
		{
			get
			{
				return this._InletabsorbentupstreammaxpressureColor;
			}
			set
			{
				if ((this._InletabsorbentupstreammaxpressureColor != value))
				{
					this.OnInletabsorbentupstreammaxpressureColorChanging(value);
					this.SendPropertyChanging();
					this._InletabsorbentupstreammaxpressureColor = value;
					this.SendPropertyChanged("InletabsorbentupstreammaxpressureColor");
					this.OnInletabsorbentupstreammaxpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_InletGasUpstreamMaxPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> InletGasUpstreamMaxPressure
		{
			get
			{
				return this._InletGasUpstreamMaxPressure;
			}
			set
			{
				if ((this._InletGasUpstreamMaxPressure != value))
				{
					this.OnInletGasUpstreamMaxPressureChanging(value);
					this.SendPropertyChanging();
					this._InletGasUpstreamMaxPressure = value;
					this.SendPropertyChanged("InletGasUpstreamMaxPressure");
					this.OnInletGasUpstreamMaxPressureChanged();
				}
			}
		}
		
		[Column(Storage="_InletgasupstreammaxpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string InletgasupstreammaxpressureColor
		{
			get
			{
				return this._InletgasupstreammaxpressureColor;
			}
			set
			{
				if ((this._InletgasupstreammaxpressureColor != value))
				{
					this.OnInletgasupstreammaxpressureColorChanging(value);
					this.SendPropertyChanging();
					this._InletgasupstreammaxpressureColor = value;
					this.SendPropertyChanged("InletgasupstreammaxpressureColor");
					this.OnInletgasupstreammaxpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_NormalGasFeedWeightRate", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> NormalGasFeedWeightRate
		{
			get
			{
				return this._NormalGasFeedWeightRate;
			}
			set
			{
				if ((this._NormalGasFeedWeightRate != value))
				{
					this.OnNormalGasFeedWeightRateChanging(value);
					this.SendPropertyChanging();
					this._NormalGasFeedWeightRate = value;
					this.SendPropertyChanged("NormalGasFeedWeightRate");
					this.OnNormalGasFeedWeightRateChanged();
				}
			}
		}
		
		[Column(Storage="_NormalgasfeedweightrateColor", UpdateCheck=UpdateCheck.Never)]
		public string NormalgasfeedweightrateColor
		{
			get
			{
				return this._NormalgasfeedweightrateColor;
			}
			set
			{
				if ((this._NormalgasfeedweightrateColor != value))
				{
					this.OnNormalgasfeedweightrateColorChanging(value);
					this.SendPropertyChanging();
					this._NormalgasfeedweightrateColor = value;
					this.SendPropertyChanged("NormalgasfeedweightrateColor");
					this.OnNormalgasfeedweightrateColorChanged();
				}
			}
		}
		
		[Column(Storage="_NormalGasProductWeightRate", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> NormalGasProductWeightRate
		{
			get
			{
				return this._NormalGasProductWeightRate;
			}
			set
			{
				if ((this._NormalGasProductWeightRate != value))
				{
					this.OnNormalGasProductWeightRateChanging(value);
					this.SendPropertyChanging();
					this._NormalGasProductWeightRate = value;
					this.SendPropertyChanged("NormalGasProductWeightRate");
					this.OnNormalGasProductWeightRateChanged();
				}
			}
		}
		
		[Column(Storage="_NormalgasproductweightrateColor", UpdateCheck=UpdateCheck.Never)]
		public string NormalgasproductweightrateColor
		{
			get
			{
				return this._NormalgasproductweightrateColor;
			}
			set
			{
				if ((this._NormalgasproductweightrateColor != value))
				{
					this.OnNormalgasproductweightrateColorChanging(value);
					this.SendPropertyChanging();
					this._NormalgasproductweightrateColor = value;
					this.SendPropertyChanged("NormalgasproductweightrateColor");
					this.OnNormalgasproductweightrateColorChanged();
				}
			}
		}
		
		[Column(Storage="_OutletType", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> OutletType
		{
			get
			{
				return this._OutletType;
			}
			set
			{
				if ((this._OutletType != value))
				{
					this.OnOutletTypeChanging(value);
					this.SendPropertyChanging();
					this._OutletType = value;
					this.SendPropertyChanged("OutletType");
					this.OnOutletTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbCompressorBlockedOutlet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _DeltPowY;
		
		private string _DeltpowyColor;
		
		private System.Nullable<double> _InletLoad;
		
		private string _InletloadColor;
		
		private System.Nullable<double> _KNormal;
		
		private string _KnormalColor;
		
		private System.Nullable<double> _OutletPressure;
		
		private string _OutletpressureColor;
		
		private System.Nullable<double> _RatedCapacity;
		
		private string _RatedcapacityColor;
		
		private System.Nullable<double> _Scale;
		
		private string _ScaleColor;
		
		private System.Nullable<int> _ScenarioID;
		
		private string _ScenarioidColor;
		
		private System.Nullable<double> _SurgeLoad;
		
		private string _SurgeloadColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDeltPowYChanging(System.Nullable<double> value);
    partial void OnDeltPowYChanged();
    partial void OnDeltpowyColorChanging(string value);
    partial void OnDeltpowyColorChanged();
    partial void OnInletLoadChanging(System.Nullable<double> value);
    partial void OnInletLoadChanged();
    partial void OnInletloadColorChanging(string value);
    partial void OnInletloadColorChanged();
    partial void OnKNormalChanging(System.Nullable<double> value);
    partial void OnKNormalChanged();
    partial void OnKnormalColorChanging(string value);
    partial void OnKnormalColorChanged();
    partial void OnOutletPressureChanging(System.Nullable<double> value);
    partial void OnOutletPressureChanged();
    partial void OnOutletpressureColorChanging(string value);
    partial void OnOutletpressureColorChanged();
    partial void OnRatedCapacityChanging(System.Nullable<double> value);
    partial void OnRatedCapacityChanged();
    partial void OnRatedcapacityColorChanging(string value);
    partial void OnRatedcapacityColorChanged();
    partial void OnScaleChanging(System.Nullable<double> value);
    partial void OnScaleChanged();
    partial void OnScaleColorChanging(string value);
    partial void OnScaleColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnScenarioidColorChanging(string value);
    partial void OnScenarioidColorChanged();
    partial void OnSurgeLoadChanging(System.Nullable<double> value);
    partial void OnSurgeLoadChanged();
    partial void OnSurgeloadColorChanging(string value);
    partial void OnSurgeloadColorChanged();
    #endregion
		
		public tbCompressorBlockedOutlet()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DeltPowY", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> DeltPowY
		{
			get
			{
				return this._DeltPowY;
			}
			set
			{
				if ((this._DeltPowY != value))
				{
					this.OnDeltPowYChanging(value);
					this.SendPropertyChanging();
					this._DeltPowY = value;
					this.SendPropertyChanged("DeltPowY");
					this.OnDeltPowYChanged();
				}
			}
		}
		
		[Column(Storage="_DeltpowyColor", UpdateCheck=UpdateCheck.Never)]
		public string DeltpowyColor
		{
			get
			{
				return this._DeltpowyColor;
			}
			set
			{
				if ((this._DeltpowyColor != value))
				{
					this.OnDeltpowyColorChanging(value);
					this.SendPropertyChanging();
					this._DeltpowyColor = value;
					this.SendPropertyChanged("DeltpowyColor");
					this.OnDeltpowyColorChanged();
				}
			}
		}
		
		[Column(Storage="_InletLoad", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> InletLoad
		{
			get
			{
				return this._InletLoad;
			}
			set
			{
				if ((this._InletLoad != value))
				{
					this.OnInletLoadChanging(value);
					this.SendPropertyChanging();
					this._InletLoad = value;
					this.SendPropertyChanged("InletLoad");
					this.OnInletLoadChanged();
				}
			}
		}
		
		[Column(Storage="_InletloadColor", UpdateCheck=UpdateCheck.Never)]
		public string InletloadColor
		{
			get
			{
				return this._InletloadColor;
			}
			set
			{
				if ((this._InletloadColor != value))
				{
					this.OnInletloadColorChanging(value);
					this.SendPropertyChanging();
					this._InletloadColor = value;
					this.SendPropertyChanged("InletloadColor");
					this.OnInletloadColorChanged();
				}
			}
		}
		
		[Column(Storage="_KNormal", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> KNormal
		{
			get
			{
				return this._KNormal;
			}
			set
			{
				if ((this._KNormal != value))
				{
					this.OnKNormalChanging(value);
					this.SendPropertyChanging();
					this._KNormal = value;
					this.SendPropertyChanged("KNormal");
					this.OnKNormalChanged();
				}
			}
		}
		
		[Column(Storage="_KnormalColor", UpdateCheck=UpdateCheck.Never)]
		public string KnormalColor
		{
			get
			{
				return this._KnormalColor;
			}
			set
			{
				if ((this._KnormalColor != value))
				{
					this.OnKnormalColorChanging(value);
					this.SendPropertyChanging();
					this._KnormalColor = value;
					this.SendPropertyChanged("KnormalColor");
					this.OnKnormalColorChanged();
				}
			}
		}
		
		[Column(Storage="_OutletPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> OutletPressure
		{
			get
			{
				return this._OutletPressure;
			}
			set
			{
				if ((this._OutletPressure != value))
				{
					this.OnOutletPressureChanging(value);
					this.SendPropertyChanging();
					this._OutletPressure = value;
					this.SendPropertyChanged("OutletPressure");
					this.OnOutletPressureChanged();
				}
			}
		}
		
		[Column(Storage="_OutletpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string OutletpressureColor
		{
			get
			{
				return this._OutletpressureColor;
			}
			set
			{
				if ((this._OutletpressureColor != value))
				{
					this.OnOutletpressureColorChanging(value);
					this.SendPropertyChanging();
					this._OutletpressureColor = value;
					this.SendPropertyChanged("OutletpressureColor");
					this.OnOutletpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_RatedCapacity", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> RatedCapacity
		{
			get
			{
				return this._RatedCapacity;
			}
			set
			{
				if ((this._RatedCapacity != value))
				{
					this.OnRatedCapacityChanging(value);
					this.SendPropertyChanging();
					this._RatedCapacity = value;
					this.SendPropertyChanged("RatedCapacity");
					this.OnRatedCapacityChanged();
				}
			}
		}
		
		[Column(Storage="_RatedcapacityColor", UpdateCheck=UpdateCheck.Never)]
		public string RatedcapacityColor
		{
			get
			{
				return this._RatedcapacityColor;
			}
			set
			{
				if ((this._RatedcapacityColor != value))
				{
					this.OnRatedcapacityColorChanging(value);
					this.SendPropertyChanging();
					this._RatedcapacityColor = value;
					this.SendPropertyChanged("RatedcapacityColor");
					this.OnRatedcapacityColorChanged();
				}
			}
		}
		
		[Column(Storage="_Scale", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Scale
		{
			get
			{
				return this._Scale;
			}
			set
			{
				if ((this._Scale != value))
				{
					this.OnScaleChanging(value);
					this.SendPropertyChanging();
					this._Scale = value;
					this.SendPropertyChanged("Scale");
					this.OnScaleChanged();
				}
			}
		}
		
		[Column(Storage="_ScaleColor", UpdateCheck=UpdateCheck.Never)]
		public string ScaleColor
		{
			get
			{
				return this._ScaleColor;
			}
			set
			{
				if ((this._ScaleColor != value))
				{
					this.OnScaleColorChanging(value);
					this.SendPropertyChanging();
					this._ScaleColor = value;
					this.SendPropertyChanged("ScaleColor");
					this.OnScaleColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioidColor", UpdateCheck=UpdateCheck.Never)]
		public string ScenarioidColor
		{
			get
			{
				return this._ScenarioidColor;
			}
			set
			{
				if ((this._ScenarioidColor != value))
				{
					this.OnScenarioidColorChanging(value);
					this.SendPropertyChanging();
					this._ScenarioidColor = value;
					this.SendPropertyChanged("ScenarioidColor");
					this.OnScenarioidColorChanged();
				}
			}
		}
		
		[Column(Storage="_SurgeLoad", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> SurgeLoad
		{
			get
			{
				return this._SurgeLoad;
			}
			set
			{
				if ((this._SurgeLoad != value))
				{
					this.OnSurgeLoadChanging(value);
					this.SendPropertyChanging();
					this._SurgeLoad = value;
					this.SendPropertyChanged("SurgeLoad");
					this.OnSurgeLoadChanged();
				}
			}
		}
		
		[Column(Storage="_SurgeloadColor", UpdateCheck=UpdateCheck.Never)]
		public string SurgeloadColor
		{
			get
			{
				return this._SurgeloadColor;
			}
			set
			{
				if ((this._SurgeloadColor != value))
				{
					this.OnSurgeloadColorChanging(value);
					this.SendPropertyChanging();
					this._SurgeloadColor = value;
					this.SendPropertyChanged("SurgeloadColor");
					this.OnSurgeloadColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbCondenserCalc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private bool _Flooding;
		
		private string _FloodingColor;
		
		private bool _IsSurgeTime;
		
		private string _IssurgetimeColor;
		
		private System.Nullable<int> _ScenarioID;
		
		private System.Nullable<double> _SurgeTime;
		
		private string _SurgetimeColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFloodingChanging(bool value);
    partial void OnFloodingChanged();
    partial void OnFloodingColorChanging(string value);
    partial void OnFloodingColorChanged();
    partial void OnIsSurgeTimeChanging(bool value);
    partial void OnIsSurgeTimeChanged();
    partial void OnIssurgetimeColorChanging(string value);
    partial void OnIssurgetimeColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnSurgeTimeChanging(System.Nullable<double> value);
    partial void OnSurgeTimeChanged();
    partial void OnSurgetimeColorChanging(string value);
    partial void OnSurgetimeColorChanged();
    #endregion
		
		public tbCondenserCalc()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Flooding", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool Flooding
		{
			get
			{
				return this._Flooding;
			}
			set
			{
				if ((this._Flooding != value))
				{
					this.OnFloodingChanging(value);
					this.SendPropertyChanging();
					this._Flooding = value;
					this.SendPropertyChanged("Flooding");
					this.OnFloodingChanged();
				}
			}
		}
		
		[Column(Storage="_FloodingColor", UpdateCheck=UpdateCheck.Never)]
		public string FloodingColor
		{
			get
			{
				return this._FloodingColor;
			}
			set
			{
				if ((this._FloodingColor != value))
				{
					this.OnFloodingColorChanging(value);
					this.SendPropertyChanging();
					this._FloodingColor = value;
					this.SendPropertyChanged("FloodingColor");
					this.OnFloodingColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsSurgeTime", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsSurgeTime
		{
			get
			{
				return this._IsSurgeTime;
			}
			set
			{
				if ((this._IsSurgeTime != value))
				{
					this.OnIsSurgeTimeChanging(value);
					this.SendPropertyChanging();
					this._IsSurgeTime = value;
					this.SendPropertyChanged("IsSurgeTime");
					this.OnIsSurgeTimeChanged();
				}
			}
		}
		
		[Column(Storage="_IssurgetimeColor", UpdateCheck=UpdateCheck.Never)]
		public string IssurgetimeColor
		{
			get
			{
				return this._IssurgetimeColor;
			}
			set
			{
				if ((this._IssurgetimeColor != value))
				{
					this.OnIssurgetimeColorChanging(value);
					this.SendPropertyChanging();
					this._IssurgetimeColor = value;
					this.SendPropertyChanged("IssurgetimeColor");
					this.OnIssurgetimeColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_SurgeTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> SurgeTime
		{
			get
			{
				return this._SurgeTime;
			}
			set
			{
				if ((this._SurgeTime != value))
				{
					this.OnSurgeTimeChanging(value);
					this.SendPropertyChanging();
					this._SurgeTime = value;
					this.SendPropertyChanged("SurgeTime");
					this.OnSurgeTimeChanged();
				}
			}
		}
		
		[Column(Storage="_SurgetimeColor", UpdateCheck=UpdateCheck.Never)]
		public string SurgetimeColor
		{
			get
			{
				return this._SurgetimeColor;
			}
			set
			{
				if ((this._SurgetimeColor != value))
				{
					this.OnSurgetimeColorChanging(value);
					this.SendPropertyChanging();
					this._SurgetimeColor = value;
					this.SendPropertyChanged("SurgetimeColor");
					this.OnSurgetimeColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbDevice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ColdHighPressureSeparator;
		
		private string _ColdhighpressureseparatorColor;
		
		private string _ColdInlet;
		
		private string _ColdOutlet;
		
		private string _ColdReactorFeedStream;
		
		private string _ColdreactorfeedstreamColor;
		
		private string _ColdReactorFeedStream2;
		
		private string _Coldreactorfeedstream2Color;
		
		private string _CompressorH2Stream;
		
		private string _Compressorh2streamColor;
		
		private string _CompressorType;
		
		private string _CompressortypeColor;
		
		private string _Description;
		
		private string _DescriptionColor;
		
		private string _DeviceName;
		
		private System.Nullable<int> _DeviceType;
		
		private string _Driver;
		
		private string _DriverColor;
		
		private string _DrumType;
		
		private string _DrumtypeColor;
		
		private System.Nullable<double> _Duty;
		
		private string _DutyColor;
		
		private string _EffluentStream;
		
		private string _EffluentstreamColor;
		
		private string _EffluentStream2;
		
		private string _Effluentstream2Color;
		
		private string _FirstFeed;
		
		private string _FirstProduct;
		
		private string _HotHighPressureSeparator;
		
		private string _HothighpressureseparatorColor;
		
		private string _HotInlet;
		
		private string _HotOutlet;
		
		private string _HXNetworkColdStream;
		
		private string _HxnetworkcoldstreamColor;
		
		private string _HxType;
		
		private string _HxtypeColor;
		
		private string _InjectionWaterStream;
		
		private string _InjectionwaterstreamColor;
		
		private bool _IsMatched;
		
		private string _IsmatchedColor;
		
		private bool _IsSolved;
		
		private string _IssolvedColor;
		
		private string _LastFeed;
		
		private string _LastProduct;
		
		private System.Nullable<double> _Pressure;
		
		private string _PressureColor;
		
		private string _ShellFeedStreams;
		
		private string _ShellfeedstreamsColor;
		
		private string _SourceFile;
		
		private string _SourcefileColor;
		
		private string _StageNumber;
		
		private string _StagenumberColor;
		
		private System.Nullable<double> _Temperature;
		
		private string _TemperatureColor;
		
		private string _TowerType;
		
		private string _TowertypeColor;
		
		private string _TubeFeedStreams;
		
		private string _TubefeedstreamsColor;
		
		private string _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnColdHighPressureSeparatorChanging(string value);
    partial void OnColdHighPressureSeparatorChanged();
    partial void OnColdhighpressureseparatorColorChanging(string value);
    partial void OnColdhighpressureseparatorColorChanged();
    partial void OnColdInletChanging(string value);
    partial void OnColdInletChanged();
    partial void OnColdOutletChanging(string value);
    partial void OnColdOutletChanged();
    partial void OnColdReactorFeedStreamChanging(string value);
    partial void OnColdReactorFeedStreamChanged();
    partial void OnColdreactorfeedstreamColorChanging(string value);
    partial void OnColdreactorfeedstreamColorChanged();
    partial void OnColdReactorFeedStream2Changing(string value);
    partial void OnColdReactorFeedStream2Changed();
    partial void OnColdreactorfeedstream2ColorChanging(string value);
    partial void OnColdreactorfeedstream2ColorChanged();
    partial void OnCompressorH2StreamChanging(string value);
    partial void OnCompressorH2StreamChanged();
    partial void OnCompressorh2streamColorChanging(string value);
    partial void OnCompressorh2streamColorChanged();
    partial void OnCompressorTypeChanging(string value);
    partial void OnCompressorTypeChanged();
    partial void OnCompressortypeColorChanging(string value);
    partial void OnCompressortypeColorChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDescriptionColorChanging(string value);
    partial void OnDescriptionColorChanged();
    partial void OnDeviceNameChanging(string value);
    partial void OnDeviceNameChanged();
    partial void OnDeviceTypeChanging(System.Nullable<int> value);
    partial void OnDeviceTypeChanged();
    partial void OnDriverChanging(string value);
    partial void OnDriverChanged();
    partial void OnDriverColorChanging(string value);
    partial void OnDriverColorChanged();
    partial void OnDrumTypeChanging(string value);
    partial void OnDrumTypeChanged();
    partial void OnDrumtypeColorChanging(string value);
    partial void OnDrumtypeColorChanged();
    partial void OnDutyChanging(System.Nullable<double> value);
    partial void OnDutyChanged();
    partial void OnDutyColorChanging(string value);
    partial void OnDutyColorChanged();
    partial void OnEffluentStreamChanging(string value);
    partial void OnEffluentStreamChanged();
    partial void OnEffluentstreamColorChanging(string value);
    partial void OnEffluentstreamColorChanged();
    partial void OnEffluentStream2Changing(string value);
    partial void OnEffluentStream2Changed();
    partial void OnEffluentstream2ColorChanging(string value);
    partial void OnEffluentstream2ColorChanged();
    partial void OnFirstFeedChanging(string value);
    partial void OnFirstFeedChanged();
    partial void OnFirstProductChanging(string value);
    partial void OnFirstProductChanged();
    partial void OnHotHighPressureSeparatorChanging(string value);
    partial void OnHotHighPressureSeparatorChanged();
    partial void OnHothighpressureseparatorColorChanging(string value);
    partial void OnHothighpressureseparatorColorChanged();
    partial void OnHotInletChanging(string value);
    partial void OnHotInletChanged();
    partial void OnHotOutletChanging(string value);
    partial void OnHotOutletChanged();
    partial void OnHXNetworkColdStreamChanging(string value);
    partial void OnHXNetworkColdStreamChanged();
    partial void OnHxnetworkcoldstreamColorChanging(string value);
    partial void OnHxnetworkcoldstreamColorChanged();
    partial void OnHxTypeChanging(string value);
    partial void OnHxTypeChanged();
    partial void OnHxtypeColorChanging(string value);
    partial void OnHxtypeColorChanged();
    partial void OnInjectionWaterStreamChanging(string value);
    partial void OnInjectionWaterStreamChanged();
    partial void OnInjectionwaterstreamColorChanging(string value);
    partial void OnInjectionwaterstreamColorChanged();
    partial void OnIsMatchedChanging(bool value);
    partial void OnIsMatchedChanged();
    partial void OnIsmatchedColorChanging(string value);
    partial void OnIsmatchedColorChanged();
    partial void OnIsSolvedChanging(bool value);
    partial void OnIsSolvedChanged();
    partial void OnIssolvedColorChanging(string value);
    partial void OnIssolvedColorChanged();
    partial void OnLastFeedChanging(string value);
    partial void OnLastFeedChanged();
    partial void OnLastProductChanging(string value);
    partial void OnLastProductChanged();
    partial void OnPressureChanging(System.Nullable<double> value);
    partial void OnPressureChanged();
    partial void OnPressureColorChanging(string value);
    partial void OnPressureColorChanged();
    partial void OnShellFeedStreamsChanging(string value);
    partial void OnShellFeedStreamsChanged();
    partial void OnShellfeedstreamsColorChanging(string value);
    partial void OnShellfeedstreamsColorChanged();
    partial void OnSourceFileChanging(string value);
    partial void OnSourceFileChanged();
    partial void OnSourcefileColorChanging(string value);
    partial void OnSourcefileColorChanged();
    partial void OnStageNumberChanging(string value);
    partial void OnStageNumberChanged();
    partial void OnStagenumberColorChanging(string value);
    partial void OnStagenumberColorChanged();
    partial void OnTemperatureChanging(System.Nullable<double> value);
    partial void OnTemperatureChanged();
    partial void OnTemperatureColorChanging(string value);
    partial void OnTemperatureColorChanged();
    partial void OnTowerTypeChanging(string value);
    partial void OnTowerTypeChanged();
    partial void OnTowertypeColorChanging(string value);
    partial void OnTowertypeColorChanged();
    partial void OnTubeFeedStreamsChanging(string value);
    partial void OnTubeFeedStreamsChanged();
    partial void OnTubefeedstreamsColorChanging(string value);
    partial void OnTubefeedstreamsColorChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    #endregion
		
		public tbDevice()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ColdHighPressureSeparator", UpdateCheck=UpdateCheck.Never)]
		public string ColdHighPressureSeparator
		{
			get
			{
				return this._ColdHighPressureSeparator;
			}
			set
			{
				if ((this._ColdHighPressureSeparator != value))
				{
					this.OnColdHighPressureSeparatorChanging(value);
					this.SendPropertyChanging();
					this._ColdHighPressureSeparator = value;
					this.SendPropertyChanged("ColdHighPressureSeparator");
					this.OnColdHighPressureSeparatorChanged();
				}
			}
		}
		
		[Column(Storage="_ColdhighpressureseparatorColor", UpdateCheck=UpdateCheck.Never)]
		public string ColdhighpressureseparatorColor
		{
			get
			{
				return this._ColdhighpressureseparatorColor;
			}
			set
			{
				if ((this._ColdhighpressureseparatorColor != value))
				{
					this.OnColdhighpressureseparatorColorChanging(value);
					this.SendPropertyChanging();
					this._ColdhighpressureseparatorColor = value;
					this.SendPropertyChanged("ColdhighpressureseparatorColor");
					this.OnColdhighpressureseparatorColorChanged();
				}
			}
		}
		
		[Column(Storage="_ColdInlet", UpdateCheck=UpdateCheck.Never)]
		public string ColdInlet
		{
			get
			{
				return this._ColdInlet;
			}
			set
			{
				if ((this._ColdInlet != value))
				{
					this.OnColdInletChanging(value);
					this.SendPropertyChanging();
					this._ColdInlet = value;
					this.SendPropertyChanged("ColdInlet");
					this.OnColdInletChanged();
				}
			}
		}
		
		[Column(Storage="_ColdOutlet", UpdateCheck=UpdateCheck.Never)]
		public string ColdOutlet
		{
			get
			{
				return this._ColdOutlet;
			}
			set
			{
				if ((this._ColdOutlet != value))
				{
					this.OnColdOutletChanging(value);
					this.SendPropertyChanging();
					this._ColdOutlet = value;
					this.SendPropertyChanged("ColdOutlet");
					this.OnColdOutletChanged();
				}
			}
		}
		
		[Column(Storage="_ColdReactorFeedStream", UpdateCheck=UpdateCheck.Never)]
		public string ColdReactorFeedStream
		{
			get
			{
				return this._ColdReactorFeedStream;
			}
			set
			{
				if ((this._ColdReactorFeedStream != value))
				{
					this.OnColdReactorFeedStreamChanging(value);
					this.SendPropertyChanging();
					this._ColdReactorFeedStream = value;
					this.SendPropertyChanged("ColdReactorFeedStream");
					this.OnColdReactorFeedStreamChanged();
				}
			}
		}
		
		[Column(Storage="_ColdreactorfeedstreamColor", UpdateCheck=UpdateCheck.Never)]
		public string ColdreactorfeedstreamColor
		{
			get
			{
				return this._ColdreactorfeedstreamColor;
			}
			set
			{
				if ((this._ColdreactorfeedstreamColor != value))
				{
					this.OnColdreactorfeedstreamColorChanging(value);
					this.SendPropertyChanging();
					this._ColdreactorfeedstreamColor = value;
					this.SendPropertyChanged("ColdreactorfeedstreamColor");
					this.OnColdreactorfeedstreamColorChanged();
				}
			}
		}
		
		[Column(Storage="_ColdReactorFeedStream2", UpdateCheck=UpdateCheck.Never)]
		public string ColdReactorFeedStream2
		{
			get
			{
				return this._ColdReactorFeedStream2;
			}
			set
			{
				if ((this._ColdReactorFeedStream2 != value))
				{
					this.OnColdReactorFeedStream2Changing(value);
					this.SendPropertyChanging();
					this._ColdReactorFeedStream2 = value;
					this.SendPropertyChanged("ColdReactorFeedStream2");
					this.OnColdReactorFeedStream2Changed();
				}
			}
		}
		
		[Column(Storage="_Coldreactorfeedstream2Color", UpdateCheck=UpdateCheck.Never)]
		public string Coldreactorfeedstream2Color
		{
			get
			{
				return this._Coldreactorfeedstream2Color;
			}
			set
			{
				if ((this._Coldreactorfeedstream2Color != value))
				{
					this.OnColdreactorfeedstream2ColorChanging(value);
					this.SendPropertyChanging();
					this._Coldreactorfeedstream2Color = value;
					this.SendPropertyChanged("Coldreactorfeedstream2Color");
					this.OnColdreactorfeedstream2ColorChanged();
				}
			}
		}
		
		[Column(Storage="_CompressorH2Stream", UpdateCheck=UpdateCheck.Never)]
		public string CompressorH2Stream
		{
			get
			{
				return this._CompressorH2Stream;
			}
			set
			{
				if ((this._CompressorH2Stream != value))
				{
					this.OnCompressorH2StreamChanging(value);
					this.SendPropertyChanging();
					this._CompressorH2Stream = value;
					this.SendPropertyChanged("CompressorH2Stream");
					this.OnCompressorH2StreamChanged();
				}
			}
		}
		
		[Column(Storage="_Compressorh2streamColor", UpdateCheck=UpdateCheck.Never)]
		public string Compressorh2streamColor
		{
			get
			{
				return this._Compressorh2streamColor;
			}
			set
			{
				if ((this._Compressorh2streamColor != value))
				{
					this.OnCompressorh2streamColorChanging(value);
					this.SendPropertyChanging();
					this._Compressorh2streamColor = value;
					this.SendPropertyChanged("Compressorh2streamColor");
					this.OnCompressorh2streamColorChanged();
				}
			}
		}
		
		[Column(Storage="_CompressorType", UpdateCheck=UpdateCheck.Never)]
		public string CompressorType
		{
			get
			{
				return this._CompressorType;
			}
			set
			{
				if ((this._CompressorType != value))
				{
					this.OnCompressorTypeChanging(value);
					this.SendPropertyChanging();
					this._CompressorType = value;
					this.SendPropertyChanged("CompressorType");
					this.OnCompressorTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CompressortypeColor", UpdateCheck=UpdateCheck.Never)]
		public string CompressortypeColor
		{
			get
			{
				return this._CompressortypeColor;
			}
			set
			{
				if ((this._CompressortypeColor != value))
				{
					this.OnCompressortypeColorChanging(value);
					this.SendPropertyChanging();
					this._CompressortypeColor = value;
					this.SendPropertyChanged("CompressortypeColor");
					this.OnCompressortypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_Description", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DescriptionColor", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionColor
		{
			get
			{
				return this._DescriptionColor;
			}
			set
			{
				if ((this._DescriptionColor != value))
				{
					this.OnDescriptionColorChanging(value);
					this.SendPropertyChanging();
					this._DescriptionColor = value;
					this.SendPropertyChanged("DescriptionColor");
					this.OnDescriptionColorChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceName", UpdateCheck=UpdateCheck.Never)]
		public string DeviceName
		{
			get
			{
				return this._DeviceName;
			}
			set
			{
				if ((this._DeviceName != value))
				{
					this.OnDeviceNameChanging(value);
					this.SendPropertyChanging();
					this._DeviceName = value;
					this.SendPropertyChanged("DeviceName");
					this.OnDeviceNameChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceType", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DeviceType
		{
			get
			{
				return this._DeviceType;
			}
			set
			{
				if ((this._DeviceType != value))
				{
					this.OnDeviceTypeChanging(value);
					this.SendPropertyChanging();
					this._DeviceType = value;
					this.SendPropertyChanged("DeviceType");
					this.OnDeviceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Driver", UpdateCheck=UpdateCheck.Never)]
		public string Driver
		{
			get
			{
				return this._Driver;
			}
			set
			{
				if ((this._Driver != value))
				{
					this.OnDriverChanging(value);
					this.SendPropertyChanging();
					this._Driver = value;
					this.SendPropertyChanged("Driver");
					this.OnDriverChanged();
				}
			}
		}
		
		[Column(Storage="_DriverColor", UpdateCheck=UpdateCheck.Never)]
		public string DriverColor
		{
			get
			{
				return this._DriverColor;
			}
			set
			{
				if ((this._DriverColor != value))
				{
					this.OnDriverColorChanging(value);
					this.SendPropertyChanging();
					this._DriverColor = value;
					this.SendPropertyChanged("DriverColor");
					this.OnDriverColorChanged();
				}
			}
		}
		
		[Column(Storage="_DrumType", UpdateCheck=UpdateCheck.Never)]
		public string DrumType
		{
			get
			{
				return this._DrumType;
			}
			set
			{
				if ((this._DrumType != value))
				{
					this.OnDrumTypeChanging(value);
					this.SendPropertyChanging();
					this._DrumType = value;
					this.SendPropertyChanged("DrumType");
					this.OnDrumTypeChanged();
				}
			}
		}
		
		[Column(Storage="_DrumtypeColor", UpdateCheck=UpdateCheck.Never)]
		public string DrumtypeColor
		{
			get
			{
				return this._DrumtypeColor;
			}
			set
			{
				if ((this._DrumtypeColor != value))
				{
					this.OnDrumtypeColorChanging(value);
					this.SendPropertyChanging();
					this._DrumtypeColor = value;
					this.SendPropertyChanged("DrumtypeColor");
					this.OnDrumtypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_Duty", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Duty
		{
			get
			{
				return this._Duty;
			}
			set
			{
				if ((this._Duty != value))
				{
					this.OnDutyChanging(value);
					this.SendPropertyChanging();
					this._Duty = value;
					this.SendPropertyChanged("Duty");
					this.OnDutyChanged();
				}
			}
		}
		
		[Column(Storage="_DutyColor", UpdateCheck=UpdateCheck.Never)]
		public string DutyColor
		{
			get
			{
				return this._DutyColor;
			}
			set
			{
				if ((this._DutyColor != value))
				{
					this.OnDutyColorChanging(value);
					this.SendPropertyChanging();
					this._DutyColor = value;
					this.SendPropertyChanged("DutyColor");
					this.OnDutyColorChanged();
				}
			}
		}
		
		[Column(Storage="_EffluentStream", UpdateCheck=UpdateCheck.Never)]
		public string EffluentStream
		{
			get
			{
				return this._EffluentStream;
			}
			set
			{
				if ((this._EffluentStream != value))
				{
					this.OnEffluentStreamChanging(value);
					this.SendPropertyChanging();
					this._EffluentStream = value;
					this.SendPropertyChanged("EffluentStream");
					this.OnEffluentStreamChanged();
				}
			}
		}
		
		[Column(Storage="_EffluentstreamColor", UpdateCheck=UpdateCheck.Never)]
		public string EffluentstreamColor
		{
			get
			{
				return this._EffluentstreamColor;
			}
			set
			{
				if ((this._EffluentstreamColor != value))
				{
					this.OnEffluentstreamColorChanging(value);
					this.SendPropertyChanging();
					this._EffluentstreamColor = value;
					this.SendPropertyChanged("EffluentstreamColor");
					this.OnEffluentstreamColorChanged();
				}
			}
		}
		
		[Column(Storage="_EffluentStream2", UpdateCheck=UpdateCheck.Never)]
		public string EffluentStream2
		{
			get
			{
				return this._EffluentStream2;
			}
			set
			{
				if ((this._EffluentStream2 != value))
				{
					this.OnEffluentStream2Changing(value);
					this.SendPropertyChanging();
					this._EffluentStream2 = value;
					this.SendPropertyChanged("EffluentStream2");
					this.OnEffluentStream2Changed();
				}
			}
		}
		
		[Column(Storage="_Effluentstream2Color", UpdateCheck=UpdateCheck.Never)]
		public string Effluentstream2Color
		{
			get
			{
				return this._Effluentstream2Color;
			}
			set
			{
				if ((this._Effluentstream2Color != value))
				{
					this.OnEffluentstream2ColorChanging(value);
					this.SendPropertyChanging();
					this._Effluentstream2Color = value;
					this.SendPropertyChanged("Effluentstream2Color");
					this.OnEffluentstream2ColorChanged();
				}
			}
		}
		
		[Column(Storage="_FirstFeed", UpdateCheck=UpdateCheck.Never)]
		public string FirstFeed
		{
			get
			{
				return this._FirstFeed;
			}
			set
			{
				if ((this._FirstFeed != value))
				{
					this.OnFirstFeedChanging(value);
					this.SendPropertyChanging();
					this._FirstFeed = value;
					this.SendPropertyChanged("FirstFeed");
					this.OnFirstFeedChanged();
				}
			}
		}
		
		[Column(Storage="_FirstProduct", UpdateCheck=UpdateCheck.Never)]
		public string FirstProduct
		{
			get
			{
				return this._FirstProduct;
			}
			set
			{
				if ((this._FirstProduct != value))
				{
					this.OnFirstProductChanging(value);
					this.SendPropertyChanging();
					this._FirstProduct = value;
					this.SendPropertyChanged("FirstProduct");
					this.OnFirstProductChanged();
				}
			}
		}
		
		[Column(Storage="_HotHighPressureSeparator", UpdateCheck=UpdateCheck.Never)]
		public string HotHighPressureSeparator
		{
			get
			{
				return this._HotHighPressureSeparator;
			}
			set
			{
				if ((this._HotHighPressureSeparator != value))
				{
					this.OnHotHighPressureSeparatorChanging(value);
					this.SendPropertyChanging();
					this._HotHighPressureSeparator = value;
					this.SendPropertyChanged("HotHighPressureSeparator");
					this.OnHotHighPressureSeparatorChanged();
				}
			}
		}
		
		[Column(Storage="_HothighpressureseparatorColor", UpdateCheck=UpdateCheck.Never)]
		public string HothighpressureseparatorColor
		{
			get
			{
				return this._HothighpressureseparatorColor;
			}
			set
			{
				if ((this._HothighpressureseparatorColor != value))
				{
					this.OnHothighpressureseparatorColorChanging(value);
					this.SendPropertyChanging();
					this._HothighpressureseparatorColor = value;
					this.SendPropertyChanged("HothighpressureseparatorColor");
					this.OnHothighpressureseparatorColorChanged();
				}
			}
		}
		
		[Column(Storage="_HotInlet", UpdateCheck=UpdateCheck.Never)]
		public string HotInlet
		{
			get
			{
				return this._HotInlet;
			}
			set
			{
				if ((this._HotInlet != value))
				{
					this.OnHotInletChanging(value);
					this.SendPropertyChanging();
					this._HotInlet = value;
					this.SendPropertyChanged("HotInlet");
					this.OnHotInletChanged();
				}
			}
		}
		
		[Column(Storage="_HotOutlet", UpdateCheck=UpdateCheck.Never)]
		public string HotOutlet
		{
			get
			{
				return this._HotOutlet;
			}
			set
			{
				if ((this._HotOutlet != value))
				{
					this.OnHotOutletChanging(value);
					this.SendPropertyChanging();
					this._HotOutlet = value;
					this.SendPropertyChanged("HotOutlet");
					this.OnHotOutletChanged();
				}
			}
		}
		
		[Column(Storage="_HXNetworkColdStream", UpdateCheck=UpdateCheck.Never)]
		public string HXNetworkColdStream
		{
			get
			{
				return this._HXNetworkColdStream;
			}
			set
			{
				if ((this._HXNetworkColdStream != value))
				{
					this.OnHXNetworkColdStreamChanging(value);
					this.SendPropertyChanging();
					this._HXNetworkColdStream = value;
					this.SendPropertyChanged("HXNetworkColdStream");
					this.OnHXNetworkColdStreamChanged();
				}
			}
		}
		
		[Column(Storage="_HxnetworkcoldstreamColor", UpdateCheck=UpdateCheck.Never)]
		public string HxnetworkcoldstreamColor
		{
			get
			{
				return this._HxnetworkcoldstreamColor;
			}
			set
			{
				if ((this._HxnetworkcoldstreamColor != value))
				{
					this.OnHxnetworkcoldstreamColorChanging(value);
					this.SendPropertyChanging();
					this._HxnetworkcoldstreamColor = value;
					this.SendPropertyChanged("HxnetworkcoldstreamColor");
					this.OnHxnetworkcoldstreamColorChanged();
				}
			}
		}
		
		[Column(Storage="_HxType", UpdateCheck=UpdateCheck.Never)]
		public string HxType
		{
			get
			{
				return this._HxType;
			}
			set
			{
				if ((this._HxType != value))
				{
					this.OnHxTypeChanging(value);
					this.SendPropertyChanging();
					this._HxType = value;
					this.SendPropertyChanged("HxType");
					this.OnHxTypeChanged();
				}
			}
		}
		
		[Column(Storage="_HxtypeColor", UpdateCheck=UpdateCheck.Never)]
		public string HxtypeColor
		{
			get
			{
				return this._HxtypeColor;
			}
			set
			{
				if ((this._HxtypeColor != value))
				{
					this.OnHxtypeColorChanging(value);
					this.SendPropertyChanging();
					this._HxtypeColor = value;
					this.SendPropertyChanged("HxtypeColor");
					this.OnHxtypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_InjectionWaterStream", UpdateCheck=UpdateCheck.Never)]
		public string InjectionWaterStream
		{
			get
			{
				return this._InjectionWaterStream;
			}
			set
			{
				if ((this._InjectionWaterStream != value))
				{
					this.OnInjectionWaterStreamChanging(value);
					this.SendPropertyChanging();
					this._InjectionWaterStream = value;
					this.SendPropertyChanged("InjectionWaterStream");
					this.OnInjectionWaterStreamChanged();
				}
			}
		}
		
		[Column(Storage="_InjectionwaterstreamColor", UpdateCheck=UpdateCheck.Never)]
		public string InjectionwaterstreamColor
		{
			get
			{
				return this._InjectionwaterstreamColor;
			}
			set
			{
				if ((this._InjectionwaterstreamColor != value))
				{
					this.OnInjectionwaterstreamColorChanging(value);
					this.SendPropertyChanging();
					this._InjectionwaterstreamColor = value;
					this.SendPropertyChanged("InjectionwaterstreamColor");
					this.OnInjectionwaterstreamColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsMatched", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsMatched
		{
			get
			{
				return this._IsMatched;
			}
			set
			{
				if ((this._IsMatched != value))
				{
					this.OnIsMatchedChanging(value);
					this.SendPropertyChanging();
					this._IsMatched = value;
					this.SendPropertyChanged("IsMatched");
					this.OnIsMatchedChanged();
				}
			}
		}
		
		[Column(Storage="_IsmatchedColor", UpdateCheck=UpdateCheck.Never)]
		public string IsmatchedColor
		{
			get
			{
				return this._IsmatchedColor;
			}
			set
			{
				if ((this._IsmatchedColor != value))
				{
					this.OnIsmatchedColorChanging(value);
					this.SendPropertyChanging();
					this._IsmatchedColor = value;
					this.SendPropertyChanged("IsmatchedColor");
					this.OnIsmatchedColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsSolved", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsSolved
		{
			get
			{
				return this._IsSolved;
			}
			set
			{
				if ((this._IsSolved != value))
				{
					this.OnIsSolvedChanging(value);
					this.SendPropertyChanging();
					this._IsSolved = value;
					this.SendPropertyChanged("IsSolved");
					this.OnIsSolvedChanged();
				}
			}
		}
		
		[Column(Storage="_IssolvedColor", UpdateCheck=UpdateCheck.Never)]
		public string IssolvedColor
		{
			get
			{
				return this._IssolvedColor;
			}
			set
			{
				if ((this._IssolvedColor != value))
				{
					this.OnIssolvedColorChanging(value);
					this.SendPropertyChanging();
					this._IssolvedColor = value;
					this.SendPropertyChanged("IssolvedColor");
					this.OnIssolvedColorChanged();
				}
			}
		}
		
		[Column(Storage="_LastFeed", UpdateCheck=UpdateCheck.Never)]
		public string LastFeed
		{
			get
			{
				return this._LastFeed;
			}
			set
			{
				if ((this._LastFeed != value))
				{
					this.OnLastFeedChanging(value);
					this.SendPropertyChanging();
					this._LastFeed = value;
					this.SendPropertyChanged("LastFeed");
					this.OnLastFeedChanged();
				}
			}
		}
		
		[Column(Storage="_LastProduct", UpdateCheck=UpdateCheck.Never)]
		public string LastProduct
		{
			get
			{
				return this._LastProduct;
			}
			set
			{
				if ((this._LastProduct != value))
				{
					this.OnLastProductChanging(value);
					this.SendPropertyChanging();
					this._LastProduct = value;
					this.SendPropertyChanged("LastProduct");
					this.OnLastProductChanged();
				}
			}
		}
		
		[Column(Storage="_Pressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this.OnPressureChanging(value);
					this.SendPropertyChanging();
					this._Pressure = value;
					this.SendPropertyChanged("Pressure");
					this.OnPressureChanged();
				}
			}
		}
		
		[Column(Storage="_PressureColor", UpdateCheck=UpdateCheck.Never)]
		public string PressureColor
		{
			get
			{
				return this._PressureColor;
			}
			set
			{
				if ((this._PressureColor != value))
				{
					this.OnPressureColorChanging(value);
					this.SendPropertyChanging();
					this._PressureColor = value;
					this.SendPropertyChanged("PressureColor");
					this.OnPressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ShellFeedStreams", UpdateCheck=UpdateCheck.Never)]
		public string ShellFeedStreams
		{
			get
			{
				return this._ShellFeedStreams;
			}
			set
			{
				if ((this._ShellFeedStreams != value))
				{
					this.OnShellFeedStreamsChanging(value);
					this.SendPropertyChanging();
					this._ShellFeedStreams = value;
					this.SendPropertyChanged("ShellFeedStreams");
					this.OnShellFeedStreamsChanged();
				}
			}
		}
		
		[Column(Storage="_ShellfeedstreamsColor", UpdateCheck=UpdateCheck.Never)]
		public string ShellfeedstreamsColor
		{
			get
			{
				return this._ShellfeedstreamsColor;
			}
			set
			{
				if ((this._ShellfeedstreamsColor != value))
				{
					this.OnShellfeedstreamsColorChanging(value);
					this.SendPropertyChanging();
					this._ShellfeedstreamsColor = value;
					this.SendPropertyChanged("ShellfeedstreamsColor");
					this.OnShellfeedstreamsColorChanged();
				}
			}
		}
		
		[Column(Storage="_SourceFile", UpdateCheck=UpdateCheck.Never)]
		public string SourceFile
		{
			get
			{
				return this._SourceFile;
			}
			set
			{
				if ((this._SourceFile != value))
				{
					this.OnSourceFileChanging(value);
					this.SendPropertyChanging();
					this._SourceFile = value;
					this.SendPropertyChanged("SourceFile");
					this.OnSourceFileChanged();
				}
			}
		}
		
		[Column(Storage="_SourcefileColor", UpdateCheck=UpdateCheck.Never)]
		public string SourcefileColor
		{
			get
			{
				return this._SourcefileColor;
			}
			set
			{
				if ((this._SourcefileColor != value))
				{
					this.OnSourcefileColorChanging(value);
					this.SendPropertyChanging();
					this._SourcefileColor = value;
					this.SendPropertyChanged("SourcefileColor");
					this.OnSourcefileColorChanged();
				}
			}
		}
		
		[Column(Storage="_StageNumber", UpdateCheck=UpdateCheck.Never)]
		public string StageNumber
		{
			get
			{
				return this._StageNumber;
			}
			set
			{
				if ((this._StageNumber != value))
				{
					this.OnStageNumberChanging(value);
					this.SendPropertyChanging();
					this._StageNumber = value;
					this.SendPropertyChanged("StageNumber");
					this.OnStageNumberChanged();
				}
			}
		}
		
		[Column(Storage="_StagenumberColor", UpdateCheck=UpdateCheck.Never)]
		public string StagenumberColor
		{
			get
			{
				return this._StagenumberColor;
			}
			set
			{
				if ((this._StagenumberColor != value))
				{
					this.OnStagenumberColorChanging(value);
					this.SendPropertyChanging();
					this._StagenumberColor = value;
					this.SendPropertyChanged("StagenumberColor");
					this.OnStagenumberColorChanged();
				}
			}
		}
		
		[Column(Storage="_Temperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_TemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string TemperatureColor
		{
			get
			{
				return this._TemperatureColor;
			}
			set
			{
				if ((this._TemperatureColor != value))
				{
					this.OnTemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._TemperatureColor = value;
					this.SendPropertyChanged("TemperatureColor");
					this.OnTemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_TowerType", UpdateCheck=UpdateCheck.Never)]
		public string TowerType
		{
			get
			{
				return this._TowerType;
			}
			set
			{
				if ((this._TowerType != value))
				{
					this.OnTowerTypeChanging(value);
					this.SendPropertyChanging();
					this._TowerType = value;
					this.SendPropertyChanged("TowerType");
					this.OnTowerTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TowertypeColor", UpdateCheck=UpdateCheck.Never)]
		public string TowertypeColor
		{
			get
			{
				return this._TowertypeColor;
			}
			set
			{
				if ((this._TowertypeColor != value))
				{
					this.OnTowertypeColorChanging(value);
					this.SendPropertyChanging();
					this._TowertypeColor = value;
					this.SendPropertyChanged("TowertypeColor");
					this.OnTowertypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_TubeFeedStreams", UpdateCheck=UpdateCheck.Never)]
		public string TubeFeedStreams
		{
			get
			{
				return this._TubeFeedStreams;
			}
			set
			{
				if ((this._TubeFeedStreams != value))
				{
					this.OnTubeFeedStreamsChanging(value);
					this.SendPropertyChanging();
					this._TubeFeedStreams = value;
					this.SendPropertyChanged("TubeFeedStreams");
					this.OnTubeFeedStreamsChanged();
				}
			}
		}
		
		[Column(Storage="_TubefeedstreamsColor", UpdateCheck=UpdateCheck.Never)]
		public string TubefeedstreamsColor
		{
			get
			{
				return this._TubefeedstreamsColor;
			}
			set
			{
				if ((this._TubefeedstreamsColor != value))
				{
					this.OnTubefeedstreamsColorChanging(value);
					this.SendPropertyChanging();
					this._TubefeedstreamsColor = value;
					this.SendPropertyChanged("TubefeedstreamsColor");
					this.OnTubefeedstreamsColorChanged();
				}
			}
		}
		
		[Column(Storage="_Version", UpdateCheck=UpdateCheck.Never)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbDrumBlockedOutlet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _DrumidColor;
		
		private string _DrumType;
		
		private string _DrumtypeColor;
		
		private System.Nullable<double> _FDReliefCondition;
		
		private string _FdreliefconditionColor;
		
		private bool _Feed;
		
		private string _FeedColor;
		
		private System.Nullable<double> _MaxPressure;
		
		private string _MaxpressureColor;
		
		private System.Nullable<double> _MaxStreamRate;
		
		private string _MaxstreamrateColor;
		
		private string _MixProductName;
		
		private System.Nullable<double> _NormalFlashDuty;
		
		private string _NormalflashdutyColor;
		
		private bool _ReboilerPinch;
		
		private string _ReboilerpinchColor;
		
		private System.Nullable<int> _ScenarioID;
		
		private string _ScenarioidColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDrumidColorChanging(string value);
    partial void OnDrumidColorChanged();
    partial void OnDrumTypeChanging(string value);
    partial void OnDrumTypeChanged();
    partial void OnDrumtypeColorChanging(string value);
    partial void OnDrumtypeColorChanged();
    partial void OnFDReliefConditionChanging(System.Nullable<double> value);
    partial void OnFDReliefConditionChanged();
    partial void OnFdreliefconditionColorChanging(string value);
    partial void OnFdreliefconditionColorChanged();
    partial void OnFeedChanging(bool value);
    partial void OnFeedChanged();
    partial void OnFeedColorChanging(string value);
    partial void OnFeedColorChanged();
    partial void OnMaxPressureChanging(System.Nullable<double> value);
    partial void OnMaxPressureChanged();
    partial void OnMaxpressureColorChanging(string value);
    partial void OnMaxpressureColorChanged();
    partial void OnMaxStreamRateChanging(System.Nullable<double> value);
    partial void OnMaxStreamRateChanged();
    partial void OnMaxstreamrateColorChanging(string value);
    partial void OnMaxstreamrateColorChanged();
    partial void OnMixProductNameChanging(string value);
    partial void OnMixProductNameChanged();
    partial void OnNormalFlashDutyChanging(System.Nullable<double> value);
    partial void OnNormalFlashDutyChanged();
    partial void OnNormalflashdutyColorChanging(string value);
    partial void OnNormalflashdutyColorChanged();
    partial void OnReboilerPinchChanging(bool value);
    partial void OnReboilerPinchChanged();
    partial void OnReboilerpinchColorChanging(string value);
    partial void OnReboilerpinchColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnScenarioidColorChanging(string value);
    partial void OnScenarioidColorChanged();
    #endregion
		
		public tbDrumBlockedOutlet()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DrumidColor", UpdateCheck=UpdateCheck.Never)]
		public string DrumidColor
		{
			get
			{
				return this._DrumidColor;
			}
			set
			{
				if ((this._DrumidColor != value))
				{
					this.OnDrumidColorChanging(value);
					this.SendPropertyChanging();
					this._DrumidColor = value;
					this.SendPropertyChanged("DrumidColor");
					this.OnDrumidColorChanged();
				}
			}
		}
		
		[Column(Storage="_DrumType", UpdateCheck=UpdateCheck.Never)]
		public string DrumType
		{
			get
			{
				return this._DrumType;
			}
			set
			{
				if ((this._DrumType != value))
				{
					this.OnDrumTypeChanging(value);
					this.SendPropertyChanging();
					this._DrumType = value;
					this.SendPropertyChanged("DrumType");
					this.OnDrumTypeChanged();
				}
			}
		}
		
		[Column(Storage="_DrumtypeColor", UpdateCheck=UpdateCheck.Never)]
		public string DrumtypeColor
		{
			get
			{
				return this._DrumtypeColor;
			}
			set
			{
				if ((this._DrumtypeColor != value))
				{
					this.OnDrumtypeColorChanging(value);
					this.SendPropertyChanging();
					this._DrumtypeColor = value;
					this.SendPropertyChanged("DrumtypeColor");
					this.OnDrumtypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_FDReliefCondition", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> FDReliefCondition
		{
			get
			{
				return this._FDReliefCondition;
			}
			set
			{
				if ((this._FDReliefCondition != value))
				{
					this.OnFDReliefConditionChanging(value);
					this.SendPropertyChanging();
					this._FDReliefCondition = value;
					this.SendPropertyChanged("FDReliefCondition");
					this.OnFDReliefConditionChanged();
				}
			}
		}
		
		[Column(Storage="_FdreliefconditionColor", UpdateCheck=UpdateCheck.Never)]
		public string FdreliefconditionColor
		{
			get
			{
				return this._FdreliefconditionColor;
			}
			set
			{
				if ((this._FdreliefconditionColor != value))
				{
					this.OnFdreliefconditionColorChanging(value);
					this.SendPropertyChanging();
					this._FdreliefconditionColor = value;
					this.SendPropertyChanged("FdreliefconditionColor");
					this.OnFdreliefconditionColorChanged();
				}
			}
		}
		
		[Column(Storage="_Feed", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool Feed
		{
			get
			{
				return this._Feed;
			}
			set
			{
				if ((this._Feed != value))
				{
					this.OnFeedChanging(value);
					this.SendPropertyChanging();
					this._Feed = value;
					this.SendPropertyChanged("Feed");
					this.OnFeedChanged();
				}
			}
		}
		
		[Column(Storage="_FeedColor", UpdateCheck=UpdateCheck.Never)]
		public string FeedColor
		{
			get
			{
				return this._FeedColor;
			}
			set
			{
				if ((this._FeedColor != value))
				{
					this.OnFeedColorChanging(value);
					this.SendPropertyChanging();
					this._FeedColor = value;
					this.SendPropertyChanged("FeedColor");
					this.OnFeedColorChanged();
				}
			}
		}
		
		[Column(Storage="_MaxPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> MaxPressure
		{
			get
			{
				return this._MaxPressure;
			}
			set
			{
				if ((this._MaxPressure != value))
				{
					this.OnMaxPressureChanging(value);
					this.SendPropertyChanging();
					this._MaxPressure = value;
					this.SendPropertyChanged("MaxPressure");
					this.OnMaxPressureChanged();
				}
			}
		}
		
		[Column(Storage="_MaxpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string MaxpressureColor
		{
			get
			{
				return this._MaxpressureColor;
			}
			set
			{
				if ((this._MaxpressureColor != value))
				{
					this.OnMaxpressureColorChanging(value);
					this.SendPropertyChanging();
					this._MaxpressureColor = value;
					this.SendPropertyChanged("MaxpressureColor");
					this.OnMaxpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_MaxStreamRate", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> MaxStreamRate
		{
			get
			{
				return this._MaxStreamRate;
			}
			set
			{
				if ((this._MaxStreamRate != value))
				{
					this.OnMaxStreamRateChanging(value);
					this.SendPropertyChanging();
					this._MaxStreamRate = value;
					this.SendPropertyChanged("MaxStreamRate");
					this.OnMaxStreamRateChanged();
				}
			}
		}
		
		[Column(Storage="_MaxstreamrateColor", UpdateCheck=UpdateCheck.Never)]
		public string MaxstreamrateColor
		{
			get
			{
				return this._MaxstreamrateColor;
			}
			set
			{
				if ((this._MaxstreamrateColor != value))
				{
					this.OnMaxstreamrateColorChanging(value);
					this.SendPropertyChanging();
					this._MaxstreamrateColor = value;
					this.SendPropertyChanged("MaxstreamrateColor");
					this.OnMaxstreamrateColorChanged();
				}
			}
		}
		
		[Column(Storage="_MixProductName", UpdateCheck=UpdateCheck.Never)]
		public string MixProductName
		{
			get
			{
				return this._MixProductName;
			}
			set
			{
				if ((this._MixProductName != value))
				{
					this.OnMixProductNameChanging(value);
					this.SendPropertyChanging();
					this._MixProductName = value;
					this.SendPropertyChanged("MixProductName");
					this.OnMixProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_NormalFlashDuty", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> NormalFlashDuty
		{
			get
			{
				return this._NormalFlashDuty;
			}
			set
			{
				if ((this._NormalFlashDuty != value))
				{
					this.OnNormalFlashDutyChanging(value);
					this.SendPropertyChanging();
					this._NormalFlashDuty = value;
					this.SendPropertyChanged("NormalFlashDuty");
					this.OnNormalFlashDutyChanged();
				}
			}
		}
		
		[Column(Storage="_NormalflashdutyColor", UpdateCheck=UpdateCheck.Never)]
		public string NormalflashdutyColor
		{
			get
			{
				return this._NormalflashdutyColor;
			}
			set
			{
				if ((this._NormalflashdutyColor != value))
				{
					this.OnNormalflashdutyColorChanging(value);
					this.SendPropertyChanging();
					this._NormalflashdutyColor = value;
					this.SendPropertyChanged("NormalflashdutyColor");
					this.OnNormalflashdutyColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReboilerPinch", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool ReboilerPinch
		{
			get
			{
				return this._ReboilerPinch;
			}
			set
			{
				if ((this._ReboilerPinch != value))
				{
					this.OnReboilerPinchChanging(value);
					this.SendPropertyChanging();
					this._ReboilerPinch = value;
					this.SendPropertyChanged("ReboilerPinch");
					this.OnReboilerPinchChanged();
				}
			}
		}
		
		[Column(Storage="_ReboilerpinchColor", UpdateCheck=UpdateCheck.Never)]
		public string ReboilerpinchColor
		{
			get
			{
				return this._ReboilerpinchColor;
			}
			set
			{
				if ((this._ReboilerpinchColor != value))
				{
					this.OnReboilerpinchColorChanging(value);
					this.SendPropertyChanging();
					this._ReboilerpinchColor = value;
					this.SendPropertyChanged("ReboilerpinchColor");
					this.OnReboilerpinchColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioidColor", UpdateCheck=UpdateCheck.Never)]
		public string ScenarioidColor
		{
			get
			{
				return this._ScenarioidColor;
			}
			set
			{
				if ((this._ScenarioidColor != value))
				{
					this.OnScenarioidColorChanging(value);
					this.SendPropertyChanging();
					this._ScenarioidColor = value;
					this.SendPropertyChanged("ScenarioidColor");
					this.OnScenarioidColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbDrumDepressuring : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _CalculatedDepressuringRate;
		
		private string _CalculateddepressuringrateColor;
		
		private System.Nullable<double> _CalculatedVesselPressure;
		
		private string _CalculatedvesselpressureColor;
		
		private System.Nullable<float> _DeltaP;
		
		private string _DeltapColor;
		
		private System.Nullable<float> _DeltaPTime;
		
		private string _DeltaptimeColor;
		
		private string _DepressuringRequirements;
		
		private string _DepressuringrequirementsColor;
		
		private bool _FireHeatInput;
		
		private string _FireheatinputColor;
		
		private string _HeatInputModel;
		
		private string _HeatinputmodelColor;
		
		private System.Nullable<double> _InitialDepressuringRate;
		
		private string _InitialdepressuringrateColor;
		
		private System.Nullable<double> _InitialPressure;
		
		private string _InitialpressureColor;
		
		private System.Nullable<int> _ScenarioID;
		
		private string _ScenarioidColor;
		
		private string _ShortCut;
		
		private string _ShortcutColor;
		
		private System.Nullable<double> _Timespecify;
		
		private string _TimespecifyColor;
		
		private System.Nullable<double> _TimeStep;
		
		private string _TimestepColor;
		
		private System.Nullable<double> _TotalVaporVolume;
		
		private string _TotalvaporvolumeColor;
		
		private System.Nullable<double> _TotalWettedArea;
		
		private string _TotalwettedareaColor;
		
		private System.Nullable<double> _ValveConstantforSonicFlow;
		
		private string _ValveconstantforsonicflowColor;
		
		private System.Nullable<double> _VaporDensity;
		
		private string _VapordensityColor;
		
		private System.Nullable<double> _Vesseldesignpressure;
		
		private string _VesseldesignpressureColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCalculatedDepressuringRateChanging(System.Nullable<double> value);
    partial void OnCalculatedDepressuringRateChanged();
    partial void OnCalculateddepressuringrateColorChanging(string value);
    partial void OnCalculateddepressuringrateColorChanged();
    partial void OnCalculatedVesselPressureChanging(System.Nullable<double> value);
    partial void OnCalculatedVesselPressureChanged();
    partial void OnCalculatedvesselpressureColorChanging(string value);
    partial void OnCalculatedvesselpressureColorChanged();
    partial void OnDeltaPChanging(System.Nullable<float> value);
    partial void OnDeltaPChanged();
    partial void OnDeltapColorChanging(string value);
    partial void OnDeltapColorChanged();
    partial void OnDeltaPTimeChanging(System.Nullable<float> value);
    partial void OnDeltaPTimeChanged();
    partial void OnDeltaptimeColorChanging(string value);
    partial void OnDeltaptimeColorChanged();
    partial void OnDepressuringRequirementsChanging(string value);
    partial void OnDepressuringRequirementsChanged();
    partial void OnDepressuringrequirementsColorChanging(string value);
    partial void OnDepressuringrequirementsColorChanged();
    partial void OnFireHeatInputChanging(bool value);
    partial void OnFireHeatInputChanged();
    partial void OnFireheatinputColorChanging(string value);
    partial void OnFireheatinputColorChanged();
    partial void OnHeatInputModelChanging(string value);
    partial void OnHeatInputModelChanged();
    partial void OnHeatinputmodelColorChanging(string value);
    partial void OnHeatinputmodelColorChanged();
    partial void OnInitialDepressuringRateChanging(System.Nullable<double> value);
    partial void OnInitialDepressuringRateChanged();
    partial void OnInitialdepressuringrateColorChanging(string value);
    partial void OnInitialdepressuringrateColorChanged();
    partial void OnInitialPressureChanging(System.Nullable<double> value);
    partial void OnInitialPressureChanged();
    partial void OnInitialpressureColorChanging(string value);
    partial void OnInitialpressureColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnScenarioidColorChanging(string value);
    partial void OnScenarioidColorChanged();
    partial void OnShortCutChanging(string value);
    partial void OnShortCutChanged();
    partial void OnShortcutColorChanging(string value);
    partial void OnShortcutColorChanged();
    partial void OnTimespecifyChanging(System.Nullable<double> value);
    partial void OnTimespecifyChanged();
    partial void OnTimespecifyColorChanging(string value);
    partial void OnTimespecifyColorChanged();
    partial void OnTimeStepChanging(System.Nullable<double> value);
    partial void OnTimeStepChanged();
    partial void OnTimestepColorChanging(string value);
    partial void OnTimestepColorChanged();
    partial void OnTotalVaporVolumeChanging(System.Nullable<double> value);
    partial void OnTotalVaporVolumeChanged();
    partial void OnTotalvaporvolumeColorChanging(string value);
    partial void OnTotalvaporvolumeColorChanged();
    partial void OnTotalWettedAreaChanging(System.Nullable<double> value);
    partial void OnTotalWettedAreaChanged();
    partial void OnTotalwettedareaColorChanging(string value);
    partial void OnTotalwettedareaColorChanged();
    partial void OnValveConstantforSonicFlowChanging(System.Nullable<double> value);
    partial void OnValveConstantforSonicFlowChanged();
    partial void OnValveconstantforsonicflowColorChanging(string value);
    partial void OnValveconstantforsonicflowColorChanged();
    partial void OnVaporDensityChanging(System.Nullable<double> value);
    partial void OnVaporDensityChanged();
    partial void OnVapordensityColorChanging(string value);
    partial void OnVapordensityColorChanged();
    partial void OnVesseldesignpressureChanging(System.Nullable<double> value);
    partial void OnVesseldesignpressureChanged();
    partial void OnVesseldesignpressureColorChanging(string value);
    partial void OnVesseldesignpressureColorChanged();
    #endregion
		
		public tbDrumDepressuring()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_CalculatedDepressuringRate", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> CalculatedDepressuringRate
		{
			get
			{
				return this._CalculatedDepressuringRate;
			}
			set
			{
				if ((this._CalculatedDepressuringRate != value))
				{
					this.OnCalculatedDepressuringRateChanging(value);
					this.SendPropertyChanging();
					this._CalculatedDepressuringRate = value;
					this.SendPropertyChanged("CalculatedDepressuringRate");
					this.OnCalculatedDepressuringRateChanged();
				}
			}
		}
		
		[Column(Storage="_CalculateddepressuringrateColor", UpdateCheck=UpdateCheck.Never)]
		public string CalculateddepressuringrateColor
		{
			get
			{
				return this._CalculateddepressuringrateColor;
			}
			set
			{
				if ((this._CalculateddepressuringrateColor != value))
				{
					this.OnCalculateddepressuringrateColorChanging(value);
					this.SendPropertyChanging();
					this._CalculateddepressuringrateColor = value;
					this.SendPropertyChanged("CalculateddepressuringrateColor");
					this.OnCalculateddepressuringrateColorChanged();
				}
			}
		}
		
		[Column(Storage="_CalculatedVesselPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> CalculatedVesselPressure
		{
			get
			{
				return this._CalculatedVesselPressure;
			}
			set
			{
				if ((this._CalculatedVesselPressure != value))
				{
					this.OnCalculatedVesselPressureChanging(value);
					this.SendPropertyChanging();
					this._CalculatedVesselPressure = value;
					this.SendPropertyChanged("CalculatedVesselPressure");
					this.OnCalculatedVesselPressureChanged();
				}
			}
		}
		
		[Column(Storage="_CalculatedvesselpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string CalculatedvesselpressureColor
		{
			get
			{
				return this._CalculatedvesselpressureColor;
			}
			set
			{
				if ((this._CalculatedvesselpressureColor != value))
				{
					this.OnCalculatedvesselpressureColorChanging(value);
					this.SendPropertyChanging();
					this._CalculatedvesselpressureColor = value;
					this.SendPropertyChanged("CalculatedvesselpressureColor");
					this.OnCalculatedvesselpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_DeltaP", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<float> DeltaP
		{
			get
			{
				return this._DeltaP;
			}
			set
			{
				if ((this._DeltaP != value))
				{
					this.OnDeltaPChanging(value);
					this.SendPropertyChanging();
					this._DeltaP = value;
					this.SendPropertyChanged("DeltaP");
					this.OnDeltaPChanged();
				}
			}
		}
		
		[Column(Storage="_DeltapColor", UpdateCheck=UpdateCheck.Never)]
		public string DeltapColor
		{
			get
			{
				return this._DeltapColor;
			}
			set
			{
				if ((this._DeltapColor != value))
				{
					this.OnDeltapColorChanging(value);
					this.SendPropertyChanging();
					this._DeltapColor = value;
					this.SendPropertyChanged("DeltapColor");
					this.OnDeltapColorChanged();
				}
			}
		}
		
		[Column(Storage="_DeltaPTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<float> DeltaPTime
		{
			get
			{
				return this._DeltaPTime;
			}
			set
			{
				if ((this._DeltaPTime != value))
				{
					this.OnDeltaPTimeChanging(value);
					this.SendPropertyChanging();
					this._DeltaPTime = value;
					this.SendPropertyChanged("DeltaPTime");
					this.OnDeltaPTimeChanged();
				}
			}
		}
		
		[Column(Storage="_DeltaptimeColor", UpdateCheck=UpdateCheck.Never)]
		public string DeltaptimeColor
		{
			get
			{
				return this._DeltaptimeColor;
			}
			set
			{
				if ((this._DeltaptimeColor != value))
				{
					this.OnDeltaptimeColorChanging(value);
					this.SendPropertyChanging();
					this._DeltaptimeColor = value;
					this.SendPropertyChanged("DeltaptimeColor");
					this.OnDeltaptimeColorChanged();
				}
			}
		}
		
		[Column(Storage="_DepressuringRequirements", UpdateCheck=UpdateCheck.Never)]
		public string DepressuringRequirements
		{
			get
			{
				return this._DepressuringRequirements;
			}
			set
			{
				if ((this._DepressuringRequirements != value))
				{
					this.OnDepressuringRequirementsChanging(value);
					this.SendPropertyChanging();
					this._DepressuringRequirements = value;
					this.SendPropertyChanged("DepressuringRequirements");
					this.OnDepressuringRequirementsChanged();
				}
			}
		}
		
		[Column(Storage="_DepressuringrequirementsColor", UpdateCheck=UpdateCheck.Never)]
		public string DepressuringrequirementsColor
		{
			get
			{
				return this._DepressuringrequirementsColor;
			}
			set
			{
				if ((this._DepressuringrequirementsColor != value))
				{
					this.OnDepressuringrequirementsColorChanging(value);
					this.SendPropertyChanging();
					this._DepressuringrequirementsColor = value;
					this.SendPropertyChanged("DepressuringrequirementsColor");
					this.OnDepressuringrequirementsColorChanged();
				}
			}
		}
		
		[Column(Storage="_FireHeatInput", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool FireHeatInput
		{
			get
			{
				return this._FireHeatInput;
			}
			set
			{
				if ((this._FireHeatInput != value))
				{
					this.OnFireHeatInputChanging(value);
					this.SendPropertyChanging();
					this._FireHeatInput = value;
					this.SendPropertyChanged("FireHeatInput");
					this.OnFireHeatInputChanged();
				}
			}
		}
		
		[Column(Storage="_FireheatinputColor", UpdateCheck=UpdateCheck.Never)]
		public string FireheatinputColor
		{
			get
			{
				return this._FireheatinputColor;
			}
			set
			{
				if ((this._FireheatinputColor != value))
				{
					this.OnFireheatinputColorChanging(value);
					this.SendPropertyChanging();
					this._FireheatinputColor = value;
					this.SendPropertyChanged("FireheatinputColor");
					this.OnFireheatinputColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeatInputModel", UpdateCheck=UpdateCheck.Never)]
		public string HeatInputModel
		{
			get
			{
				return this._HeatInputModel;
			}
			set
			{
				if ((this._HeatInputModel != value))
				{
					this.OnHeatInputModelChanging(value);
					this.SendPropertyChanging();
					this._HeatInputModel = value;
					this.SendPropertyChanged("HeatInputModel");
					this.OnHeatInputModelChanged();
				}
			}
		}
		
		[Column(Storage="_HeatinputmodelColor", UpdateCheck=UpdateCheck.Never)]
		public string HeatinputmodelColor
		{
			get
			{
				return this._HeatinputmodelColor;
			}
			set
			{
				if ((this._HeatinputmodelColor != value))
				{
					this.OnHeatinputmodelColorChanging(value);
					this.SendPropertyChanging();
					this._HeatinputmodelColor = value;
					this.SendPropertyChanged("HeatinputmodelColor");
					this.OnHeatinputmodelColorChanged();
				}
			}
		}
		
		[Column(Storage="_InitialDepressuringRate", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> InitialDepressuringRate
		{
			get
			{
				return this._InitialDepressuringRate;
			}
			set
			{
				if ((this._InitialDepressuringRate != value))
				{
					this.OnInitialDepressuringRateChanging(value);
					this.SendPropertyChanging();
					this._InitialDepressuringRate = value;
					this.SendPropertyChanged("InitialDepressuringRate");
					this.OnInitialDepressuringRateChanged();
				}
			}
		}
		
		[Column(Storage="_InitialdepressuringrateColor", UpdateCheck=UpdateCheck.Never)]
		public string InitialdepressuringrateColor
		{
			get
			{
				return this._InitialdepressuringrateColor;
			}
			set
			{
				if ((this._InitialdepressuringrateColor != value))
				{
					this.OnInitialdepressuringrateColorChanging(value);
					this.SendPropertyChanging();
					this._InitialdepressuringrateColor = value;
					this.SendPropertyChanged("InitialdepressuringrateColor");
					this.OnInitialdepressuringrateColorChanged();
				}
			}
		}
		
		[Column(Storage="_InitialPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> InitialPressure
		{
			get
			{
				return this._InitialPressure;
			}
			set
			{
				if ((this._InitialPressure != value))
				{
					this.OnInitialPressureChanging(value);
					this.SendPropertyChanging();
					this._InitialPressure = value;
					this.SendPropertyChanged("InitialPressure");
					this.OnInitialPressureChanged();
				}
			}
		}
		
		[Column(Storage="_InitialpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string InitialpressureColor
		{
			get
			{
				return this._InitialpressureColor;
			}
			set
			{
				if ((this._InitialpressureColor != value))
				{
					this.OnInitialpressureColorChanging(value);
					this.SendPropertyChanging();
					this._InitialpressureColor = value;
					this.SendPropertyChanged("InitialpressureColor");
					this.OnInitialpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioidColor", UpdateCheck=UpdateCheck.Never)]
		public string ScenarioidColor
		{
			get
			{
				return this._ScenarioidColor;
			}
			set
			{
				if ((this._ScenarioidColor != value))
				{
					this.OnScenarioidColorChanging(value);
					this.SendPropertyChanging();
					this._ScenarioidColor = value;
					this.SendPropertyChanged("ScenarioidColor");
					this.OnScenarioidColorChanged();
				}
			}
		}
		
		[Column(Storage="_ShortCut", UpdateCheck=UpdateCheck.Never)]
		public string ShortCut
		{
			get
			{
				return this._ShortCut;
			}
			set
			{
				if ((this._ShortCut != value))
				{
					this.OnShortCutChanging(value);
					this.SendPropertyChanging();
					this._ShortCut = value;
					this.SendPropertyChanged("ShortCut");
					this.OnShortCutChanged();
				}
			}
		}
		
		[Column(Storage="_ShortcutColor", UpdateCheck=UpdateCheck.Never)]
		public string ShortcutColor
		{
			get
			{
				return this._ShortcutColor;
			}
			set
			{
				if ((this._ShortcutColor != value))
				{
					this.OnShortcutColorChanging(value);
					this.SendPropertyChanging();
					this._ShortcutColor = value;
					this.SendPropertyChanged("ShortcutColor");
					this.OnShortcutColorChanged();
				}
			}
		}
		
		[Column(Storage="_Timespecify", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Timespecify
		{
			get
			{
				return this._Timespecify;
			}
			set
			{
				if ((this._Timespecify != value))
				{
					this.OnTimespecifyChanging(value);
					this.SendPropertyChanging();
					this._Timespecify = value;
					this.SendPropertyChanged("Timespecify");
					this.OnTimespecifyChanged();
				}
			}
		}
		
		[Column(Storage="_TimespecifyColor", UpdateCheck=UpdateCheck.Never)]
		public string TimespecifyColor
		{
			get
			{
				return this._TimespecifyColor;
			}
			set
			{
				if ((this._TimespecifyColor != value))
				{
					this.OnTimespecifyColorChanging(value);
					this.SendPropertyChanging();
					this._TimespecifyColor = value;
					this.SendPropertyChanged("TimespecifyColor");
					this.OnTimespecifyColorChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStep", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> TimeStep
		{
			get
			{
				return this._TimeStep;
			}
			set
			{
				if ((this._TimeStep != value))
				{
					this.OnTimeStepChanging(value);
					this.SendPropertyChanging();
					this._TimeStep = value;
					this.SendPropertyChanged("TimeStep");
					this.OnTimeStepChanged();
				}
			}
		}
		
		[Column(Storage="_TimestepColor", UpdateCheck=UpdateCheck.Never)]
		public string TimestepColor
		{
			get
			{
				return this._TimestepColor;
			}
			set
			{
				if ((this._TimestepColor != value))
				{
					this.OnTimestepColorChanging(value);
					this.SendPropertyChanging();
					this._TimestepColor = value;
					this.SendPropertyChanged("TimestepColor");
					this.OnTimestepColorChanged();
				}
			}
		}
		
		[Column(Storage="_TotalVaporVolume", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> TotalVaporVolume
		{
			get
			{
				return this._TotalVaporVolume;
			}
			set
			{
				if ((this._TotalVaporVolume != value))
				{
					this.OnTotalVaporVolumeChanging(value);
					this.SendPropertyChanging();
					this._TotalVaporVolume = value;
					this.SendPropertyChanged("TotalVaporVolume");
					this.OnTotalVaporVolumeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalvaporvolumeColor", UpdateCheck=UpdateCheck.Never)]
		public string TotalvaporvolumeColor
		{
			get
			{
				return this._TotalvaporvolumeColor;
			}
			set
			{
				if ((this._TotalvaporvolumeColor != value))
				{
					this.OnTotalvaporvolumeColorChanging(value);
					this.SendPropertyChanging();
					this._TotalvaporvolumeColor = value;
					this.SendPropertyChanged("TotalvaporvolumeColor");
					this.OnTotalvaporvolumeColorChanged();
				}
			}
		}
		
		[Column(Storage="_TotalWettedArea", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> TotalWettedArea
		{
			get
			{
				return this._TotalWettedArea;
			}
			set
			{
				if ((this._TotalWettedArea != value))
				{
					this.OnTotalWettedAreaChanging(value);
					this.SendPropertyChanging();
					this._TotalWettedArea = value;
					this.SendPropertyChanged("TotalWettedArea");
					this.OnTotalWettedAreaChanged();
				}
			}
		}
		
		[Column(Storage="_TotalwettedareaColor", UpdateCheck=UpdateCheck.Never)]
		public string TotalwettedareaColor
		{
			get
			{
				return this._TotalwettedareaColor;
			}
			set
			{
				if ((this._TotalwettedareaColor != value))
				{
					this.OnTotalwettedareaColorChanging(value);
					this.SendPropertyChanging();
					this._TotalwettedareaColor = value;
					this.SendPropertyChanged("TotalwettedareaColor");
					this.OnTotalwettedareaColorChanged();
				}
			}
		}
		
		[Column(Storage="_ValveConstantforSonicFlow", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ValveConstantforSonicFlow
		{
			get
			{
				return this._ValveConstantforSonicFlow;
			}
			set
			{
				if ((this._ValveConstantforSonicFlow != value))
				{
					this.OnValveConstantforSonicFlowChanging(value);
					this.SendPropertyChanging();
					this._ValveConstantforSonicFlow = value;
					this.SendPropertyChanged("ValveConstantforSonicFlow");
					this.OnValveConstantforSonicFlowChanged();
				}
			}
		}
		
		[Column(Storage="_ValveconstantforsonicflowColor", UpdateCheck=UpdateCheck.Never)]
		public string ValveconstantforsonicflowColor
		{
			get
			{
				return this._ValveconstantforsonicflowColor;
			}
			set
			{
				if ((this._ValveconstantforsonicflowColor != value))
				{
					this.OnValveconstantforsonicflowColorChanging(value);
					this.SendPropertyChanging();
					this._ValveconstantforsonicflowColor = value;
					this.SendPropertyChanged("ValveconstantforsonicflowColor");
					this.OnValveconstantforsonicflowColorChanged();
				}
			}
		}
		
		[Column(Storage="_VaporDensity", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> VaporDensity
		{
			get
			{
				return this._VaporDensity;
			}
			set
			{
				if ((this._VaporDensity != value))
				{
					this.OnVaporDensityChanging(value);
					this.SendPropertyChanging();
					this._VaporDensity = value;
					this.SendPropertyChanged("VaporDensity");
					this.OnVaporDensityChanged();
				}
			}
		}
		
		[Column(Storage="_VapordensityColor", UpdateCheck=UpdateCheck.Never)]
		public string VapordensityColor
		{
			get
			{
				return this._VapordensityColor;
			}
			set
			{
				if ((this._VapordensityColor != value))
				{
					this.OnVapordensityColorChanging(value);
					this.SendPropertyChanging();
					this._VapordensityColor = value;
					this.SendPropertyChanged("VapordensityColor");
					this.OnVapordensityColorChanged();
				}
			}
		}
		
		[Column(Storage="_Vesseldesignpressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Vesseldesignpressure
		{
			get
			{
				return this._Vesseldesignpressure;
			}
			set
			{
				if ((this._Vesseldesignpressure != value))
				{
					this.OnVesseldesignpressureChanging(value);
					this.SendPropertyChanging();
					this._Vesseldesignpressure = value;
					this.SendPropertyChanged("Vesseldesignpressure");
					this.OnVesseldesignpressureChanged();
				}
			}
		}
		
		[Column(Storage="_VesseldesignpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string VesseldesignpressureColor
		{
			get
			{
				return this._VesseldesignpressureColor;
			}
			set
			{
				if ((this._VesseldesignpressureColor != value))
				{
					this.OnVesseldesignpressureColorChanging(value);
					this.SendPropertyChanging();
					this._VesseldesignpressureColor = value;
					this.SendPropertyChanged("VesseldesignpressureColor");
					this.OnVesseldesignpressureColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbDrumFireAllGas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _DrumfirecalcidColor;
		
		private System.Nullable<double> _ExposedVesse;
		
		private string _ExposedvesseColor;
		
		private System.Nullable<double> _GasVaporMW;
		
		private string _GasvapormwColor;
		
		private System.Nullable<double> _NormalCpCv;
		
		private string _NormalcpcvColor;
		
		private System.Nullable<double> _NormalPressure;
		
		private string _NormalpressureColor;
		
		private System.Nullable<double> _NormaTemperature;
		
		private string _NormatemperatureColor;
		
		private System.Nullable<double> _PSVPressure;
		
		private string _PsvpressureColor;
		
		private System.Nullable<int> _ScenarioID;
		
		private System.Nullable<double> _Tw;
		
		private string _TwColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDrumfirecalcidColorChanging(string value);
    partial void OnDrumfirecalcidColorChanged();
    partial void OnExposedVesseChanging(System.Nullable<double> value);
    partial void OnExposedVesseChanged();
    partial void OnExposedvesseColorChanging(string value);
    partial void OnExposedvesseColorChanged();
    partial void OnGasVaporMWChanging(System.Nullable<double> value);
    partial void OnGasVaporMWChanged();
    partial void OnGasvapormwColorChanging(string value);
    partial void OnGasvapormwColorChanged();
    partial void OnNormalCpCvChanging(System.Nullable<double> value);
    partial void OnNormalCpCvChanged();
    partial void OnNormalcpcvColorChanging(string value);
    partial void OnNormalcpcvColorChanged();
    partial void OnNormalPressureChanging(System.Nullable<double> value);
    partial void OnNormalPressureChanged();
    partial void OnNormalpressureColorChanging(string value);
    partial void OnNormalpressureColorChanged();
    partial void OnNormaTemperatureChanging(System.Nullable<double> value);
    partial void OnNormaTemperatureChanged();
    partial void OnNormatemperatureColorChanging(string value);
    partial void OnNormatemperatureColorChanged();
    partial void OnPSVPressureChanging(System.Nullable<double> value);
    partial void OnPSVPressureChanged();
    partial void OnPsvpressureColorChanging(string value);
    partial void OnPsvpressureColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnTwChanging(System.Nullable<double> value);
    partial void OnTwChanged();
    partial void OnTwColorChanging(string value);
    partial void OnTwColorChanged();
    #endregion
		
		public tbDrumFireAllGas()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DrumfirecalcidColor", UpdateCheck=UpdateCheck.Never)]
		public string DrumfirecalcidColor
		{
			get
			{
				return this._DrumfirecalcidColor;
			}
			set
			{
				if ((this._DrumfirecalcidColor != value))
				{
					this.OnDrumfirecalcidColorChanging(value);
					this.SendPropertyChanging();
					this._DrumfirecalcidColor = value;
					this.SendPropertyChanged("DrumfirecalcidColor");
					this.OnDrumfirecalcidColorChanged();
				}
			}
		}
		
		[Column(Storage="_ExposedVesse", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ExposedVesse
		{
			get
			{
				return this._ExposedVesse;
			}
			set
			{
				if ((this._ExposedVesse != value))
				{
					this.OnExposedVesseChanging(value);
					this.SendPropertyChanging();
					this._ExposedVesse = value;
					this.SendPropertyChanged("ExposedVesse");
					this.OnExposedVesseChanged();
				}
			}
		}
		
		[Column(Storage="_ExposedvesseColor", UpdateCheck=UpdateCheck.Never)]
		public string ExposedvesseColor
		{
			get
			{
				return this._ExposedvesseColor;
			}
			set
			{
				if ((this._ExposedvesseColor != value))
				{
					this.OnExposedvesseColorChanging(value);
					this.SendPropertyChanging();
					this._ExposedvesseColor = value;
					this.SendPropertyChanged("ExposedvesseColor");
					this.OnExposedvesseColorChanged();
				}
			}
		}
		
		[Column(Storage="_GasVaporMW", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> GasVaporMW
		{
			get
			{
				return this._GasVaporMW;
			}
			set
			{
				if ((this._GasVaporMW != value))
				{
					this.OnGasVaporMWChanging(value);
					this.SendPropertyChanging();
					this._GasVaporMW = value;
					this.SendPropertyChanged("GasVaporMW");
					this.OnGasVaporMWChanged();
				}
			}
		}
		
		[Column(Storage="_GasvapormwColor", UpdateCheck=UpdateCheck.Never)]
		public string GasvapormwColor
		{
			get
			{
				return this._GasvapormwColor;
			}
			set
			{
				if ((this._GasvapormwColor != value))
				{
					this.OnGasvapormwColorChanging(value);
					this.SendPropertyChanging();
					this._GasvapormwColor = value;
					this.SendPropertyChanged("GasvapormwColor");
					this.OnGasvapormwColorChanged();
				}
			}
		}
		
		[Column(Storage="_NormalCpCv", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> NormalCpCv
		{
			get
			{
				return this._NormalCpCv;
			}
			set
			{
				if ((this._NormalCpCv != value))
				{
					this.OnNormalCpCvChanging(value);
					this.SendPropertyChanging();
					this._NormalCpCv = value;
					this.SendPropertyChanged("NormalCpCv");
					this.OnNormalCpCvChanged();
				}
			}
		}
		
		[Column(Storage="_NormalcpcvColor", UpdateCheck=UpdateCheck.Never)]
		public string NormalcpcvColor
		{
			get
			{
				return this._NormalcpcvColor;
			}
			set
			{
				if ((this._NormalcpcvColor != value))
				{
					this.OnNormalcpcvColorChanging(value);
					this.SendPropertyChanging();
					this._NormalcpcvColor = value;
					this.SendPropertyChanged("NormalcpcvColor");
					this.OnNormalcpcvColorChanged();
				}
			}
		}
		
		[Column(Storage="_NormalPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> NormalPressure
		{
			get
			{
				return this._NormalPressure;
			}
			set
			{
				if ((this._NormalPressure != value))
				{
					this.OnNormalPressureChanging(value);
					this.SendPropertyChanging();
					this._NormalPressure = value;
					this.SendPropertyChanged("NormalPressure");
					this.OnNormalPressureChanged();
				}
			}
		}
		
		[Column(Storage="_NormalpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string NormalpressureColor
		{
			get
			{
				return this._NormalpressureColor;
			}
			set
			{
				if ((this._NormalpressureColor != value))
				{
					this.OnNormalpressureColorChanging(value);
					this.SendPropertyChanging();
					this._NormalpressureColor = value;
					this.SendPropertyChanged("NormalpressureColor");
					this.OnNormalpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_NormaTemperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> NormaTemperature
		{
			get
			{
				return this._NormaTemperature;
			}
			set
			{
				if ((this._NormaTemperature != value))
				{
					this.OnNormaTemperatureChanging(value);
					this.SendPropertyChanging();
					this._NormaTemperature = value;
					this.SendPropertyChanged("NormaTemperature");
					this.OnNormaTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_NormatemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string NormatemperatureColor
		{
			get
			{
				return this._NormatemperatureColor;
			}
			set
			{
				if ((this._NormatemperatureColor != value))
				{
					this.OnNormatemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._NormatemperatureColor = value;
					this.SendPropertyChanged("NormatemperatureColor");
					this.OnNormatemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_PSVPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> PSVPressure
		{
			get
			{
				return this._PSVPressure;
			}
			set
			{
				if ((this._PSVPressure != value))
				{
					this.OnPSVPressureChanging(value);
					this.SendPropertyChanging();
					this._PSVPressure = value;
					this.SendPropertyChanged("PSVPressure");
					this.OnPSVPressureChanged();
				}
			}
		}
		
		[Column(Storage="_PsvpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string PsvpressureColor
		{
			get
			{
				return this._PsvpressureColor;
			}
			set
			{
				if ((this._PsvpressureColor != value))
				{
					this.OnPsvpressureColorChanging(value);
					this.SendPropertyChanging();
					this._PsvpressureColor = value;
					this.SendPropertyChanged("PsvpressureColor");
					this.OnPsvpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_Tw", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Tw
		{
			get
			{
				return this._Tw;
			}
			set
			{
				if ((this._Tw != value))
				{
					this.OnTwChanging(value);
					this.SendPropertyChanging();
					this._Tw = value;
					this.SendPropertyChanged("Tw");
					this.OnTwChanged();
				}
			}
		}
		
		[Column(Storage="_TwColor", UpdateCheck=UpdateCheck.Never)]
		public string TwColor
		{
			get
			{
				return this._TwColor;
			}
			set
			{
				if ((this._TwColor != value))
				{
					this.OnTwColorChanging(value);
					this.SendPropertyChanging();
					this._TwColor = value;
					this.SendPropertyChanged("TwColor");
					this.OnTwColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbDrumFireSize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _BootDiameter;
		
		private string _BootdiameterColor;
		
		private System.Nullable<double> _BootHeight;
		
		private string _BootheightColor;
		
		private System.Nullable<double> _Diameter;
		
		private string _DiameterColor;
		
		private string _DrumfirecalcidColor;
		
		private System.Nullable<double> _Elevation;
		
		private string _ElevationColor;
		
		private System.Nullable<double> _HeadNumber;
		
		private string _HeadnumberColor;
		
		private string _HeadType;
		
		private string _HeadtypeColor;
		
		private System.Nullable<double> _Length;
		
		private string _LengthColor;
		
		private System.Nullable<double> _NormalLiquidLevel;
		
		private string _NormalliquidlevelColor;
		
		private string _Orientation;
		
		private string _OrientationColor;
		
		private System.Nullable<int> _ScenarioID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBootDiameterChanging(System.Nullable<double> value);
    partial void OnBootDiameterChanged();
    partial void OnBootdiameterColorChanging(string value);
    partial void OnBootdiameterColorChanged();
    partial void OnBootHeightChanging(System.Nullable<double> value);
    partial void OnBootHeightChanged();
    partial void OnBootheightColorChanging(string value);
    partial void OnBootheightColorChanged();
    partial void OnDiameterChanging(System.Nullable<double> value);
    partial void OnDiameterChanged();
    partial void OnDiameterColorChanging(string value);
    partial void OnDiameterColorChanged();
    partial void OnDrumfirecalcidColorChanging(string value);
    partial void OnDrumfirecalcidColorChanged();
    partial void OnElevationChanging(System.Nullable<double> value);
    partial void OnElevationChanged();
    partial void OnElevationColorChanging(string value);
    partial void OnElevationColorChanged();
    partial void OnHeadNumberChanging(System.Nullable<double> value);
    partial void OnHeadNumberChanged();
    partial void OnHeadnumberColorChanging(string value);
    partial void OnHeadnumberColorChanged();
    partial void OnHeadTypeChanging(string value);
    partial void OnHeadTypeChanged();
    partial void OnHeadtypeColorChanging(string value);
    partial void OnHeadtypeColorChanged();
    partial void OnLengthChanging(System.Nullable<double> value);
    partial void OnLengthChanged();
    partial void OnLengthColorChanging(string value);
    partial void OnLengthColorChanged();
    partial void OnNormalLiquidLevelChanging(System.Nullable<double> value);
    partial void OnNormalLiquidLevelChanged();
    partial void OnNormalliquidlevelColorChanging(string value);
    partial void OnNormalliquidlevelColorChanged();
    partial void OnOrientationChanging(string value);
    partial void OnOrientationChanged();
    partial void OnOrientationColorChanging(string value);
    partial void OnOrientationColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    #endregion
		
		public tbDrumFireSize()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_BootDiameter", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BootDiameter
		{
			get
			{
				return this._BootDiameter;
			}
			set
			{
				if ((this._BootDiameter != value))
				{
					this.OnBootDiameterChanging(value);
					this.SendPropertyChanging();
					this._BootDiameter = value;
					this.SendPropertyChanged("BootDiameter");
					this.OnBootDiameterChanged();
				}
			}
		}
		
		[Column(Storage="_BootdiameterColor", UpdateCheck=UpdateCheck.Never)]
		public string BootdiameterColor
		{
			get
			{
				return this._BootdiameterColor;
			}
			set
			{
				if ((this._BootdiameterColor != value))
				{
					this.OnBootdiameterColorChanging(value);
					this.SendPropertyChanging();
					this._BootdiameterColor = value;
					this.SendPropertyChanged("BootdiameterColor");
					this.OnBootdiameterColorChanged();
				}
			}
		}
		
		[Column(Storage="_BootHeight", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BootHeight
		{
			get
			{
				return this._BootHeight;
			}
			set
			{
				if ((this._BootHeight != value))
				{
					this.OnBootHeightChanging(value);
					this.SendPropertyChanging();
					this._BootHeight = value;
					this.SendPropertyChanged("BootHeight");
					this.OnBootHeightChanged();
				}
			}
		}
		
		[Column(Storage="_BootheightColor", UpdateCheck=UpdateCheck.Never)]
		public string BootheightColor
		{
			get
			{
				return this._BootheightColor;
			}
			set
			{
				if ((this._BootheightColor != value))
				{
					this.OnBootheightColorChanging(value);
					this.SendPropertyChanging();
					this._BootheightColor = value;
					this.SendPropertyChanged("BootheightColor");
					this.OnBootheightColorChanged();
				}
			}
		}
		
		[Column(Storage="_Diameter", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Diameter
		{
			get
			{
				return this._Diameter;
			}
			set
			{
				if ((this._Diameter != value))
				{
					this.OnDiameterChanging(value);
					this.SendPropertyChanging();
					this._Diameter = value;
					this.SendPropertyChanged("Diameter");
					this.OnDiameterChanged();
				}
			}
		}
		
		[Column(Storage="_DiameterColor", UpdateCheck=UpdateCheck.Never)]
		public string DiameterColor
		{
			get
			{
				return this._DiameterColor;
			}
			set
			{
				if ((this._DiameterColor != value))
				{
					this.OnDiameterColorChanging(value);
					this.SendPropertyChanging();
					this._DiameterColor = value;
					this.SendPropertyChanged("DiameterColor");
					this.OnDiameterColorChanged();
				}
			}
		}
		
		[Column(Storage="_DrumfirecalcidColor", UpdateCheck=UpdateCheck.Never)]
		public string DrumfirecalcidColor
		{
			get
			{
				return this._DrumfirecalcidColor;
			}
			set
			{
				if ((this._DrumfirecalcidColor != value))
				{
					this.OnDrumfirecalcidColorChanging(value);
					this.SendPropertyChanging();
					this._DrumfirecalcidColor = value;
					this.SendPropertyChanged("DrumfirecalcidColor");
					this.OnDrumfirecalcidColorChanged();
				}
			}
		}
		
		[Column(Storage="_Elevation", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Elevation
		{
			get
			{
				return this._Elevation;
			}
			set
			{
				if ((this._Elevation != value))
				{
					this.OnElevationChanging(value);
					this.SendPropertyChanging();
					this._Elevation = value;
					this.SendPropertyChanged("Elevation");
					this.OnElevationChanged();
				}
			}
		}
		
		[Column(Storage="_ElevationColor", UpdateCheck=UpdateCheck.Never)]
		public string ElevationColor
		{
			get
			{
				return this._ElevationColor;
			}
			set
			{
				if ((this._ElevationColor != value))
				{
					this.OnElevationColorChanging(value);
					this.SendPropertyChanging();
					this._ElevationColor = value;
					this.SendPropertyChanged("ElevationColor");
					this.OnElevationColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeadNumber", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> HeadNumber
		{
			get
			{
				return this._HeadNumber;
			}
			set
			{
				if ((this._HeadNumber != value))
				{
					this.OnHeadNumberChanging(value);
					this.SendPropertyChanging();
					this._HeadNumber = value;
					this.SendPropertyChanged("HeadNumber");
					this.OnHeadNumberChanged();
				}
			}
		}
		
		[Column(Storage="_HeadnumberColor", UpdateCheck=UpdateCheck.Never)]
		public string HeadnumberColor
		{
			get
			{
				return this._HeadnumberColor;
			}
			set
			{
				if ((this._HeadnumberColor != value))
				{
					this.OnHeadnumberColorChanging(value);
					this.SendPropertyChanging();
					this._HeadnumberColor = value;
					this.SendPropertyChanged("HeadnumberColor");
					this.OnHeadnumberColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeadType", UpdateCheck=UpdateCheck.Never)]
		public string HeadType
		{
			get
			{
				return this._HeadType;
			}
			set
			{
				if ((this._HeadType != value))
				{
					this.OnHeadTypeChanging(value);
					this.SendPropertyChanging();
					this._HeadType = value;
					this.SendPropertyChanged("HeadType");
					this.OnHeadTypeChanged();
				}
			}
		}
		
		[Column(Storage="_HeadtypeColor", UpdateCheck=UpdateCheck.Never)]
		public string HeadtypeColor
		{
			get
			{
				return this._HeadtypeColor;
			}
			set
			{
				if ((this._HeadtypeColor != value))
				{
					this.OnHeadtypeColorChanging(value);
					this.SendPropertyChanging();
					this._HeadtypeColor = value;
					this.SendPropertyChanged("HeadtypeColor");
					this.OnHeadtypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_Length", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_LengthColor", UpdateCheck=UpdateCheck.Never)]
		public string LengthColor
		{
			get
			{
				return this._LengthColor;
			}
			set
			{
				if ((this._LengthColor != value))
				{
					this.OnLengthColorChanging(value);
					this.SendPropertyChanging();
					this._LengthColor = value;
					this.SendPropertyChanged("LengthColor");
					this.OnLengthColorChanged();
				}
			}
		}
		
		[Column(Storage="_NormalLiquidLevel", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> NormalLiquidLevel
		{
			get
			{
				return this._NormalLiquidLevel;
			}
			set
			{
				if ((this._NormalLiquidLevel != value))
				{
					this.OnNormalLiquidLevelChanging(value);
					this.SendPropertyChanging();
					this._NormalLiquidLevel = value;
					this.SendPropertyChanged("NormalLiquidLevel");
					this.OnNormalLiquidLevelChanged();
				}
			}
		}
		
		[Column(Storage="_NormalliquidlevelColor", UpdateCheck=UpdateCheck.Never)]
		public string NormalliquidlevelColor
		{
			get
			{
				return this._NormalliquidlevelColor;
			}
			set
			{
				if ((this._NormalliquidlevelColor != value))
				{
					this.OnNormalliquidlevelColorChanging(value);
					this.SendPropertyChanging();
					this._NormalliquidlevelColor = value;
					this.SendPropertyChanged("NormalliquidlevelColor");
					this.OnNormalliquidlevelColorChanged();
				}
			}
		}
		
		[Column(Storage="_Orientation", UpdateCheck=UpdateCheck.Never)]
		public string Orientation
		{
			get
			{
				return this._Orientation;
			}
			set
			{
				if ((this._Orientation != value))
				{
					this.OnOrientationChanging(value);
					this.SendPropertyChanging();
					this._Orientation = value;
					this.SendPropertyChanged("Orientation");
					this.OnOrientationChanged();
				}
			}
		}
		
		[Column(Storage="_OrientationColor", UpdateCheck=UpdateCheck.Never)]
		public string OrientationColor
		{
			get
			{
				return this._OrientationColor;
			}
			set
			{
				if ((this._OrientationColor != value))
				{
					this.OnOrientationColorChanging(value);
					this.SendPropertyChanging();
					this._OrientationColor = value;
					this.SendPropertyChanged("OrientationColor");
					this.OnOrientationColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbFeedBottomHX : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _BottomMassRate;
		
		private string _BottommassrateColor;
		
		private System.Nullable<double> _BottomReliefTin;
		
		private string _BottomrelieftinColor;
		
		private System.Nullable<double> _BottomTin;
		
		private string _BottomtinColor;
		
		private System.Nullable<double> _BottomTout;
		
		private string _BottomtoutColor;
		
		private System.Nullable<double> _Duty;
		
		private string _DutyColor;
		
		private System.Nullable<double> _Factor;
		
		private string _FactorColor;
		
		private System.Nullable<double> _FeedMassRate;
		
		private string _FeedmassrateColor;
		
		private System.Nullable<double> _FeedReliefSpEout;
		
		private string _FeedreliefspeoutColor;
		
		private System.Nullable<double> _FeedReliefTout;
		
		private string _FeedrelieftoutColor;
		
		private System.Nullable<double> _FeedSpEin;
		
		private string _FeedspeinColor;
		
		private System.Nullable<double> _FeedSpEout;
		
		private string _FeedspeoutColor;
		
		private System.Nullable<double> _FeedTin;
		
		private string _FeedtinColor;
		
		private System.Nullable<double> _FeedTout;
		
		private string _FeedtoutColor;
		
		private System.Nullable<double> _HeatSourceID;
		
		private string _HeatsourceidColor;
		
		private System.Nullable<int> _ScenarioID;
		
		private string _Streamname;
		
		private string _StreamnameColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBottomMassRateChanging(System.Nullable<double> value);
    partial void OnBottomMassRateChanged();
    partial void OnBottommassrateColorChanging(string value);
    partial void OnBottommassrateColorChanged();
    partial void OnBottomReliefTinChanging(System.Nullable<double> value);
    partial void OnBottomReliefTinChanged();
    partial void OnBottomrelieftinColorChanging(string value);
    partial void OnBottomrelieftinColorChanged();
    partial void OnBottomTinChanging(System.Nullable<double> value);
    partial void OnBottomTinChanged();
    partial void OnBottomtinColorChanging(string value);
    partial void OnBottomtinColorChanged();
    partial void OnBottomToutChanging(System.Nullable<double> value);
    partial void OnBottomToutChanged();
    partial void OnBottomtoutColorChanging(string value);
    partial void OnBottomtoutColorChanged();
    partial void OnDutyChanging(System.Nullable<double> value);
    partial void OnDutyChanged();
    partial void OnDutyColorChanging(string value);
    partial void OnDutyColorChanged();
    partial void OnFactorChanging(System.Nullable<double> value);
    partial void OnFactorChanged();
    partial void OnFactorColorChanging(string value);
    partial void OnFactorColorChanged();
    partial void OnFeedMassRateChanging(System.Nullable<double> value);
    partial void OnFeedMassRateChanged();
    partial void OnFeedmassrateColorChanging(string value);
    partial void OnFeedmassrateColorChanged();
    partial void OnFeedReliefSpEoutChanging(System.Nullable<double> value);
    partial void OnFeedReliefSpEoutChanged();
    partial void OnFeedreliefspeoutColorChanging(string value);
    partial void OnFeedreliefspeoutColorChanged();
    partial void OnFeedReliefToutChanging(System.Nullable<double> value);
    partial void OnFeedReliefToutChanged();
    partial void OnFeedrelieftoutColorChanging(string value);
    partial void OnFeedrelieftoutColorChanged();
    partial void OnFeedSpEinChanging(System.Nullable<double> value);
    partial void OnFeedSpEinChanged();
    partial void OnFeedspeinColorChanging(string value);
    partial void OnFeedspeinColorChanged();
    partial void OnFeedSpEoutChanging(System.Nullable<double> value);
    partial void OnFeedSpEoutChanged();
    partial void OnFeedspeoutColorChanging(string value);
    partial void OnFeedspeoutColorChanged();
    partial void OnFeedTinChanging(System.Nullable<double> value);
    partial void OnFeedTinChanged();
    partial void OnFeedtinColorChanging(string value);
    partial void OnFeedtinColorChanged();
    partial void OnFeedToutChanging(System.Nullable<double> value);
    partial void OnFeedToutChanged();
    partial void OnFeedtoutColorChanging(string value);
    partial void OnFeedtoutColorChanged();
    partial void OnHeatSourceIDChanging(System.Nullable<double> value);
    partial void OnHeatSourceIDChanged();
    partial void OnHeatsourceidColorChanging(string value);
    partial void OnHeatsourceidColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnStreamnameChanging(string value);
    partial void OnStreamnameChanged();
    partial void OnStreamnameColorChanging(string value);
    partial void OnStreamnameColorChanged();
    #endregion
		
		public tbFeedBottomHX()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_BottomMassRate", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BottomMassRate
		{
			get
			{
				return this._BottomMassRate;
			}
			set
			{
				if ((this._BottomMassRate != value))
				{
					this.OnBottomMassRateChanging(value);
					this.SendPropertyChanging();
					this._BottomMassRate = value;
					this.SendPropertyChanged("BottomMassRate");
					this.OnBottomMassRateChanged();
				}
			}
		}
		
		[Column(Storage="_BottommassrateColor", UpdateCheck=UpdateCheck.Never)]
		public string BottommassrateColor
		{
			get
			{
				return this._BottommassrateColor;
			}
			set
			{
				if ((this._BottommassrateColor != value))
				{
					this.OnBottommassrateColorChanging(value);
					this.SendPropertyChanging();
					this._BottommassrateColor = value;
					this.SendPropertyChanged("BottommassrateColor");
					this.OnBottommassrateColorChanged();
				}
			}
		}
		
		[Column(Storage="_BottomReliefTin", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BottomReliefTin
		{
			get
			{
				return this._BottomReliefTin;
			}
			set
			{
				if ((this._BottomReliefTin != value))
				{
					this.OnBottomReliefTinChanging(value);
					this.SendPropertyChanging();
					this._BottomReliefTin = value;
					this.SendPropertyChanged("BottomReliefTin");
					this.OnBottomReliefTinChanged();
				}
			}
		}
		
		[Column(Storage="_BottomrelieftinColor", UpdateCheck=UpdateCheck.Never)]
		public string BottomrelieftinColor
		{
			get
			{
				return this._BottomrelieftinColor;
			}
			set
			{
				if ((this._BottomrelieftinColor != value))
				{
					this.OnBottomrelieftinColorChanging(value);
					this.SendPropertyChanging();
					this._BottomrelieftinColor = value;
					this.SendPropertyChanged("BottomrelieftinColor");
					this.OnBottomrelieftinColorChanged();
				}
			}
		}
		
		[Column(Storage="_BottomTin", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BottomTin
		{
			get
			{
				return this._BottomTin;
			}
			set
			{
				if ((this._BottomTin != value))
				{
					this.OnBottomTinChanging(value);
					this.SendPropertyChanging();
					this._BottomTin = value;
					this.SendPropertyChanged("BottomTin");
					this.OnBottomTinChanged();
				}
			}
		}
		
		[Column(Storage="_BottomtinColor", UpdateCheck=UpdateCheck.Never)]
		public string BottomtinColor
		{
			get
			{
				return this._BottomtinColor;
			}
			set
			{
				if ((this._BottomtinColor != value))
				{
					this.OnBottomtinColorChanging(value);
					this.SendPropertyChanging();
					this._BottomtinColor = value;
					this.SendPropertyChanged("BottomtinColor");
					this.OnBottomtinColorChanged();
				}
			}
		}
		
		[Column(Storage="_BottomTout", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BottomTout
		{
			get
			{
				return this._BottomTout;
			}
			set
			{
				if ((this._BottomTout != value))
				{
					this.OnBottomToutChanging(value);
					this.SendPropertyChanging();
					this._BottomTout = value;
					this.SendPropertyChanged("BottomTout");
					this.OnBottomToutChanged();
				}
			}
		}
		
		[Column(Storage="_BottomtoutColor", UpdateCheck=UpdateCheck.Never)]
		public string BottomtoutColor
		{
			get
			{
				return this._BottomtoutColor;
			}
			set
			{
				if ((this._BottomtoutColor != value))
				{
					this.OnBottomtoutColorChanging(value);
					this.SendPropertyChanging();
					this._BottomtoutColor = value;
					this.SendPropertyChanged("BottomtoutColor");
					this.OnBottomtoutColorChanged();
				}
			}
		}
		
		[Column(Storage="_Duty", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Duty
		{
			get
			{
				return this._Duty;
			}
			set
			{
				if ((this._Duty != value))
				{
					this.OnDutyChanging(value);
					this.SendPropertyChanging();
					this._Duty = value;
					this.SendPropertyChanged("Duty");
					this.OnDutyChanged();
				}
			}
		}
		
		[Column(Storage="_DutyColor", UpdateCheck=UpdateCheck.Never)]
		public string DutyColor
		{
			get
			{
				return this._DutyColor;
			}
			set
			{
				if ((this._DutyColor != value))
				{
					this.OnDutyColorChanging(value);
					this.SendPropertyChanging();
					this._DutyColor = value;
					this.SendPropertyChanged("DutyColor");
					this.OnDutyColorChanged();
				}
			}
		}
		
		[Column(Storage="_Factor", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Factor
		{
			get
			{
				return this._Factor;
			}
			set
			{
				if ((this._Factor != value))
				{
					this.OnFactorChanging(value);
					this.SendPropertyChanging();
					this._Factor = value;
					this.SendPropertyChanged("Factor");
					this.OnFactorChanged();
				}
			}
		}
		
		[Column(Storage="_FactorColor", UpdateCheck=UpdateCheck.Never)]
		public string FactorColor
		{
			get
			{
				return this._FactorColor;
			}
			set
			{
				if ((this._FactorColor != value))
				{
					this.OnFactorColorChanging(value);
					this.SendPropertyChanging();
					this._FactorColor = value;
					this.SendPropertyChanged("FactorColor");
					this.OnFactorColorChanged();
				}
			}
		}
		
		[Column(Storage="_FeedMassRate", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> FeedMassRate
		{
			get
			{
				return this._FeedMassRate;
			}
			set
			{
				if ((this._FeedMassRate != value))
				{
					this.OnFeedMassRateChanging(value);
					this.SendPropertyChanging();
					this._FeedMassRate = value;
					this.SendPropertyChanged("FeedMassRate");
					this.OnFeedMassRateChanged();
				}
			}
		}
		
		[Column(Storage="_FeedmassrateColor", UpdateCheck=UpdateCheck.Never)]
		public string FeedmassrateColor
		{
			get
			{
				return this._FeedmassrateColor;
			}
			set
			{
				if ((this._FeedmassrateColor != value))
				{
					this.OnFeedmassrateColorChanging(value);
					this.SendPropertyChanging();
					this._FeedmassrateColor = value;
					this.SendPropertyChanged("FeedmassrateColor");
					this.OnFeedmassrateColorChanged();
				}
			}
		}
		
		[Column(Storage="_FeedReliefSpEout", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> FeedReliefSpEout
		{
			get
			{
				return this._FeedReliefSpEout;
			}
			set
			{
				if ((this._FeedReliefSpEout != value))
				{
					this.OnFeedReliefSpEoutChanging(value);
					this.SendPropertyChanging();
					this._FeedReliefSpEout = value;
					this.SendPropertyChanged("FeedReliefSpEout");
					this.OnFeedReliefSpEoutChanged();
				}
			}
		}
		
		[Column(Storage="_FeedreliefspeoutColor", UpdateCheck=UpdateCheck.Never)]
		public string FeedreliefspeoutColor
		{
			get
			{
				return this._FeedreliefspeoutColor;
			}
			set
			{
				if ((this._FeedreliefspeoutColor != value))
				{
					this.OnFeedreliefspeoutColorChanging(value);
					this.SendPropertyChanging();
					this._FeedreliefspeoutColor = value;
					this.SendPropertyChanged("FeedreliefspeoutColor");
					this.OnFeedreliefspeoutColorChanged();
				}
			}
		}
		
		[Column(Storage="_FeedReliefTout", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> FeedReliefTout
		{
			get
			{
				return this._FeedReliefTout;
			}
			set
			{
				if ((this._FeedReliefTout != value))
				{
					this.OnFeedReliefToutChanging(value);
					this.SendPropertyChanging();
					this._FeedReliefTout = value;
					this.SendPropertyChanged("FeedReliefTout");
					this.OnFeedReliefToutChanged();
				}
			}
		}
		
		[Column(Storage="_FeedrelieftoutColor", UpdateCheck=UpdateCheck.Never)]
		public string FeedrelieftoutColor
		{
			get
			{
				return this._FeedrelieftoutColor;
			}
			set
			{
				if ((this._FeedrelieftoutColor != value))
				{
					this.OnFeedrelieftoutColorChanging(value);
					this.SendPropertyChanging();
					this._FeedrelieftoutColor = value;
					this.SendPropertyChanged("FeedrelieftoutColor");
					this.OnFeedrelieftoutColorChanged();
				}
			}
		}
		
		[Column(Storage="_FeedSpEin", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> FeedSpEin
		{
			get
			{
				return this._FeedSpEin;
			}
			set
			{
				if ((this._FeedSpEin != value))
				{
					this.OnFeedSpEinChanging(value);
					this.SendPropertyChanging();
					this._FeedSpEin = value;
					this.SendPropertyChanged("FeedSpEin");
					this.OnFeedSpEinChanged();
				}
			}
		}
		
		[Column(Storage="_FeedspeinColor", UpdateCheck=UpdateCheck.Never)]
		public string FeedspeinColor
		{
			get
			{
				return this._FeedspeinColor;
			}
			set
			{
				if ((this._FeedspeinColor != value))
				{
					this.OnFeedspeinColorChanging(value);
					this.SendPropertyChanging();
					this._FeedspeinColor = value;
					this.SendPropertyChanged("FeedspeinColor");
					this.OnFeedspeinColorChanged();
				}
			}
		}
		
		[Column(Storage="_FeedSpEout", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> FeedSpEout
		{
			get
			{
				return this._FeedSpEout;
			}
			set
			{
				if ((this._FeedSpEout != value))
				{
					this.OnFeedSpEoutChanging(value);
					this.SendPropertyChanging();
					this._FeedSpEout = value;
					this.SendPropertyChanged("FeedSpEout");
					this.OnFeedSpEoutChanged();
				}
			}
		}
		
		[Column(Storage="_FeedspeoutColor", UpdateCheck=UpdateCheck.Never)]
		public string FeedspeoutColor
		{
			get
			{
				return this._FeedspeoutColor;
			}
			set
			{
				if ((this._FeedspeoutColor != value))
				{
					this.OnFeedspeoutColorChanging(value);
					this.SendPropertyChanging();
					this._FeedspeoutColor = value;
					this.SendPropertyChanged("FeedspeoutColor");
					this.OnFeedspeoutColorChanged();
				}
			}
		}
		
		[Column(Storage="_FeedTin", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> FeedTin
		{
			get
			{
				return this._FeedTin;
			}
			set
			{
				if ((this._FeedTin != value))
				{
					this.OnFeedTinChanging(value);
					this.SendPropertyChanging();
					this._FeedTin = value;
					this.SendPropertyChanged("FeedTin");
					this.OnFeedTinChanged();
				}
			}
		}
		
		[Column(Storage="_FeedtinColor", UpdateCheck=UpdateCheck.Never)]
		public string FeedtinColor
		{
			get
			{
				return this._FeedtinColor;
			}
			set
			{
				if ((this._FeedtinColor != value))
				{
					this.OnFeedtinColorChanging(value);
					this.SendPropertyChanging();
					this._FeedtinColor = value;
					this.SendPropertyChanged("FeedtinColor");
					this.OnFeedtinColorChanged();
				}
			}
		}
		
		[Column(Storage="_FeedTout", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> FeedTout
		{
			get
			{
				return this._FeedTout;
			}
			set
			{
				if ((this._FeedTout != value))
				{
					this.OnFeedToutChanging(value);
					this.SendPropertyChanging();
					this._FeedTout = value;
					this.SendPropertyChanged("FeedTout");
					this.OnFeedToutChanged();
				}
			}
		}
		
		[Column(Storage="_FeedtoutColor", UpdateCheck=UpdateCheck.Never)]
		public string FeedtoutColor
		{
			get
			{
				return this._FeedtoutColor;
			}
			set
			{
				if ((this._FeedtoutColor != value))
				{
					this.OnFeedtoutColorChanging(value);
					this.SendPropertyChanging();
					this._FeedtoutColor = value;
					this.SendPropertyChanged("FeedtoutColor");
					this.OnFeedtoutColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeatSourceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> HeatSourceID
		{
			get
			{
				return this._HeatSourceID;
			}
			set
			{
				if ((this._HeatSourceID != value))
				{
					this.OnHeatSourceIDChanging(value);
					this.SendPropertyChanging();
					this._HeatSourceID = value;
					this.SendPropertyChanged("HeatSourceID");
					this.OnHeatSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeatsourceidColor", UpdateCheck=UpdateCheck.Never)]
		public string HeatsourceidColor
		{
			get
			{
				return this._HeatsourceidColor;
			}
			set
			{
				if ((this._HeatsourceidColor != value))
				{
					this.OnHeatsourceidColorChanging(value);
					this.SendPropertyChanging();
					this._HeatsourceidColor = value;
					this.SendPropertyChanged("HeatsourceidColor");
					this.OnHeatsourceidColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_Streamname", UpdateCheck=UpdateCheck.Never)]
		public string Streamname
		{
			get
			{
				return this._Streamname;
			}
			set
			{
				if ((this._Streamname != value))
				{
					this.OnStreamnameChanging(value);
					this.SendPropertyChanging();
					this._Streamname = value;
					this.SendPropertyChanged("Streamname");
					this.OnStreamnameChanged();
				}
			}
		}
		
		[Column(Storage="_StreamnameColor", UpdateCheck=UpdateCheck.Never)]
		public string StreamnameColor
		{
			get
			{
				return this._StreamnameColor;
			}
			set
			{
				if ((this._StreamnameColor != value))
				{
					this.OnStreamnameColorChanging(value);
					this.SendPropertyChanging();
					this._StreamnameColor = value;
					this.SendPropertyChanged("StreamnameColor");
					this.OnStreamnameColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbFlashCalcResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _Latent;
		
		private string _LatentColor;
		
		private System.Nullable<double> _ReliefCpCv;
		
		private string _ReliefcpcvColor;
		
		private System.Nullable<double> _ReliefMW;
		
		private string _ReliefmwColor;
		
		private System.Nullable<double> _ReliefPressure;
		
		private string _ReliefpressureColor;
		
		private System.Nullable<double> _ReliefTemperature;
		
		private string _RelieftemperatureColor;
		
		private System.Nullable<double> _ReliefZ;
		
		private string _ReliefzColor;
		
		private System.Nullable<int> _ScenarioID;
		
		private string _ScenarioidColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLatentChanging(System.Nullable<double> value);
    partial void OnLatentChanged();
    partial void OnLatentColorChanging(string value);
    partial void OnLatentColorChanged();
    partial void OnReliefCpCvChanging(System.Nullable<double> value);
    partial void OnReliefCpCvChanged();
    partial void OnReliefcpcvColorChanging(string value);
    partial void OnReliefcpcvColorChanged();
    partial void OnReliefMWChanging(System.Nullable<double> value);
    partial void OnReliefMWChanged();
    partial void OnReliefmwColorChanging(string value);
    partial void OnReliefmwColorChanged();
    partial void OnReliefPressureChanging(System.Nullable<double> value);
    partial void OnReliefPressureChanged();
    partial void OnReliefpressureColorChanging(string value);
    partial void OnReliefpressureColorChanged();
    partial void OnReliefTemperatureChanging(System.Nullable<double> value);
    partial void OnReliefTemperatureChanged();
    partial void OnRelieftemperatureColorChanging(string value);
    partial void OnRelieftemperatureColorChanged();
    partial void OnReliefZChanging(System.Nullable<double> value);
    partial void OnReliefZChanged();
    partial void OnReliefzColorChanging(string value);
    partial void OnReliefzColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnScenarioidColorChanging(string value);
    partial void OnScenarioidColorChanged();
    #endregion
		
		public tbFlashCalcResult()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Latent", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Latent
		{
			get
			{
				return this._Latent;
			}
			set
			{
				if ((this._Latent != value))
				{
					this.OnLatentChanging(value);
					this.SendPropertyChanging();
					this._Latent = value;
					this.SendPropertyChanged("Latent");
					this.OnLatentChanged();
				}
			}
		}
		
		[Column(Storage="_LatentColor", UpdateCheck=UpdateCheck.Never)]
		public string LatentColor
		{
			get
			{
				return this._LatentColor;
			}
			set
			{
				if ((this._LatentColor != value))
				{
					this.OnLatentColorChanging(value);
					this.SendPropertyChanging();
					this._LatentColor = value;
					this.SendPropertyChanged("LatentColor");
					this.OnLatentColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefCpCv", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefCpCv
		{
			get
			{
				return this._ReliefCpCv;
			}
			set
			{
				if ((this._ReliefCpCv != value))
				{
					this.OnReliefCpCvChanging(value);
					this.SendPropertyChanging();
					this._ReliefCpCv = value;
					this.SendPropertyChanged("ReliefCpCv");
					this.OnReliefCpCvChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefcpcvColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefcpcvColor
		{
			get
			{
				return this._ReliefcpcvColor;
			}
			set
			{
				if ((this._ReliefcpcvColor != value))
				{
					this.OnReliefcpcvColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefcpcvColor = value;
					this.SendPropertyChanged("ReliefcpcvColor");
					this.OnReliefcpcvColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefMW", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefMW
		{
			get
			{
				return this._ReliefMW;
			}
			set
			{
				if ((this._ReliefMW != value))
				{
					this.OnReliefMWChanging(value);
					this.SendPropertyChanging();
					this._ReliefMW = value;
					this.SendPropertyChanged("ReliefMW");
					this.OnReliefMWChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefmwColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefmwColor
		{
			get
			{
				return this._ReliefmwColor;
			}
			set
			{
				if ((this._ReliefmwColor != value))
				{
					this.OnReliefmwColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefmwColor = value;
					this.SendPropertyChanged("ReliefmwColor");
					this.OnReliefmwColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefPressure
		{
			get
			{
				return this._ReliefPressure;
			}
			set
			{
				if ((this._ReliefPressure != value))
				{
					this.OnReliefPressureChanging(value);
					this.SendPropertyChanging();
					this._ReliefPressure = value;
					this.SendPropertyChanged("ReliefPressure");
					this.OnReliefPressureChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefpressureColor
		{
			get
			{
				return this._ReliefpressureColor;
			}
			set
			{
				if ((this._ReliefpressureColor != value))
				{
					this.OnReliefpressureColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefpressureColor = value;
					this.SendPropertyChanged("ReliefpressureColor");
					this.OnReliefpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefTemperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefTemperature
		{
			get
			{
				return this._ReliefTemperature;
			}
			set
			{
				if ((this._ReliefTemperature != value))
				{
					this.OnReliefTemperatureChanging(value);
					this.SendPropertyChanging();
					this._ReliefTemperature = value;
					this.SendPropertyChanged("ReliefTemperature");
					this.OnReliefTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_RelieftemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string RelieftemperatureColor
		{
			get
			{
				return this._RelieftemperatureColor;
			}
			set
			{
				if ((this._RelieftemperatureColor != value))
				{
					this.OnRelieftemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._RelieftemperatureColor = value;
					this.SendPropertyChanged("RelieftemperatureColor");
					this.OnRelieftemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefZ", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefZ
		{
			get
			{
				return this._ReliefZ;
			}
			set
			{
				if ((this._ReliefZ != value))
				{
					this.OnReliefZChanging(value);
					this.SendPropertyChanging();
					this._ReliefZ = value;
					this.SendPropertyChanged("ReliefZ");
					this.OnReliefZChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefzColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefzColor
		{
			get
			{
				return this._ReliefzColor;
			}
			set
			{
				if ((this._ReliefzColor != value))
				{
					this.OnReliefzColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefzColor = value;
					this.SendPropertyChanged("ReliefzColor");
					this.OnReliefzColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioidColor", UpdateCheck=UpdateCheck.Never)]
		public string ScenarioidColor
		{
			get
			{
				return this._ScenarioidColor;
			}
			set
			{
				if ((this._ScenarioidColor != value))
				{
					this.OnScenarioidColorChanging(value);
					this.SendPropertyChanging();
					this._ScenarioidColor = value;
					this.SendPropertyChanged("ScenarioidColor");
					this.OnScenarioidColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbFlashResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _DeviceID;
		
		private string _Liquidname;
		
		private string _LiquidnameColor;
		
		private string _Prodtype;
		
		private string _ProdtypeColor;
		
		private string _Przfile;
		
		private string _PrzfileColor;
		
		private string _streamName;
		
		private string _StreamnameColor;
		
		private System.Nullable<int> _Tray;
		
		private string _TrayColor;
		
		private string _Vaporname;
		
		private string _VapornameColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDeviceIDChanging(System.Nullable<int> value);
    partial void OnDeviceIDChanged();
    partial void OnLiquidnameChanging(string value);
    partial void OnLiquidnameChanged();
    partial void OnLiquidnameColorChanging(string value);
    partial void OnLiquidnameColorChanged();
    partial void OnProdtypeChanging(string value);
    partial void OnProdtypeChanged();
    partial void OnProdtypeColorChanging(string value);
    partial void OnProdtypeColorChanged();
    partial void OnPrzfileChanging(string value);
    partial void OnPrzfileChanged();
    partial void OnPrzfileColorChanging(string value);
    partial void OnPrzfileColorChanged();
    partial void OnstreamNameChanging(string value);
    partial void OnstreamNameChanged();
    partial void OnStreamnameColorChanging(string value);
    partial void OnStreamnameColorChanged();
    partial void OnTrayChanging(System.Nullable<int> value);
    partial void OnTrayChanged();
    partial void OnTrayColorChanging(string value);
    partial void OnTrayColorChanged();
    partial void OnVapornameChanging(string value);
    partial void OnVapornameChanged();
    partial void OnVapornameColorChanging(string value);
    partial void OnVapornameColorChanged();
    #endregion
		
		public tbFlashResult()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Liquidname", UpdateCheck=UpdateCheck.Never)]
		public string Liquidname
		{
			get
			{
				return this._Liquidname;
			}
			set
			{
				if ((this._Liquidname != value))
				{
					this.OnLiquidnameChanging(value);
					this.SendPropertyChanging();
					this._Liquidname = value;
					this.SendPropertyChanged("Liquidname");
					this.OnLiquidnameChanged();
				}
			}
		}
		
		[Column(Storage="_LiquidnameColor", UpdateCheck=UpdateCheck.Never)]
		public string LiquidnameColor
		{
			get
			{
				return this._LiquidnameColor;
			}
			set
			{
				if ((this._LiquidnameColor != value))
				{
					this.OnLiquidnameColorChanging(value);
					this.SendPropertyChanging();
					this._LiquidnameColor = value;
					this.SendPropertyChanged("LiquidnameColor");
					this.OnLiquidnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_Prodtype", UpdateCheck=UpdateCheck.Never)]
		public string Prodtype
		{
			get
			{
				return this._Prodtype;
			}
			set
			{
				if ((this._Prodtype != value))
				{
					this.OnProdtypeChanging(value);
					this.SendPropertyChanging();
					this._Prodtype = value;
					this.SendPropertyChanged("Prodtype");
					this.OnProdtypeChanged();
				}
			}
		}
		
		[Column(Storage="_ProdtypeColor", UpdateCheck=UpdateCheck.Never)]
		public string ProdtypeColor
		{
			get
			{
				return this._ProdtypeColor;
			}
			set
			{
				if ((this._ProdtypeColor != value))
				{
					this.OnProdtypeColorChanging(value);
					this.SendPropertyChanging();
					this._ProdtypeColor = value;
					this.SendPropertyChanged("ProdtypeColor");
					this.OnProdtypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_Przfile", UpdateCheck=UpdateCheck.Never)]
		public string Przfile
		{
			get
			{
				return this._Przfile;
			}
			set
			{
				if ((this._Przfile != value))
				{
					this.OnPrzfileChanging(value);
					this.SendPropertyChanging();
					this._Przfile = value;
					this.SendPropertyChanged("Przfile");
					this.OnPrzfileChanged();
				}
			}
		}
		
		[Column(Storage="_PrzfileColor", UpdateCheck=UpdateCheck.Never)]
		public string PrzfileColor
		{
			get
			{
				return this._PrzfileColor;
			}
			set
			{
				if ((this._PrzfileColor != value))
				{
					this.OnPrzfileColorChanging(value);
					this.SendPropertyChanging();
					this._PrzfileColor = value;
					this.SendPropertyChanged("PrzfileColor");
					this.OnPrzfileColorChanged();
				}
			}
		}
		
		[Column(Storage="_streamName", UpdateCheck=UpdateCheck.Never)]
		public string streamName
		{
			get
			{
				return this._streamName;
			}
			set
			{
				if ((this._streamName != value))
				{
					this.OnstreamNameChanging(value);
					this.SendPropertyChanging();
					this._streamName = value;
					this.SendPropertyChanged("streamName");
					this.OnstreamNameChanged();
				}
			}
		}
		
		[Column(Storage="_StreamnameColor", UpdateCheck=UpdateCheck.Never)]
		public string StreamnameColor
		{
			get
			{
				return this._StreamnameColor;
			}
			set
			{
				if ((this._StreamnameColor != value))
				{
					this.OnStreamnameColorChanging(value);
					this.SendPropertyChanging();
					this._StreamnameColor = value;
					this.SendPropertyChanged("StreamnameColor");
					this.OnStreamnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_Tray", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Tray
		{
			get
			{
				return this._Tray;
			}
			set
			{
				if ((this._Tray != value))
				{
					this.OnTrayChanging(value);
					this.SendPropertyChanging();
					this._Tray = value;
					this.SendPropertyChanged("Tray");
					this.OnTrayChanged();
				}
			}
		}
		
		[Column(Storage="_TrayColor", UpdateCheck=UpdateCheck.Never)]
		public string TrayColor
		{
			get
			{
				return this._TrayColor;
			}
			set
			{
				if ((this._TrayColor != value))
				{
					this.OnTrayColorChanging(value);
					this.SendPropertyChanging();
					this._TrayColor = value;
					this.SendPropertyChanged("TrayColor");
					this.OnTrayColorChanged();
				}
			}
		}
		
		[Column(Storage="_Vaporname", UpdateCheck=UpdateCheck.Never)]
		public string Vaporname
		{
			get
			{
				return this._Vaporname;
			}
			set
			{
				if ((this._Vaporname != value))
				{
					this.OnVapornameChanging(value);
					this.SendPropertyChanging();
					this._Vaporname = value;
					this.SendPropertyChanged("Vaporname");
					this.OnVapornameChanged();
				}
			}
		}
		
		[Column(Storage="_VapornameColor", UpdateCheck=UpdateCheck.Never)]
		public string VapornameColor
		{
			get
			{
				return this._VapornameColor;
			}
			set
			{
				if ((this._VapornameColor != value))
				{
					this.OnVapornameColorChanging(value);
					this.SendPropertyChanging();
					this._VapornameColor = value;
					this.SendPropertyChanged("VapornameColor");
					this.OnVapornameColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbGeneralFailureCommon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private bool _CalcHXNetworkColdStream;
		
		private string _CalchxnetworkcoldstreamColor;
		
		private bool _CalcInjectionWaterStream;
		
		private string _CalcinjectionwaterstreamColor;
		
		private System.Nullable<int> _GeneralType;
		
		private string _GeneraltypeColor;
		
		private System.Nullable<double> _HXNetworkColdStream;
		
		private string _HxnetworkcoldstreamColor;
		
		private System.Nullable<double> _InjectionWaterStream;
		
		private string _InjectionwaterstreamColor;
		
		private bool _IsSolved;
		
		private string _IssolvedColor;
		
		private bool _RecycleCompressorFailure;
		
		private string _RecyclecompressorfailureColor;
		
		private System.Nullable<int> _ScenarioID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCalcHXNetworkColdStreamChanging(bool value);
    partial void OnCalcHXNetworkColdStreamChanged();
    partial void OnCalchxnetworkcoldstreamColorChanging(string value);
    partial void OnCalchxnetworkcoldstreamColorChanged();
    partial void OnCalcInjectionWaterStreamChanging(bool value);
    partial void OnCalcInjectionWaterStreamChanged();
    partial void OnCalcinjectionwaterstreamColorChanging(string value);
    partial void OnCalcinjectionwaterstreamColorChanged();
    partial void OnGeneralTypeChanging(System.Nullable<int> value);
    partial void OnGeneralTypeChanged();
    partial void OnGeneraltypeColorChanging(string value);
    partial void OnGeneraltypeColorChanged();
    partial void OnHXNetworkColdStreamChanging(System.Nullable<double> value);
    partial void OnHXNetworkColdStreamChanged();
    partial void OnHxnetworkcoldstreamColorChanging(string value);
    partial void OnHxnetworkcoldstreamColorChanged();
    partial void OnInjectionWaterStreamChanging(System.Nullable<double> value);
    partial void OnInjectionWaterStreamChanged();
    partial void OnInjectionwaterstreamColorChanging(string value);
    partial void OnInjectionwaterstreamColorChanged();
    partial void OnIsSolvedChanging(bool value);
    partial void OnIsSolvedChanged();
    partial void OnIssolvedColorChanging(string value);
    partial void OnIssolvedColorChanged();
    partial void OnRecycleCompressorFailureChanging(bool value);
    partial void OnRecycleCompressorFailureChanged();
    partial void OnRecyclecompressorfailureColorChanging(string value);
    partial void OnRecyclecompressorfailureColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    #endregion
		
		public tbGeneralFailureCommon()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_CalcHXNetworkColdStream", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool CalcHXNetworkColdStream
		{
			get
			{
				return this._CalcHXNetworkColdStream;
			}
			set
			{
				if ((this._CalcHXNetworkColdStream != value))
				{
					this.OnCalcHXNetworkColdStreamChanging(value);
					this.SendPropertyChanging();
					this._CalcHXNetworkColdStream = value;
					this.SendPropertyChanged("CalcHXNetworkColdStream");
					this.OnCalcHXNetworkColdStreamChanged();
				}
			}
		}
		
		[Column(Storage="_CalchxnetworkcoldstreamColor", UpdateCheck=UpdateCheck.Never)]
		public string CalchxnetworkcoldstreamColor
		{
			get
			{
				return this._CalchxnetworkcoldstreamColor;
			}
			set
			{
				if ((this._CalchxnetworkcoldstreamColor != value))
				{
					this.OnCalchxnetworkcoldstreamColorChanging(value);
					this.SendPropertyChanging();
					this._CalchxnetworkcoldstreamColor = value;
					this.SendPropertyChanged("CalchxnetworkcoldstreamColor");
					this.OnCalchxnetworkcoldstreamColorChanged();
				}
			}
		}
		
		[Column(Storage="_CalcInjectionWaterStream", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool CalcInjectionWaterStream
		{
			get
			{
				return this._CalcInjectionWaterStream;
			}
			set
			{
				if ((this._CalcInjectionWaterStream != value))
				{
					this.OnCalcInjectionWaterStreamChanging(value);
					this.SendPropertyChanging();
					this._CalcInjectionWaterStream = value;
					this.SendPropertyChanged("CalcInjectionWaterStream");
					this.OnCalcInjectionWaterStreamChanged();
				}
			}
		}
		
		[Column(Storage="_CalcinjectionwaterstreamColor", UpdateCheck=UpdateCheck.Never)]
		public string CalcinjectionwaterstreamColor
		{
			get
			{
				return this._CalcinjectionwaterstreamColor;
			}
			set
			{
				if ((this._CalcinjectionwaterstreamColor != value))
				{
					this.OnCalcinjectionwaterstreamColorChanging(value);
					this.SendPropertyChanging();
					this._CalcinjectionwaterstreamColor = value;
					this.SendPropertyChanged("CalcinjectionwaterstreamColor");
					this.OnCalcinjectionwaterstreamColorChanged();
				}
			}
		}
		
		[Column(Storage="_GeneralType", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> GeneralType
		{
			get
			{
				return this._GeneralType;
			}
			set
			{
				if ((this._GeneralType != value))
				{
					this.OnGeneralTypeChanging(value);
					this.SendPropertyChanging();
					this._GeneralType = value;
					this.SendPropertyChanged("GeneralType");
					this.OnGeneralTypeChanged();
				}
			}
		}
		
		[Column(Storage="_GeneraltypeColor", UpdateCheck=UpdateCheck.Never)]
		public string GeneraltypeColor
		{
			get
			{
				return this._GeneraltypeColor;
			}
			set
			{
				if ((this._GeneraltypeColor != value))
				{
					this.OnGeneraltypeColorChanging(value);
					this.SendPropertyChanging();
					this._GeneraltypeColor = value;
					this.SendPropertyChanged("GeneraltypeColor");
					this.OnGeneraltypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_HXNetworkColdStream", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> HXNetworkColdStream
		{
			get
			{
				return this._HXNetworkColdStream;
			}
			set
			{
				if ((this._HXNetworkColdStream != value))
				{
					this.OnHXNetworkColdStreamChanging(value);
					this.SendPropertyChanging();
					this._HXNetworkColdStream = value;
					this.SendPropertyChanged("HXNetworkColdStream");
					this.OnHXNetworkColdStreamChanged();
				}
			}
		}
		
		[Column(Storage="_HxnetworkcoldstreamColor", UpdateCheck=UpdateCheck.Never)]
		public string HxnetworkcoldstreamColor
		{
			get
			{
				return this._HxnetworkcoldstreamColor;
			}
			set
			{
				if ((this._HxnetworkcoldstreamColor != value))
				{
					this.OnHxnetworkcoldstreamColorChanging(value);
					this.SendPropertyChanging();
					this._HxnetworkcoldstreamColor = value;
					this.SendPropertyChanged("HxnetworkcoldstreamColor");
					this.OnHxnetworkcoldstreamColorChanged();
				}
			}
		}
		
		[Column(Storage="_InjectionWaterStream", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> InjectionWaterStream
		{
			get
			{
				return this._InjectionWaterStream;
			}
			set
			{
				if ((this._InjectionWaterStream != value))
				{
					this.OnInjectionWaterStreamChanging(value);
					this.SendPropertyChanging();
					this._InjectionWaterStream = value;
					this.SendPropertyChanged("InjectionWaterStream");
					this.OnInjectionWaterStreamChanged();
				}
			}
		}
		
		[Column(Storage="_InjectionwaterstreamColor", UpdateCheck=UpdateCheck.Never)]
		public string InjectionwaterstreamColor
		{
			get
			{
				return this._InjectionwaterstreamColor;
			}
			set
			{
				if ((this._InjectionwaterstreamColor != value))
				{
					this.OnInjectionwaterstreamColorChanging(value);
					this.SendPropertyChanging();
					this._InjectionwaterstreamColor = value;
					this.SendPropertyChanged("InjectionwaterstreamColor");
					this.OnInjectionwaterstreamColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsSolved", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsSolved
		{
			get
			{
				return this._IsSolved;
			}
			set
			{
				if ((this._IsSolved != value))
				{
					this.OnIsSolvedChanging(value);
					this.SendPropertyChanging();
					this._IsSolved = value;
					this.SendPropertyChanged("IsSolved");
					this.OnIsSolvedChanged();
				}
			}
		}
		
		[Column(Storage="_IssolvedColor", UpdateCheck=UpdateCheck.Never)]
		public string IssolvedColor
		{
			get
			{
				return this._IssolvedColor;
			}
			set
			{
				if ((this._IssolvedColor != value))
				{
					this.OnIssolvedColorChanging(value);
					this.SendPropertyChanging();
					this._IssolvedColor = value;
					this.SendPropertyChanged("IssolvedColor");
					this.OnIssolvedColorChanged();
				}
			}
		}
		
		[Column(Storage="_RecycleCompressorFailure", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool RecycleCompressorFailure
		{
			get
			{
				return this._RecycleCompressorFailure;
			}
			set
			{
				if ((this._RecycleCompressorFailure != value))
				{
					this.OnRecycleCompressorFailureChanging(value);
					this.SendPropertyChanging();
					this._RecycleCompressorFailure = value;
					this.SendPropertyChanged("RecycleCompressorFailure");
					this.OnRecycleCompressorFailureChanged();
				}
			}
		}
		
		[Column(Storage="_RecyclecompressorfailureColor", UpdateCheck=UpdateCheck.Never)]
		public string RecyclecompressorfailureColor
		{
			get
			{
				return this._RecyclecompressorfailureColor;
			}
			set
			{
				if ((this._RecyclecompressorfailureColor != value))
				{
					this.OnRecyclecompressorfailureColorChanging(value);
					this.SendPropertyChanging();
					this._RecyclecompressorfailureColor = value;
					this.SendPropertyChanged("RecyclecompressorfailureColor");
					this.OnRecyclecompressorfailureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbGeneralFailureCommonDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _DutyFactor;
		
		private string _DutyfactorColor;
		
		private System.Nullable<int> _GeneralFailureCommonID;
		
		private string _GeneralfailurecommonidColor;
		
		private string _HXName;
		
		private string _HxnameColor;
		
		private System.Nullable<int> _ReactorType;
		
		private bool _Stop;
		
		private string _StopColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDutyFactorChanging(System.Nullable<double> value);
    partial void OnDutyFactorChanged();
    partial void OnDutyfactorColorChanging(string value);
    partial void OnDutyfactorColorChanged();
    partial void OnGeneralFailureCommonIDChanging(System.Nullable<int> value);
    partial void OnGeneralFailureCommonIDChanged();
    partial void OnGeneralfailurecommonidColorChanging(string value);
    partial void OnGeneralfailurecommonidColorChanged();
    partial void OnHXNameChanging(string value);
    partial void OnHXNameChanged();
    partial void OnHxnameColorChanging(string value);
    partial void OnHxnameColorChanged();
    partial void OnReactorTypeChanging(System.Nullable<int> value);
    partial void OnReactorTypeChanged();
    partial void OnStopChanging(bool value);
    partial void OnStopChanged();
    partial void OnStopColorChanging(string value);
    partial void OnStopColorChanged();
    #endregion
		
		public tbGeneralFailureCommonDetail()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DutyFactor", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> DutyFactor
		{
			get
			{
				return this._DutyFactor;
			}
			set
			{
				if ((this._DutyFactor != value))
				{
					this.OnDutyFactorChanging(value);
					this.SendPropertyChanging();
					this._DutyFactor = value;
					this.SendPropertyChanged("DutyFactor");
					this.OnDutyFactorChanged();
				}
			}
		}
		
		[Column(Storage="_DutyfactorColor", UpdateCheck=UpdateCheck.Never)]
		public string DutyfactorColor
		{
			get
			{
				return this._DutyfactorColor;
			}
			set
			{
				if ((this._DutyfactorColor != value))
				{
					this.OnDutyfactorColorChanging(value);
					this.SendPropertyChanging();
					this._DutyfactorColor = value;
					this.SendPropertyChanged("DutyfactorColor");
					this.OnDutyfactorColorChanged();
				}
			}
		}
		
		[Column(Storage="_GeneralFailureCommonID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> GeneralFailureCommonID
		{
			get
			{
				return this._GeneralFailureCommonID;
			}
			set
			{
				if ((this._GeneralFailureCommonID != value))
				{
					this.OnGeneralFailureCommonIDChanging(value);
					this.SendPropertyChanging();
					this._GeneralFailureCommonID = value;
					this.SendPropertyChanged("GeneralFailureCommonID");
					this.OnGeneralFailureCommonIDChanged();
				}
			}
		}
		
		[Column(Storage="_GeneralfailurecommonidColor", UpdateCheck=UpdateCheck.Never)]
		public string GeneralfailurecommonidColor
		{
			get
			{
				return this._GeneralfailurecommonidColor;
			}
			set
			{
				if ((this._GeneralfailurecommonidColor != value))
				{
					this.OnGeneralfailurecommonidColorChanging(value);
					this.SendPropertyChanging();
					this._GeneralfailurecommonidColor = value;
					this.SendPropertyChanged("GeneralfailurecommonidColor");
					this.OnGeneralfailurecommonidColorChanged();
				}
			}
		}
		
		[Column(Storage="_HXName", UpdateCheck=UpdateCheck.Never)]
		public string HXName
		{
			get
			{
				return this._HXName;
			}
			set
			{
				if ((this._HXName != value))
				{
					this.OnHXNameChanging(value);
					this.SendPropertyChanging();
					this._HXName = value;
					this.SendPropertyChanged("HXName");
					this.OnHXNameChanged();
				}
			}
		}
		
		[Column(Storage="_HxnameColor", UpdateCheck=UpdateCheck.Never)]
		public string HxnameColor
		{
			get
			{
				return this._HxnameColor;
			}
			set
			{
				if ((this._HxnameColor != value))
				{
					this.OnHxnameColorChanging(value);
					this.SendPropertyChanging();
					this._HxnameColor = value;
					this.SendPropertyChanged("HxnameColor");
					this.OnHxnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReactorType", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ReactorType
		{
			get
			{
				return this._ReactorType;
			}
			set
			{
				if ((this._ReactorType != value))
				{
					this.OnReactorTypeChanging(value);
					this.SendPropertyChanging();
					this._ReactorType = value;
					this.SendPropertyChanged("ReactorType");
					this.OnReactorTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Stop", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool Stop
		{
			get
			{
				return this._Stop;
			}
			set
			{
				if ((this._Stop != value))
				{
					this.OnStopChanging(value);
					this.SendPropertyChanging();
					this._Stop = value;
					this.SendPropertyChanged("Stop");
					this.OnStopChanged();
				}
			}
		}
		
		[Column(Storage="_StopColor", UpdateCheck=UpdateCheck.Never)]
		public string StopColor
		{
			get
			{
				return this._StopColor;
			}
			set
			{
				if ((this._StopColor != value))
				{
					this.OnStopColorChanging(value);
					this.SendPropertyChanging();
					this._StopColor = value;
					this.SendPropertyChanged("StopColor");
					this.OnStopColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbGlobalConditionsSettings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private bool _AirCondition;
		
		private bool _CoolingWaterCondition;
		
		private System.Nullable<double> _DrumSurgeTimeSettings;
		
		private System.Nullable<double> _LatentHeatSettings;
		
		private bool _SteamCondition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAirConditionChanging(bool value);
    partial void OnAirConditionChanged();
    partial void OnCoolingWaterConditionChanging(bool value);
    partial void OnCoolingWaterConditionChanged();
    partial void OnDrumSurgeTimeSettingsChanging(System.Nullable<double> value);
    partial void OnDrumSurgeTimeSettingsChanged();
    partial void OnLatentHeatSettingsChanging(System.Nullable<double> value);
    partial void OnLatentHeatSettingsChanged();
    partial void OnSteamConditionChanging(bool value);
    partial void OnSteamConditionChanged();
    #endregion
		
		public tbGlobalConditionsSettings()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_AirCondition", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool AirCondition
		{
			get
			{
				return this._AirCondition;
			}
			set
			{
				if ((this._AirCondition != value))
				{
					this.OnAirConditionChanging(value);
					this.SendPropertyChanging();
					this._AirCondition = value;
					this.SendPropertyChanged("AirCondition");
					this.OnAirConditionChanged();
				}
			}
		}
		
		[Column(Storage="_CoolingWaterCondition", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool CoolingWaterCondition
		{
			get
			{
				return this._CoolingWaterCondition;
			}
			set
			{
				if ((this._CoolingWaterCondition != value))
				{
					this.OnCoolingWaterConditionChanging(value);
					this.SendPropertyChanging();
					this._CoolingWaterCondition = value;
					this.SendPropertyChanged("CoolingWaterCondition");
					this.OnCoolingWaterConditionChanged();
				}
			}
		}
		
		[Column(Storage="_DrumSurgeTimeSettings", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> DrumSurgeTimeSettings
		{
			get
			{
				return this._DrumSurgeTimeSettings;
			}
			set
			{
				if ((this._DrumSurgeTimeSettings != value))
				{
					this.OnDrumSurgeTimeSettingsChanging(value);
					this.SendPropertyChanging();
					this._DrumSurgeTimeSettings = value;
					this.SendPropertyChanged("DrumSurgeTimeSettings");
					this.OnDrumSurgeTimeSettingsChanged();
				}
			}
		}
		
		[Column(Storage="_LatentHeatSettings", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> LatentHeatSettings
		{
			get
			{
				return this._LatentHeatSettings;
			}
			set
			{
				if ((this._LatentHeatSettings != value))
				{
					this.OnLatentHeatSettingsChanging(value);
					this.SendPropertyChanging();
					this._LatentHeatSettings = value;
					this.SendPropertyChanged("LatentHeatSettings");
					this.OnLatentHeatSettingsChanged();
				}
			}
		}
		
		[Column(Storage="_SteamCondition", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool SteamCondition
		{
			get
			{
				return this._SteamCondition;
			}
			set
			{
				if ((this._SteamCondition != value))
				{
					this.OnSteamConditionChanging(value);
					this.SendPropertyChanging();
					this._SteamCondition = value;
					this.SendPropertyChanged("SteamCondition");
					this.OnSteamConditionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbGlobalFlareSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _DesignBackPressure;
		
		private string _FlareName;
		
		private bool _isDel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDesignBackPressureChanging(System.Nullable<double> value);
    partial void OnDesignBackPressureChanged();
    partial void OnFlareNameChanging(string value);
    partial void OnFlareNameChanged();
    partial void OnisDelChanging(bool value);
    partial void OnisDelChanged();
    #endregion
		
		public tbGlobalFlareSystem()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DesignBackPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> DesignBackPressure
		{
			get
			{
				return this._DesignBackPressure;
			}
			set
			{
				if ((this._DesignBackPressure != value))
				{
					this.OnDesignBackPressureChanging(value);
					this.SendPropertyChanging();
					this._DesignBackPressure = value;
					this.SendPropertyChanged("DesignBackPressure");
					this.OnDesignBackPressureChanged();
				}
			}
		}
		
		[Column(Storage="_FlareName", UpdateCheck=UpdateCheck.Never)]
		public string FlareName
		{
			get
			{
				return this._FlareName;
			}
			set
			{
				if ((this._FlareName != value))
				{
					this.OnFlareNameChanging(value);
					this.SendPropertyChanging();
					this._FlareName = value;
					this.SendPropertyChanged("FlareName");
					this.OnFlareNameChanged();
				}
			}
		}
		
		[Column(Storage="_isDel", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool isDel
		{
			get
			{
				return this._isDel;
			}
			set
			{
				if ((this._isDel != value))
				{
					this.OnisDelChanging(value);
					this.SendPropertyChanging();
					this._isDel = value;
					this.SendPropertyChanged("isDel");
					this.OnisDelChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbHeatSource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _Duty;
		
		private string _DutyColor;
		
		private string _HeatSourceName;
		
		private string _HeatsourcenameColor;
		
		private string _HeatSourceType;
		
		private string _HeatsourcetypeColor;
		
		private System.Nullable<int> _SourceID;
		
		private string _SourceidColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDutyChanging(System.Nullable<double> value);
    partial void OnDutyChanged();
    partial void OnDutyColorChanging(string value);
    partial void OnDutyColorChanged();
    partial void OnHeatSourceNameChanging(string value);
    partial void OnHeatSourceNameChanged();
    partial void OnHeatsourcenameColorChanging(string value);
    partial void OnHeatsourcenameColorChanged();
    partial void OnHeatSourceTypeChanging(string value);
    partial void OnHeatSourceTypeChanged();
    partial void OnHeatsourcetypeColorChanging(string value);
    partial void OnHeatsourcetypeColorChanged();
    partial void OnSourceIDChanging(System.Nullable<int> value);
    partial void OnSourceIDChanged();
    partial void OnSourceidColorChanging(string value);
    partial void OnSourceidColorChanged();
    #endregion
		
		public tbHeatSource()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Duty", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Duty
		{
			get
			{
				return this._Duty;
			}
			set
			{
				if ((this._Duty != value))
				{
					this.OnDutyChanging(value);
					this.SendPropertyChanging();
					this._Duty = value;
					this.SendPropertyChanged("Duty");
					this.OnDutyChanged();
				}
			}
		}
		
		[Column(Storage="_DutyColor", UpdateCheck=UpdateCheck.Never)]
		public string DutyColor
		{
			get
			{
				return this._DutyColor;
			}
			set
			{
				if ((this._DutyColor != value))
				{
					this.OnDutyColorChanging(value);
					this.SendPropertyChanging();
					this._DutyColor = value;
					this.SendPropertyChanged("DutyColor");
					this.OnDutyColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeatSourceName", UpdateCheck=UpdateCheck.Never)]
		public string HeatSourceName
		{
			get
			{
				return this._HeatSourceName;
			}
			set
			{
				if ((this._HeatSourceName != value))
				{
					this.OnHeatSourceNameChanging(value);
					this.SendPropertyChanging();
					this._HeatSourceName = value;
					this.SendPropertyChanged("HeatSourceName");
					this.OnHeatSourceNameChanged();
				}
			}
		}
		
		[Column(Storage="_HeatsourcenameColor", UpdateCheck=UpdateCheck.Never)]
		public string HeatsourcenameColor
		{
			get
			{
				return this._HeatsourcenameColor;
			}
			set
			{
				if ((this._HeatsourcenameColor != value))
				{
					this.OnHeatsourcenameColorChanging(value);
					this.SendPropertyChanging();
					this._HeatsourcenameColor = value;
					this.SendPropertyChanged("HeatsourcenameColor");
					this.OnHeatsourcenameColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeatSourceType", UpdateCheck=UpdateCheck.Never)]
		public string HeatSourceType
		{
			get
			{
				return this._HeatSourceType;
			}
			set
			{
				if ((this._HeatSourceType != value))
				{
					this.OnHeatSourceTypeChanging(value);
					this.SendPropertyChanging();
					this._HeatSourceType = value;
					this.SendPropertyChanged("HeatSourceType");
					this.OnHeatSourceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_HeatsourcetypeColor", UpdateCheck=UpdateCheck.Never)]
		public string HeatsourcetypeColor
		{
			get
			{
				return this._HeatsourcetypeColor;
			}
			set
			{
				if ((this._HeatsourcetypeColor != value))
				{
					this.OnHeatsourcetypeColorChanging(value);
					this.SendPropertyChanging();
					this._HeatsourcetypeColor = value;
					this.SendPropertyChanged("HeatsourcetypeColor");
					this.OnHeatsourcetypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_SourceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					this.OnSourceIDChanging(value);
					this.SendPropertyChanging();
					this._SourceID = value;
					this.SendPropertyChanged("SourceID");
					this.OnSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_SourceidColor", UpdateCheck=UpdateCheck.Never)]
		public string SourceidColor
		{
			get
			{
				return this._SourceidColor;
			}
			set
			{
				if ((this._SourceidColor != value))
				{
					this.OnSourceidColorChanging(value);
					this.SendPropertyChanging();
					this._SourceidColor = value;
					this.SendPropertyChanged("SourceidColor");
					this.OnSourceidColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbHXBlockedIn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ColdStream;
		
		private string _ColdstreamColor;
		
		private System.Nullable<double> _LatentPoint;
		
		private string _LatentpointColor;
		
		private System.Nullable<double> _NormalColdInletTemperature;
		
		private string _NormalcoldinlettemperatureColor;
		
		private System.Nullable<double> _NormalColdOutletTemperature;
		
		private string _NormalcoldoutlettemperatureColor;
		
		private System.Nullable<double> _NormalDuty;
		
		private string _NormaldutyColor;
		
		private System.Nullable<double> _NormalHotTemperature;
		
		private string _NormalhottemperatureColor;
		
		private System.Nullable<int> _ScenarioID;
		
		private string _ScenarioidColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnColdStreamChanging(string value);
    partial void OnColdStreamChanged();
    partial void OnColdstreamColorChanging(string value);
    partial void OnColdstreamColorChanged();
    partial void OnLatentPointChanging(System.Nullable<double> value);
    partial void OnLatentPointChanged();
    partial void OnLatentpointColorChanging(string value);
    partial void OnLatentpointColorChanged();
    partial void OnNormalColdInletTemperatureChanging(System.Nullable<double> value);
    partial void OnNormalColdInletTemperatureChanged();
    partial void OnNormalcoldinlettemperatureColorChanging(string value);
    partial void OnNormalcoldinlettemperatureColorChanged();
    partial void OnNormalColdOutletTemperatureChanging(System.Nullable<double> value);
    partial void OnNormalColdOutletTemperatureChanged();
    partial void OnNormalcoldoutlettemperatureColorChanging(string value);
    partial void OnNormalcoldoutlettemperatureColorChanged();
    partial void OnNormalDutyChanging(System.Nullable<double> value);
    partial void OnNormalDutyChanged();
    partial void OnNormaldutyColorChanging(string value);
    partial void OnNormaldutyColorChanged();
    partial void OnNormalHotTemperatureChanging(System.Nullable<double> value);
    partial void OnNormalHotTemperatureChanged();
    partial void OnNormalhottemperatureColorChanging(string value);
    partial void OnNormalhottemperatureColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnScenarioidColorChanging(string value);
    partial void OnScenarioidColorChanged();
    #endregion
		
		public tbHXBlockedIn()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ColdStream", UpdateCheck=UpdateCheck.Never)]
		public string ColdStream
		{
			get
			{
				return this._ColdStream;
			}
			set
			{
				if ((this._ColdStream != value))
				{
					this.OnColdStreamChanging(value);
					this.SendPropertyChanging();
					this._ColdStream = value;
					this.SendPropertyChanged("ColdStream");
					this.OnColdStreamChanged();
				}
			}
		}
		
		[Column(Storage="_ColdstreamColor", UpdateCheck=UpdateCheck.Never)]
		public string ColdstreamColor
		{
			get
			{
				return this._ColdstreamColor;
			}
			set
			{
				if ((this._ColdstreamColor != value))
				{
					this.OnColdstreamColorChanging(value);
					this.SendPropertyChanging();
					this._ColdstreamColor = value;
					this.SendPropertyChanged("ColdstreamColor");
					this.OnColdstreamColorChanged();
				}
			}
		}
		
		[Column(Storage="_LatentPoint", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> LatentPoint
		{
			get
			{
				return this._LatentPoint;
			}
			set
			{
				if ((this._LatentPoint != value))
				{
					this.OnLatentPointChanging(value);
					this.SendPropertyChanging();
					this._LatentPoint = value;
					this.SendPropertyChanged("LatentPoint");
					this.OnLatentPointChanged();
				}
			}
		}
		
		[Column(Storage="_LatentpointColor", UpdateCheck=UpdateCheck.Never)]
		public string LatentpointColor
		{
			get
			{
				return this._LatentpointColor;
			}
			set
			{
				if ((this._LatentpointColor != value))
				{
					this.OnLatentpointColorChanging(value);
					this.SendPropertyChanging();
					this._LatentpointColor = value;
					this.SendPropertyChanged("LatentpointColor");
					this.OnLatentpointColorChanged();
				}
			}
		}
		
		[Column(Storage="_NormalColdInletTemperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> NormalColdInletTemperature
		{
			get
			{
				return this._NormalColdInletTemperature;
			}
			set
			{
				if ((this._NormalColdInletTemperature != value))
				{
					this.OnNormalColdInletTemperatureChanging(value);
					this.SendPropertyChanging();
					this._NormalColdInletTemperature = value;
					this.SendPropertyChanged("NormalColdInletTemperature");
					this.OnNormalColdInletTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_NormalcoldinlettemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string NormalcoldinlettemperatureColor
		{
			get
			{
				return this._NormalcoldinlettemperatureColor;
			}
			set
			{
				if ((this._NormalcoldinlettemperatureColor != value))
				{
					this.OnNormalcoldinlettemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._NormalcoldinlettemperatureColor = value;
					this.SendPropertyChanged("NormalcoldinlettemperatureColor");
					this.OnNormalcoldinlettemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_NormalColdOutletTemperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> NormalColdOutletTemperature
		{
			get
			{
				return this._NormalColdOutletTemperature;
			}
			set
			{
				if ((this._NormalColdOutletTemperature != value))
				{
					this.OnNormalColdOutletTemperatureChanging(value);
					this.SendPropertyChanging();
					this._NormalColdOutletTemperature = value;
					this.SendPropertyChanged("NormalColdOutletTemperature");
					this.OnNormalColdOutletTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_NormalcoldoutlettemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string NormalcoldoutlettemperatureColor
		{
			get
			{
				return this._NormalcoldoutlettemperatureColor;
			}
			set
			{
				if ((this._NormalcoldoutlettemperatureColor != value))
				{
					this.OnNormalcoldoutlettemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._NormalcoldoutlettemperatureColor = value;
					this.SendPropertyChanged("NormalcoldoutlettemperatureColor");
					this.OnNormalcoldoutlettemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_NormalDuty", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> NormalDuty
		{
			get
			{
				return this._NormalDuty;
			}
			set
			{
				if ((this._NormalDuty != value))
				{
					this.OnNormalDutyChanging(value);
					this.SendPropertyChanging();
					this._NormalDuty = value;
					this.SendPropertyChanged("NormalDuty");
					this.OnNormalDutyChanged();
				}
			}
		}
		
		[Column(Storage="_NormaldutyColor", UpdateCheck=UpdateCheck.Never)]
		public string NormaldutyColor
		{
			get
			{
				return this._NormaldutyColor;
			}
			set
			{
				if ((this._NormaldutyColor != value))
				{
					this.OnNormaldutyColorChanging(value);
					this.SendPropertyChanging();
					this._NormaldutyColor = value;
					this.SendPropertyChanged("NormaldutyColor");
					this.OnNormaldutyColorChanged();
				}
			}
		}
		
		[Column(Storage="_NormalHotTemperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> NormalHotTemperature
		{
			get
			{
				return this._NormalHotTemperature;
			}
			set
			{
				if ((this._NormalHotTemperature != value))
				{
					this.OnNormalHotTemperatureChanging(value);
					this.SendPropertyChanging();
					this._NormalHotTemperature = value;
					this.SendPropertyChanged("NormalHotTemperature");
					this.OnNormalHotTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_NormalhottemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string NormalhottemperatureColor
		{
			get
			{
				return this._NormalhottemperatureColor;
			}
			set
			{
				if ((this._NormalhottemperatureColor != value))
				{
					this.OnNormalhottemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._NormalhottemperatureColor = value;
					this.SendPropertyChanged("NormalhottemperatureColor");
					this.OnNormalhottemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioidColor", UpdateCheck=UpdateCheck.Never)]
		public string ScenarioidColor
		{
			get
			{
				return this._ScenarioidColor;
			}
			set
			{
				if ((this._ScenarioidColor != value))
				{
					this.OnScenarioidColorChanging(value);
					this.SendPropertyChanging();
					this._ScenarioidColor = value;
					this.SendPropertyChanged("ScenarioidColor");
					this.OnScenarioidColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbHXFireSize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _Elevation;
		
		private string _ElevationColor;
		
		private System.Nullable<int> _EqID;
		
		private string _ExposedToFire;
		
		private string _ExposedtofireColor;
		
		private System.Nullable<double> _Length;
		
		private string _LengthColor;
		
		private System.Nullable<double> _Od;
		
		private string _OdColor;
		
		private System.Nullable<double> _PipingContingency;
		
		private string _PipingcontingencyColor;
		
		private string _Type;
		
		private string _TypeColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnElevationChanging(System.Nullable<double> value);
    partial void OnElevationChanged();
    partial void OnElevationColorChanging(string value);
    partial void OnElevationColorChanged();
    partial void OnEqIDChanging(System.Nullable<int> value);
    partial void OnEqIDChanged();
    partial void OnExposedToFireChanging(string value);
    partial void OnExposedToFireChanged();
    partial void OnExposedtofireColorChanging(string value);
    partial void OnExposedtofireColorChanged();
    partial void OnLengthChanging(System.Nullable<double> value);
    partial void OnLengthChanged();
    partial void OnLengthColorChanging(string value);
    partial void OnLengthColorChanged();
    partial void OnOdChanging(System.Nullable<double> value);
    partial void OnOdChanged();
    partial void OnOdColorChanging(string value);
    partial void OnOdColorChanged();
    partial void OnPipingContingencyChanging(System.Nullable<double> value);
    partial void OnPipingContingencyChanged();
    partial void OnPipingcontingencyColorChanging(string value);
    partial void OnPipingcontingencyColorChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTypeColorChanging(string value);
    partial void OnTypeColorChanged();
    #endregion
		
		public tbHXFireSize()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Elevation", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Elevation
		{
			get
			{
				return this._Elevation;
			}
			set
			{
				if ((this._Elevation != value))
				{
					this.OnElevationChanging(value);
					this.SendPropertyChanging();
					this._Elevation = value;
					this.SendPropertyChanged("Elevation");
					this.OnElevationChanged();
				}
			}
		}
		
		[Column(Storage="_ElevationColor", UpdateCheck=UpdateCheck.Never)]
		public string ElevationColor
		{
			get
			{
				return this._ElevationColor;
			}
			set
			{
				if ((this._ElevationColor != value))
				{
					this.OnElevationColorChanging(value);
					this.SendPropertyChanging();
					this._ElevationColor = value;
					this.SendPropertyChanged("ElevationColor");
					this.OnElevationColorChanged();
				}
			}
		}
		
		[Column(Storage="_EqID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EqID
		{
			get
			{
				return this._EqID;
			}
			set
			{
				if ((this._EqID != value))
				{
					this.OnEqIDChanging(value);
					this.SendPropertyChanging();
					this._EqID = value;
					this.SendPropertyChanged("EqID");
					this.OnEqIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExposedToFire", UpdateCheck=UpdateCheck.Never)]
		public string ExposedToFire
		{
			get
			{
				return this._ExposedToFire;
			}
			set
			{
				if ((this._ExposedToFire != value))
				{
					this.OnExposedToFireChanging(value);
					this.SendPropertyChanging();
					this._ExposedToFire = value;
					this.SendPropertyChanged("ExposedToFire");
					this.OnExposedToFireChanged();
				}
			}
		}
		
		[Column(Storage="_ExposedtofireColor", UpdateCheck=UpdateCheck.Never)]
		public string ExposedtofireColor
		{
			get
			{
				return this._ExposedtofireColor;
			}
			set
			{
				if ((this._ExposedtofireColor != value))
				{
					this.OnExposedtofireColorChanging(value);
					this.SendPropertyChanging();
					this._ExposedtofireColor = value;
					this.SendPropertyChanged("ExposedtofireColor");
					this.OnExposedtofireColorChanged();
				}
			}
		}
		
		[Column(Storage="_Length", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_LengthColor", UpdateCheck=UpdateCheck.Never)]
		public string LengthColor
		{
			get
			{
				return this._LengthColor;
			}
			set
			{
				if ((this._LengthColor != value))
				{
					this.OnLengthColorChanging(value);
					this.SendPropertyChanging();
					this._LengthColor = value;
					this.SendPropertyChanged("LengthColor");
					this.OnLengthColorChanged();
				}
			}
		}
		
		[Column(Storage="_Od", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Od
		{
			get
			{
				return this._Od;
			}
			set
			{
				if ((this._Od != value))
				{
					this.OnOdChanging(value);
					this.SendPropertyChanging();
					this._Od = value;
					this.SendPropertyChanged("Od");
					this.OnOdChanged();
				}
			}
		}
		
		[Column(Storage="_OdColor", UpdateCheck=UpdateCheck.Never)]
		public string OdColor
		{
			get
			{
				return this._OdColor;
			}
			set
			{
				if ((this._OdColor != value))
				{
					this.OnOdColorChanging(value);
					this.SendPropertyChanging();
					this._OdColor = value;
					this.SendPropertyChanged("OdColor");
					this.OnOdColorChanged();
				}
			}
		}
		
		[Column(Storage="_PipingContingency", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> PipingContingency
		{
			get
			{
				return this._PipingContingency;
			}
			set
			{
				if ((this._PipingContingency != value))
				{
					this.OnPipingContingencyChanging(value);
					this.SendPropertyChanging();
					this._PipingContingency = value;
					this.SendPropertyChanged("PipingContingency");
					this.OnPipingContingencyChanged();
				}
			}
		}
		
		[Column(Storage="_PipingcontingencyColor", UpdateCheck=UpdateCheck.Never)]
		public string PipingcontingencyColor
		{
			get
			{
				return this._PipingcontingencyColor;
			}
			set
			{
				if ((this._PipingcontingencyColor != value))
				{
					this.OnPipingcontingencyColorChanging(value);
					this.SendPropertyChanging();
					this._PipingcontingencyColor = value;
					this.SendPropertyChanged("PipingcontingencyColor");
					this.OnPipingcontingencyColorChanged();
				}
			}
		}
		
		[Column(Storage="_Type", UpdateCheck=UpdateCheck.Never)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TypeColor", UpdateCheck=UpdateCheck.Never)]
		public string TypeColor
		{
			get
			{
				return this._TypeColor;
			}
			set
			{
				if ((this._TypeColor != value))
				{
					this.OnTypeColorChanging(value);
					this.SendPropertyChanging();
					this._TypeColor = value;
					this.SendPropertyChanged("TypeColor");
					this.OnTypeColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbInletValveOpen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _Cv;
		
		private string _CvColor;
		
		private string _DownStreamName;
		
		private string _DownstreamnameColor;
		
		private System.Nullable<double> _MaxOperatingPressure;
		
		private string _MaxoperatingpressureColor;
		
		private string _OperatingPhase;
		
		private string _OperatingphaseColor;
		
		private System.Nullable<double> _ReliefCpCv;
		
		private string _ReliefcpcvColor;
		
		private System.Nullable<double> _ReliefLoad;
		
		private string _ReliefloadColor;
		
		private System.Nullable<double> _ReliefMW;
		
		private string _ReliefmwColor;
		
		private System.Nullable<double> _ReliefPressure;
		
		private string _ReliefpressureColor;
		
		private System.Nullable<double> _ReliefTemperature;
		
		private string _RelieftemperatureColor;
		
		private System.Nullable<double> _ReliefZ;
		
		private string _ReliefzColor;
		
		private System.Nullable<int> _ScenarioID;
		
		private System.Nullable<double> _UpStreamCpCv;
		
		private string _UpStreamName;
		
		private string _UpstreamnameColor;
		
		private string _VesselName;
		
		private string _VesselnameColor;
		
		private System.Nullable<double> _Xt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCvChanging(System.Nullable<double> value);
    partial void OnCvChanged();
    partial void OnCvColorChanging(string value);
    partial void OnCvColorChanged();
    partial void OnDownStreamNameChanging(string value);
    partial void OnDownStreamNameChanged();
    partial void OnDownstreamnameColorChanging(string value);
    partial void OnDownstreamnameColorChanged();
    partial void OnMaxOperatingPressureChanging(System.Nullable<double> value);
    partial void OnMaxOperatingPressureChanged();
    partial void OnMaxoperatingpressureColorChanging(string value);
    partial void OnMaxoperatingpressureColorChanged();
    partial void OnOperatingPhaseChanging(string value);
    partial void OnOperatingPhaseChanged();
    partial void OnOperatingphaseColorChanging(string value);
    partial void OnOperatingphaseColorChanged();
    partial void OnReliefCpCvChanging(System.Nullable<double> value);
    partial void OnReliefCpCvChanged();
    partial void OnReliefcpcvColorChanging(string value);
    partial void OnReliefcpcvColorChanged();
    partial void OnReliefLoadChanging(System.Nullable<double> value);
    partial void OnReliefLoadChanged();
    partial void OnReliefloadColorChanging(string value);
    partial void OnReliefloadColorChanged();
    partial void OnReliefMWChanging(System.Nullable<double> value);
    partial void OnReliefMWChanged();
    partial void OnReliefmwColorChanging(string value);
    partial void OnReliefmwColorChanged();
    partial void OnReliefPressureChanging(System.Nullable<double> value);
    partial void OnReliefPressureChanged();
    partial void OnReliefpressureColorChanging(string value);
    partial void OnReliefpressureColorChanged();
    partial void OnReliefTemperatureChanging(System.Nullable<double> value);
    partial void OnReliefTemperatureChanged();
    partial void OnRelieftemperatureColorChanging(string value);
    partial void OnRelieftemperatureColorChanged();
    partial void OnReliefZChanging(System.Nullable<double> value);
    partial void OnReliefZChanged();
    partial void OnReliefzColorChanging(string value);
    partial void OnReliefzColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnUpStreamCpCvChanging(System.Nullable<double> value);
    partial void OnUpStreamCpCvChanged();
    partial void OnUpStreamNameChanging(string value);
    partial void OnUpStreamNameChanged();
    partial void OnUpstreamnameColorChanging(string value);
    partial void OnUpstreamnameColorChanged();
    partial void OnVesselNameChanging(string value);
    partial void OnVesselNameChanged();
    partial void OnVesselnameColorChanging(string value);
    partial void OnVesselnameColorChanged();
    partial void OnXtChanging(System.Nullable<double> value);
    partial void OnXtChanged();
    #endregion
		
		public tbInletValveOpen()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Cv", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Cv
		{
			get
			{
				return this._Cv;
			}
			set
			{
				if ((this._Cv != value))
				{
					this.OnCvChanging(value);
					this.SendPropertyChanging();
					this._Cv = value;
					this.SendPropertyChanged("Cv");
					this.OnCvChanged();
				}
			}
		}
		
		[Column(Storage="_CvColor", UpdateCheck=UpdateCheck.Never)]
		public string CvColor
		{
			get
			{
				return this._CvColor;
			}
			set
			{
				if ((this._CvColor != value))
				{
					this.OnCvColorChanging(value);
					this.SendPropertyChanging();
					this._CvColor = value;
					this.SendPropertyChanged("CvColor");
					this.OnCvColorChanged();
				}
			}
		}
		
		[Column(Storage="_DownStreamName", UpdateCheck=UpdateCheck.Never)]
		public string DownStreamName
		{
			get
			{
				return this._DownStreamName;
			}
			set
			{
				if ((this._DownStreamName != value))
				{
					this.OnDownStreamNameChanging(value);
					this.SendPropertyChanging();
					this._DownStreamName = value;
					this.SendPropertyChanged("DownStreamName");
					this.OnDownStreamNameChanged();
				}
			}
		}
		
		[Column(Storage="_DownstreamnameColor", UpdateCheck=UpdateCheck.Never)]
		public string DownstreamnameColor
		{
			get
			{
				return this._DownstreamnameColor;
			}
			set
			{
				if ((this._DownstreamnameColor != value))
				{
					this.OnDownstreamnameColorChanging(value);
					this.SendPropertyChanging();
					this._DownstreamnameColor = value;
					this.SendPropertyChanged("DownstreamnameColor");
					this.OnDownstreamnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_MaxOperatingPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> MaxOperatingPressure
		{
			get
			{
				return this._MaxOperatingPressure;
			}
			set
			{
				if ((this._MaxOperatingPressure != value))
				{
					this.OnMaxOperatingPressureChanging(value);
					this.SendPropertyChanging();
					this._MaxOperatingPressure = value;
					this.SendPropertyChanged("MaxOperatingPressure");
					this.OnMaxOperatingPressureChanged();
				}
			}
		}
		
		[Column(Storage="_MaxoperatingpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string MaxoperatingpressureColor
		{
			get
			{
				return this._MaxoperatingpressureColor;
			}
			set
			{
				if ((this._MaxoperatingpressureColor != value))
				{
					this.OnMaxoperatingpressureColorChanging(value);
					this.SendPropertyChanging();
					this._MaxoperatingpressureColor = value;
					this.SendPropertyChanged("MaxoperatingpressureColor");
					this.OnMaxoperatingpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_OperatingPhase", UpdateCheck=UpdateCheck.Never)]
		public string OperatingPhase
		{
			get
			{
				return this._OperatingPhase;
			}
			set
			{
				if ((this._OperatingPhase != value))
				{
					this.OnOperatingPhaseChanging(value);
					this.SendPropertyChanging();
					this._OperatingPhase = value;
					this.SendPropertyChanged("OperatingPhase");
					this.OnOperatingPhaseChanged();
				}
			}
		}
		
		[Column(Storage="_OperatingphaseColor", UpdateCheck=UpdateCheck.Never)]
		public string OperatingphaseColor
		{
			get
			{
				return this._OperatingphaseColor;
			}
			set
			{
				if ((this._OperatingphaseColor != value))
				{
					this.OnOperatingphaseColorChanging(value);
					this.SendPropertyChanging();
					this._OperatingphaseColor = value;
					this.SendPropertyChanged("OperatingphaseColor");
					this.OnOperatingphaseColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefCpCv", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefCpCv
		{
			get
			{
				return this._ReliefCpCv;
			}
			set
			{
				if ((this._ReliefCpCv != value))
				{
					this.OnReliefCpCvChanging(value);
					this.SendPropertyChanging();
					this._ReliefCpCv = value;
					this.SendPropertyChanged("ReliefCpCv");
					this.OnReliefCpCvChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefcpcvColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefcpcvColor
		{
			get
			{
				return this._ReliefcpcvColor;
			}
			set
			{
				if ((this._ReliefcpcvColor != value))
				{
					this.OnReliefcpcvColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefcpcvColor = value;
					this.SendPropertyChanged("ReliefcpcvColor");
					this.OnReliefcpcvColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefLoad", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefLoad
		{
			get
			{
				return this._ReliefLoad;
			}
			set
			{
				if ((this._ReliefLoad != value))
				{
					this.OnReliefLoadChanging(value);
					this.SendPropertyChanging();
					this._ReliefLoad = value;
					this.SendPropertyChanged("ReliefLoad");
					this.OnReliefLoadChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefloadColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefloadColor
		{
			get
			{
				return this._ReliefloadColor;
			}
			set
			{
				if ((this._ReliefloadColor != value))
				{
					this.OnReliefloadColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefloadColor = value;
					this.SendPropertyChanged("ReliefloadColor");
					this.OnReliefloadColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefMW", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefMW
		{
			get
			{
				return this._ReliefMW;
			}
			set
			{
				if ((this._ReliefMW != value))
				{
					this.OnReliefMWChanging(value);
					this.SendPropertyChanging();
					this._ReliefMW = value;
					this.SendPropertyChanged("ReliefMW");
					this.OnReliefMWChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefmwColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefmwColor
		{
			get
			{
				return this._ReliefmwColor;
			}
			set
			{
				if ((this._ReliefmwColor != value))
				{
					this.OnReliefmwColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefmwColor = value;
					this.SendPropertyChanged("ReliefmwColor");
					this.OnReliefmwColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefPressure
		{
			get
			{
				return this._ReliefPressure;
			}
			set
			{
				if ((this._ReliefPressure != value))
				{
					this.OnReliefPressureChanging(value);
					this.SendPropertyChanging();
					this._ReliefPressure = value;
					this.SendPropertyChanged("ReliefPressure");
					this.OnReliefPressureChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefpressureColor
		{
			get
			{
				return this._ReliefpressureColor;
			}
			set
			{
				if ((this._ReliefpressureColor != value))
				{
					this.OnReliefpressureColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefpressureColor = value;
					this.SendPropertyChanged("ReliefpressureColor");
					this.OnReliefpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefTemperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefTemperature
		{
			get
			{
				return this._ReliefTemperature;
			}
			set
			{
				if ((this._ReliefTemperature != value))
				{
					this.OnReliefTemperatureChanging(value);
					this.SendPropertyChanging();
					this._ReliefTemperature = value;
					this.SendPropertyChanged("ReliefTemperature");
					this.OnReliefTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_RelieftemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string RelieftemperatureColor
		{
			get
			{
				return this._RelieftemperatureColor;
			}
			set
			{
				if ((this._RelieftemperatureColor != value))
				{
					this.OnRelieftemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._RelieftemperatureColor = value;
					this.SendPropertyChanged("RelieftemperatureColor");
					this.OnRelieftemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefZ", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefZ
		{
			get
			{
				return this._ReliefZ;
			}
			set
			{
				if ((this._ReliefZ != value))
				{
					this.OnReliefZChanging(value);
					this.SendPropertyChanging();
					this._ReliefZ = value;
					this.SendPropertyChanged("ReliefZ");
					this.OnReliefZChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefzColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefzColor
		{
			get
			{
				return this._ReliefzColor;
			}
			set
			{
				if ((this._ReliefzColor != value))
				{
					this.OnReliefzColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefzColor = value;
					this.SendPropertyChanged("ReliefzColor");
					this.OnReliefzColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_UpStreamCpCv", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> UpStreamCpCv
		{
			get
			{
				return this._UpStreamCpCv;
			}
			set
			{
				if ((this._UpStreamCpCv != value))
				{
					this.OnUpStreamCpCvChanging(value);
					this.SendPropertyChanging();
					this._UpStreamCpCv = value;
					this.SendPropertyChanged("UpStreamCpCv");
					this.OnUpStreamCpCvChanged();
				}
			}
		}
		
		[Column(Storage="_UpStreamName", UpdateCheck=UpdateCheck.Never)]
		public string UpStreamName
		{
			get
			{
				return this._UpStreamName;
			}
			set
			{
				if ((this._UpStreamName != value))
				{
					this.OnUpStreamNameChanging(value);
					this.SendPropertyChanging();
					this._UpStreamName = value;
					this.SendPropertyChanged("UpStreamName");
					this.OnUpStreamNameChanged();
				}
			}
		}
		
		[Column(Storage="_UpstreamnameColor", UpdateCheck=UpdateCheck.Never)]
		public string UpstreamnameColor
		{
			get
			{
				return this._UpstreamnameColor;
			}
			set
			{
				if ((this._UpstreamnameColor != value))
				{
					this.OnUpstreamnameColorChanging(value);
					this.SendPropertyChanging();
					this._UpstreamnameColor = value;
					this.SendPropertyChanged("UpstreamnameColor");
					this.OnUpstreamnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_VesselName", UpdateCheck=UpdateCheck.Never)]
		public string VesselName
		{
			get
			{
				return this._VesselName;
			}
			set
			{
				if ((this._VesselName != value))
				{
					this.OnVesselNameChanging(value);
					this.SendPropertyChanging();
					this._VesselName = value;
					this.SendPropertyChanged("VesselName");
					this.OnVesselNameChanged();
				}
			}
		}
		
		[Column(Storage="_VesselnameColor", UpdateCheck=UpdateCheck.Never)]
		public string VesselnameColor
		{
			get
			{
				return this._VesselnameColor;
			}
			set
			{
				if ((this._VesselnameColor != value))
				{
					this.OnVesselnameColorChanging(value);
					this.SendPropertyChanging();
					this._VesselnameColor = value;
					this.SendPropertyChanged("VesselnameColor");
					this.OnVesselnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_Xt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Xt
		{
			get
			{
				return this._Xt;
			}
			set
			{
				if ((this._Xt != value))
				{
					this.OnXtChanging(value);
					this.SendPropertyChanging();
					this._Xt = value;
					this.SendPropertyChanged("Xt");
					this.OnXtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbLatent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _DeviceID;
		
		private System.Nullable<double> _LatentEnthalpy;
		
		private string _LatententhalpyColor;
		
		private System.Nullable<double> _ReliefCpCv;
		
		private System.Nullable<double> _ReliefOHWeightFlow;
		
		private string _ReliefohweightflowColor;
		
		private System.Nullable<double> _ReliefPressure;
		
		private string _ReliefpressureColor;
		
		private System.Nullable<double> _ReliefTemperature;
		
		private string _RelieftemperatureColor;
		
		private System.Nullable<double> _ReliefZ;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDeviceIDChanging(System.Nullable<int> value);
    partial void OnDeviceIDChanged();
    partial void OnLatentEnthalpyChanging(System.Nullable<double> value);
    partial void OnLatentEnthalpyChanged();
    partial void OnLatententhalpyColorChanging(string value);
    partial void OnLatententhalpyColorChanged();
    partial void OnReliefCpCvChanging(System.Nullable<double> value);
    partial void OnReliefCpCvChanged();
    partial void OnReliefOHWeightFlowChanging(System.Nullable<double> value);
    partial void OnReliefOHWeightFlowChanged();
    partial void OnReliefohweightflowColorChanging(string value);
    partial void OnReliefohweightflowColorChanged();
    partial void OnReliefPressureChanging(System.Nullable<double> value);
    partial void OnReliefPressureChanged();
    partial void OnReliefpressureColorChanging(string value);
    partial void OnReliefpressureColorChanged();
    partial void OnReliefTemperatureChanging(System.Nullable<double> value);
    partial void OnReliefTemperatureChanged();
    partial void OnRelieftemperatureColorChanging(string value);
    partial void OnRelieftemperatureColorChanged();
    partial void OnReliefZChanging(System.Nullable<double> value);
    partial void OnReliefZChanged();
    #endregion
		
		public tbLatent()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[Column(Storage="_LatentEnthalpy", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> LatentEnthalpy
		{
			get
			{
				return this._LatentEnthalpy;
			}
			set
			{
				if ((this._LatentEnthalpy != value))
				{
					this.OnLatentEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._LatentEnthalpy = value;
					this.SendPropertyChanged("LatentEnthalpy");
					this.OnLatentEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_LatententhalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string LatententhalpyColor
		{
			get
			{
				return this._LatententhalpyColor;
			}
			set
			{
				if ((this._LatententhalpyColor != value))
				{
					this.OnLatententhalpyColorChanging(value);
					this.SendPropertyChanging();
					this._LatententhalpyColor = value;
					this.SendPropertyChanged("LatententhalpyColor");
					this.OnLatententhalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefCpCv", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefCpCv
		{
			get
			{
				return this._ReliefCpCv;
			}
			set
			{
				if ((this._ReliefCpCv != value))
				{
					this.OnReliefCpCvChanging(value);
					this.SendPropertyChanging();
					this._ReliefCpCv = value;
					this.SendPropertyChanged("ReliefCpCv");
					this.OnReliefCpCvChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefOHWeightFlow", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefOHWeightFlow
		{
			get
			{
				return this._ReliefOHWeightFlow;
			}
			set
			{
				if ((this._ReliefOHWeightFlow != value))
				{
					this.OnReliefOHWeightFlowChanging(value);
					this.SendPropertyChanging();
					this._ReliefOHWeightFlow = value;
					this.SendPropertyChanged("ReliefOHWeightFlow");
					this.OnReliefOHWeightFlowChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefohweightflowColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefohweightflowColor
		{
			get
			{
				return this._ReliefohweightflowColor;
			}
			set
			{
				if ((this._ReliefohweightflowColor != value))
				{
					this.OnReliefohweightflowColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefohweightflowColor = value;
					this.SendPropertyChanged("ReliefohweightflowColor");
					this.OnReliefohweightflowColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefPressure
		{
			get
			{
				return this._ReliefPressure;
			}
			set
			{
				if ((this._ReliefPressure != value))
				{
					this.OnReliefPressureChanging(value);
					this.SendPropertyChanging();
					this._ReliefPressure = value;
					this.SendPropertyChanged("ReliefPressure");
					this.OnReliefPressureChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefpressureColor
		{
			get
			{
				return this._ReliefpressureColor;
			}
			set
			{
				if ((this._ReliefpressureColor != value))
				{
					this.OnReliefpressureColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefpressureColor = value;
					this.SendPropertyChanged("ReliefpressureColor");
					this.OnReliefpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefTemperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefTemperature
		{
			get
			{
				return this._ReliefTemperature;
			}
			set
			{
				if ((this._ReliefTemperature != value))
				{
					this.OnReliefTemperatureChanging(value);
					this.SendPropertyChanging();
					this._ReliefTemperature = value;
					this.SendPropertyChanged("ReliefTemperature");
					this.OnReliefTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_RelieftemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string RelieftemperatureColor
		{
			get
			{
				return this._RelieftemperatureColor;
			}
			set
			{
				if ((this._RelieftemperatureColor != value))
				{
					this.OnRelieftemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._RelieftemperatureColor = value;
					this.SendPropertyChanged("RelieftemperatureColor");
					this.OnRelieftemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefZ", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefZ
		{
			get
			{
				return this._ReliefZ;
			}
			set
			{
				if ((this._ReliefZ != value))
				{
					this.OnReliefZChanging(value);
					this.SendPropertyChanging();
					this._ReliefZ = value;
					this.SendPropertyChanged("ReliefZ");
					this.OnReliefZChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbLatentProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _BulkCP;
		
		private string _BulkcpColor;
		
		private System.Nullable<double> _BulkCPCVRatio;
		
		private string _BulkcpcvratioColor;
		
		private System.Nullable<double> _BulkDensityAct;
		
		private string _BulkdensityactColor;
		
		private System.Nullable<double> _BulkMwOfPhase;
		
		private string _BulkmwofphaseColor;
		
		private System.Nullable<double> _BulkSurfTension;
		
		private string _BulksurftensionColor;
		
		private System.Nullable<double> _BulkThermalCond;
		
		private string _BulkthermalcondColor;
		
		private System.Nullable<double> _BulkViscosity;
		
		private string _BulkviscosityColor;
		
		private string _CompIn;
		
		private string _CompinColor;
		
		private string _ComponentId;
		
		private string _ComponentidColor;
		
		private string _Description;
		
		private string _DescriptionColor;
		
		private System.Nullable<int> _DeviceID;
		
		private System.Nullable<double> _Enthalpy;
		
		private string _EnthalpyColor;
		
		private System.Nullable<double> _InertWeightEnthalpy;
		
		private string _InertweightenthalpyColor;
		
		private System.Nullable<double> _InertWeightRate;
		
		private string _InertweightrateColor;
		
		private bool _IsProduct;
		
		private string _IsproductColor;
		
		private System.Nullable<double> _Pressure;
		
		private string _PressureColor;
		
		private string _PrintNumber;
		
		private string _PrintnumberColor;
		
		private string _Prodtype;
		
		private string _ProdtypeColor;
		
		private System.Nullable<double> _Spenthalpy;
		
		private string _SpenthalpyColor;
		
		private string _Streamname;
		
		private string _StreamnameColor;
		
		private System.Nullable<double> _Temperature;
		
		private string _TemperatureColor;
		
		private string _TotalComposition;
		
		private string _TotalcompositionColor;
		
		private System.Nullable<double> _TotalMolarEnthalpy;
		
		private string _TotalmolarenthalpyColor;
		
		private System.Nullable<double> _TotalMolarRate;
		
		private string _TotalmolarrateColor;
		
		private string _Tray;
		
		private string _TrayColor;
		
		private string _Type;
		
		private string _TypeColor;
		
		private System.Nullable<double> _Vaporfraction;
		
		private string _VaporfractionColor;
		
		private System.Nullable<double> _VaporZFmKVal;
		
		private string _VaporzfmkvalColor;
		
		private System.Nullable<double> _Weightflow;
		
		private string _WeightflowColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBulkCPChanging(System.Nullable<double> value);
    partial void OnBulkCPChanged();
    partial void OnBulkcpColorChanging(string value);
    partial void OnBulkcpColorChanged();
    partial void OnBulkCPCVRatioChanging(System.Nullable<double> value);
    partial void OnBulkCPCVRatioChanged();
    partial void OnBulkcpcvratioColorChanging(string value);
    partial void OnBulkcpcvratioColorChanged();
    partial void OnBulkDensityActChanging(System.Nullable<double> value);
    partial void OnBulkDensityActChanged();
    partial void OnBulkdensityactColorChanging(string value);
    partial void OnBulkdensityactColorChanged();
    partial void OnBulkMwOfPhaseChanging(System.Nullable<double> value);
    partial void OnBulkMwOfPhaseChanged();
    partial void OnBulkmwofphaseColorChanging(string value);
    partial void OnBulkmwofphaseColorChanged();
    partial void OnBulkSurfTensionChanging(System.Nullable<double> value);
    partial void OnBulkSurfTensionChanged();
    partial void OnBulksurftensionColorChanging(string value);
    partial void OnBulksurftensionColorChanged();
    partial void OnBulkThermalCondChanging(System.Nullable<double> value);
    partial void OnBulkThermalCondChanged();
    partial void OnBulkthermalcondColorChanging(string value);
    partial void OnBulkthermalcondColorChanged();
    partial void OnBulkViscosityChanging(System.Nullable<double> value);
    partial void OnBulkViscosityChanged();
    partial void OnBulkviscosityColorChanging(string value);
    partial void OnBulkviscosityColorChanged();
    partial void OnCompInChanging(string value);
    partial void OnCompInChanged();
    partial void OnCompinColorChanging(string value);
    partial void OnCompinColorChanged();
    partial void OnComponentIdChanging(string value);
    partial void OnComponentIdChanged();
    partial void OnComponentidColorChanging(string value);
    partial void OnComponentidColorChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDescriptionColorChanging(string value);
    partial void OnDescriptionColorChanged();
    partial void OnDeviceIDChanging(System.Nullable<int> value);
    partial void OnDeviceIDChanged();
    partial void OnEnthalpyChanging(System.Nullable<double> value);
    partial void OnEnthalpyChanged();
    partial void OnEnthalpyColorChanging(string value);
    partial void OnEnthalpyColorChanged();
    partial void OnInertWeightEnthalpyChanging(System.Nullable<double> value);
    partial void OnInertWeightEnthalpyChanged();
    partial void OnInertweightenthalpyColorChanging(string value);
    partial void OnInertweightenthalpyColorChanged();
    partial void OnInertWeightRateChanging(System.Nullable<double> value);
    partial void OnInertWeightRateChanged();
    partial void OnInertweightrateColorChanging(string value);
    partial void OnInertweightrateColorChanged();
    partial void OnIsProductChanging(bool value);
    partial void OnIsProductChanged();
    partial void OnIsproductColorChanging(string value);
    partial void OnIsproductColorChanged();
    partial void OnPressureChanging(System.Nullable<double> value);
    partial void OnPressureChanged();
    partial void OnPressureColorChanging(string value);
    partial void OnPressureColorChanged();
    partial void OnPrintNumberChanging(string value);
    partial void OnPrintNumberChanged();
    partial void OnPrintnumberColorChanging(string value);
    partial void OnPrintnumberColorChanged();
    partial void OnProdtypeChanging(string value);
    partial void OnProdtypeChanged();
    partial void OnProdtypeColorChanging(string value);
    partial void OnProdtypeColorChanged();
    partial void OnSpenthalpyChanging(System.Nullable<double> value);
    partial void OnSpenthalpyChanged();
    partial void OnSpenthalpyColorChanging(string value);
    partial void OnSpenthalpyColorChanged();
    partial void OnStreamnameChanging(string value);
    partial void OnStreamnameChanged();
    partial void OnStreamnameColorChanging(string value);
    partial void OnStreamnameColorChanged();
    partial void OnTemperatureChanging(System.Nullable<double> value);
    partial void OnTemperatureChanged();
    partial void OnTemperatureColorChanging(string value);
    partial void OnTemperatureColorChanged();
    partial void OnTotalCompositionChanging(string value);
    partial void OnTotalCompositionChanged();
    partial void OnTotalcompositionColorChanging(string value);
    partial void OnTotalcompositionColorChanged();
    partial void OnTotalMolarEnthalpyChanging(System.Nullable<double> value);
    partial void OnTotalMolarEnthalpyChanged();
    partial void OnTotalmolarenthalpyColorChanging(string value);
    partial void OnTotalmolarenthalpyColorChanged();
    partial void OnTotalMolarRateChanging(System.Nullable<double> value);
    partial void OnTotalMolarRateChanged();
    partial void OnTotalmolarrateColorChanging(string value);
    partial void OnTotalmolarrateColorChanged();
    partial void OnTrayChanging(string value);
    partial void OnTrayChanged();
    partial void OnTrayColorChanging(string value);
    partial void OnTrayColorChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTypeColorChanging(string value);
    partial void OnTypeColorChanged();
    partial void OnVaporfractionChanging(System.Nullable<double> value);
    partial void OnVaporfractionChanged();
    partial void OnVaporfractionColorChanging(string value);
    partial void OnVaporfractionColorChanged();
    partial void OnVaporZFmKValChanging(System.Nullable<double> value);
    partial void OnVaporZFmKValChanged();
    partial void OnVaporzfmkvalColorChanging(string value);
    partial void OnVaporzfmkvalColorChanged();
    partial void OnWeightflowChanging(System.Nullable<double> value);
    partial void OnWeightflowChanged();
    partial void OnWeightflowColorChanging(string value);
    partial void OnWeightflowColorChanged();
    #endregion
		
		public tbLatentProduct()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_BulkCP", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkCP
		{
			get
			{
				return this._BulkCP;
			}
			set
			{
				if ((this._BulkCP != value))
				{
					this.OnBulkCPChanging(value);
					this.SendPropertyChanging();
					this._BulkCP = value;
					this.SendPropertyChanged("BulkCP");
					this.OnBulkCPChanged();
				}
			}
		}
		
		[Column(Storage="_BulkcpColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkcpColor
		{
			get
			{
				return this._BulkcpColor;
			}
			set
			{
				if ((this._BulkcpColor != value))
				{
					this.OnBulkcpColorChanging(value);
					this.SendPropertyChanging();
					this._BulkcpColor = value;
					this.SendPropertyChanged("BulkcpColor");
					this.OnBulkcpColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkCPCVRatio", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkCPCVRatio
		{
			get
			{
				return this._BulkCPCVRatio;
			}
			set
			{
				if ((this._BulkCPCVRatio != value))
				{
					this.OnBulkCPCVRatioChanging(value);
					this.SendPropertyChanging();
					this._BulkCPCVRatio = value;
					this.SendPropertyChanged("BulkCPCVRatio");
					this.OnBulkCPCVRatioChanged();
				}
			}
		}
		
		[Column(Storage="_BulkcpcvratioColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkcpcvratioColor
		{
			get
			{
				return this._BulkcpcvratioColor;
			}
			set
			{
				if ((this._BulkcpcvratioColor != value))
				{
					this.OnBulkcpcvratioColorChanging(value);
					this.SendPropertyChanging();
					this._BulkcpcvratioColor = value;
					this.SendPropertyChanged("BulkcpcvratioColor");
					this.OnBulkcpcvratioColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkDensityAct", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkDensityAct
		{
			get
			{
				return this._BulkDensityAct;
			}
			set
			{
				if ((this._BulkDensityAct != value))
				{
					this.OnBulkDensityActChanging(value);
					this.SendPropertyChanging();
					this._BulkDensityAct = value;
					this.SendPropertyChanged("BulkDensityAct");
					this.OnBulkDensityActChanged();
				}
			}
		}
		
		[Column(Storage="_BulkdensityactColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkdensityactColor
		{
			get
			{
				return this._BulkdensityactColor;
			}
			set
			{
				if ((this._BulkdensityactColor != value))
				{
					this.OnBulkdensityactColorChanging(value);
					this.SendPropertyChanging();
					this._BulkdensityactColor = value;
					this.SendPropertyChanged("BulkdensityactColor");
					this.OnBulkdensityactColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkMwOfPhase", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkMwOfPhase
		{
			get
			{
				return this._BulkMwOfPhase;
			}
			set
			{
				if ((this._BulkMwOfPhase != value))
				{
					this.OnBulkMwOfPhaseChanging(value);
					this.SendPropertyChanging();
					this._BulkMwOfPhase = value;
					this.SendPropertyChanged("BulkMwOfPhase");
					this.OnBulkMwOfPhaseChanged();
				}
			}
		}
		
		[Column(Storage="_BulkmwofphaseColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkmwofphaseColor
		{
			get
			{
				return this._BulkmwofphaseColor;
			}
			set
			{
				if ((this._BulkmwofphaseColor != value))
				{
					this.OnBulkmwofphaseColorChanging(value);
					this.SendPropertyChanging();
					this._BulkmwofphaseColor = value;
					this.SendPropertyChanged("BulkmwofphaseColor");
					this.OnBulkmwofphaseColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkSurfTension", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkSurfTension
		{
			get
			{
				return this._BulkSurfTension;
			}
			set
			{
				if ((this._BulkSurfTension != value))
				{
					this.OnBulkSurfTensionChanging(value);
					this.SendPropertyChanging();
					this._BulkSurfTension = value;
					this.SendPropertyChanged("BulkSurfTension");
					this.OnBulkSurfTensionChanged();
				}
			}
		}
		
		[Column(Storage="_BulksurftensionColor", UpdateCheck=UpdateCheck.Never)]
		public string BulksurftensionColor
		{
			get
			{
				return this._BulksurftensionColor;
			}
			set
			{
				if ((this._BulksurftensionColor != value))
				{
					this.OnBulksurftensionColorChanging(value);
					this.SendPropertyChanging();
					this._BulksurftensionColor = value;
					this.SendPropertyChanged("BulksurftensionColor");
					this.OnBulksurftensionColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkThermalCond", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkThermalCond
		{
			get
			{
				return this._BulkThermalCond;
			}
			set
			{
				if ((this._BulkThermalCond != value))
				{
					this.OnBulkThermalCondChanging(value);
					this.SendPropertyChanging();
					this._BulkThermalCond = value;
					this.SendPropertyChanged("BulkThermalCond");
					this.OnBulkThermalCondChanged();
				}
			}
		}
		
		[Column(Storage="_BulkthermalcondColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkthermalcondColor
		{
			get
			{
				return this._BulkthermalcondColor;
			}
			set
			{
				if ((this._BulkthermalcondColor != value))
				{
					this.OnBulkthermalcondColorChanging(value);
					this.SendPropertyChanging();
					this._BulkthermalcondColor = value;
					this.SendPropertyChanged("BulkthermalcondColor");
					this.OnBulkthermalcondColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkViscosity", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkViscosity
		{
			get
			{
				return this._BulkViscosity;
			}
			set
			{
				if ((this._BulkViscosity != value))
				{
					this.OnBulkViscosityChanging(value);
					this.SendPropertyChanging();
					this._BulkViscosity = value;
					this.SendPropertyChanged("BulkViscosity");
					this.OnBulkViscosityChanged();
				}
			}
		}
		
		[Column(Storage="_BulkviscosityColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkviscosityColor
		{
			get
			{
				return this._BulkviscosityColor;
			}
			set
			{
				if ((this._BulkviscosityColor != value))
				{
					this.OnBulkviscosityColorChanging(value);
					this.SendPropertyChanging();
					this._BulkviscosityColor = value;
					this.SendPropertyChanged("BulkviscosityColor");
					this.OnBulkviscosityColorChanged();
				}
			}
		}
		
		[Column(Storage="_CompIn", UpdateCheck=UpdateCheck.Never)]
		public string CompIn
		{
			get
			{
				return this._CompIn;
			}
			set
			{
				if ((this._CompIn != value))
				{
					this.OnCompInChanging(value);
					this.SendPropertyChanging();
					this._CompIn = value;
					this.SendPropertyChanged("CompIn");
					this.OnCompInChanged();
				}
			}
		}
		
		[Column(Storage="_CompinColor", UpdateCheck=UpdateCheck.Never)]
		public string CompinColor
		{
			get
			{
				return this._CompinColor;
			}
			set
			{
				if ((this._CompinColor != value))
				{
					this.OnCompinColorChanging(value);
					this.SendPropertyChanging();
					this._CompinColor = value;
					this.SendPropertyChanged("CompinColor");
					this.OnCompinColorChanged();
				}
			}
		}
		
		[Column(Storage="_ComponentId", UpdateCheck=UpdateCheck.Never)]
		public string ComponentId
		{
			get
			{
				return this._ComponentId;
			}
			set
			{
				if ((this._ComponentId != value))
				{
					this.OnComponentIdChanging(value);
					this.SendPropertyChanging();
					this._ComponentId = value;
					this.SendPropertyChanged("ComponentId");
					this.OnComponentIdChanged();
				}
			}
		}
		
		[Column(Storage="_ComponentidColor", UpdateCheck=UpdateCheck.Never)]
		public string ComponentidColor
		{
			get
			{
				return this._ComponentidColor;
			}
			set
			{
				if ((this._ComponentidColor != value))
				{
					this.OnComponentidColorChanging(value);
					this.SendPropertyChanging();
					this._ComponentidColor = value;
					this.SendPropertyChanged("ComponentidColor");
					this.OnComponentidColorChanged();
				}
			}
		}
		
		[Column(Storage="_Description", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DescriptionColor", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionColor
		{
			get
			{
				return this._DescriptionColor;
			}
			set
			{
				if ((this._DescriptionColor != value))
				{
					this.OnDescriptionColorChanging(value);
					this.SendPropertyChanging();
					this._DescriptionColor = value;
					this.SendPropertyChanged("DescriptionColor");
					this.OnDescriptionColorChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Enthalpy", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Enthalpy
		{
			get
			{
				return this._Enthalpy;
			}
			set
			{
				if ((this._Enthalpy != value))
				{
					this.OnEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._Enthalpy = value;
					this.SendPropertyChanged("Enthalpy");
					this.OnEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_EnthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string EnthalpyColor
		{
			get
			{
				return this._EnthalpyColor;
			}
			set
			{
				if ((this._EnthalpyColor != value))
				{
					this.OnEnthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._EnthalpyColor = value;
					this.SendPropertyChanged("EnthalpyColor");
					this.OnEnthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_InertWeightEnthalpy", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> InertWeightEnthalpy
		{
			get
			{
				return this._InertWeightEnthalpy;
			}
			set
			{
				if ((this._InertWeightEnthalpy != value))
				{
					this.OnInertWeightEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._InertWeightEnthalpy = value;
					this.SendPropertyChanged("InertWeightEnthalpy");
					this.OnInertWeightEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_InertweightenthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string InertweightenthalpyColor
		{
			get
			{
				return this._InertweightenthalpyColor;
			}
			set
			{
				if ((this._InertweightenthalpyColor != value))
				{
					this.OnInertweightenthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._InertweightenthalpyColor = value;
					this.SendPropertyChanged("InertweightenthalpyColor");
					this.OnInertweightenthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_InertWeightRate", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> InertWeightRate
		{
			get
			{
				return this._InertWeightRate;
			}
			set
			{
				if ((this._InertWeightRate != value))
				{
					this.OnInertWeightRateChanging(value);
					this.SendPropertyChanging();
					this._InertWeightRate = value;
					this.SendPropertyChanged("InertWeightRate");
					this.OnInertWeightRateChanged();
				}
			}
		}
		
		[Column(Storage="_InertweightrateColor", UpdateCheck=UpdateCheck.Never)]
		public string InertweightrateColor
		{
			get
			{
				return this._InertweightrateColor;
			}
			set
			{
				if ((this._InertweightrateColor != value))
				{
					this.OnInertweightrateColorChanging(value);
					this.SendPropertyChanging();
					this._InertweightrateColor = value;
					this.SendPropertyChanged("InertweightrateColor");
					this.OnInertweightrateColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsProduct", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsProduct
		{
			get
			{
				return this._IsProduct;
			}
			set
			{
				if ((this._IsProduct != value))
				{
					this.OnIsProductChanging(value);
					this.SendPropertyChanging();
					this._IsProduct = value;
					this.SendPropertyChanged("IsProduct");
					this.OnIsProductChanged();
				}
			}
		}
		
		[Column(Storage="_IsproductColor", UpdateCheck=UpdateCheck.Never)]
		public string IsproductColor
		{
			get
			{
				return this._IsproductColor;
			}
			set
			{
				if ((this._IsproductColor != value))
				{
					this.OnIsproductColorChanging(value);
					this.SendPropertyChanging();
					this._IsproductColor = value;
					this.SendPropertyChanged("IsproductColor");
					this.OnIsproductColorChanged();
				}
			}
		}
		
		[Column(Storage="_Pressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this.OnPressureChanging(value);
					this.SendPropertyChanging();
					this._Pressure = value;
					this.SendPropertyChanged("Pressure");
					this.OnPressureChanged();
				}
			}
		}
		
		[Column(Storage="_PressureColor", UpdateCheck=UpdateCheck.Never)]
		public string PressureColor
		{
			get
			{
				return this._PressureColor;
			}
			set
			{
				if ((this._PressureColor != value))
				{
					this.OnPressureColorChanging(value);
					this.SendPropertyChanging();
					this._PressureColor = value;
					this.SendPropertyChanged("PressureColor");
					this.OnPressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_PrintNumber", UpdateCheck=UpdateCheck.Never)]
		public string PrintNumber
		{
			get
			{
				return this._PrintNumber;
			}
			set
			{
				if ((this._PrintNumber != value))
				{
					this.OnPrintNumberChanging(value);
					this.SendPropertyChanging();
					this._PrintNumber = value;
					this.SendPropertyChanged("PrintNumber");
					this.OnPrintNumberChanged();
				}
			}
		}
		
		[Column(Storage="_PrintnumberColor", UpdateCheck=UpdateCheck.Never)]
		public string PrintnumberColor
		{
			get
			{
				return this._PrintnumberColor;
			}
			set
			{
				if ((this._PrintnumberColor != value))
				{
					this.OnPrintnumberColorChanging(value);
					this.SendPropertyChanging();
					this._PrintnumberColor = value;
					this.SendPropertyChanged("PrintnumberColor");
					this.OnPrintnumberColorChanged();
				}
			}
		}
		
		[Column(Storage="_Prodtype", UpdateCheck=UpdateCheck.Never)]
		public string Prodtype
		{
			get
			{
				return this._Prodtype;
			}
			set
			{
				if ((this._Prodtype != value))
				{
					this.OnProdtypeChanging(value);
					this.SendPropertyChanging();
					this._Prodtype = value;
					this.SendPropertyChanged("Prodtype");
					this.OnProdtypeChanged();
				}
			}
		}
		
		[Column(Storage="_ProdtypeColor", UpdateCheck=UpdateCheck.Never)]
		public string ProdtypeColor
		{
			get
			{
				return this._ProdtypeColor;
			}
			set
			{
				if ((this._ProdtypeColor != value))
				{
					this.OnProdtypeColorChanging(value);
					this.SendPropertyChanging();
					this._ProdtypeColor = value;
					this.SendPropertyChanged("ProdtypeColor");
					this.OnProdtypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_Spenthalpy", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Spenthalpy
		{
			get
			{
				return this._Spenthalpy;
			}
			set
			{
				if ((this._Spenthalpy != value))
				{
					this.OnSpenthalpyChanging(value);
					this.SendPropertyChanging();
					this._Spenthalpy = value;
					this.SendPropertyChanged("Spenthalpy");
					this.OnSpenthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_SpenthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string SpenthalpyColor
		{
			get
			{
				return this._SpenthalpyColor;
			}
			set
			{
				if ((this._SpenthalpyColor != value))
				{
					this.OnSpenthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._SpenthalpyColor = value;
					this.SendPropertyChanged("SpenthalpyColor");
					this.OnSpenthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_Streamname", UpdateCheck=UpdateCheck.Never)]
		public string Streamname
		{
			get
			{
				return this._Streamname;
			}
			set
			{
				if ((this._Streamname != value))
				{
					this.OnStreamnameChanging(value);
					this.SendPropertyChanging();
					this._Streamname = value;
					this.SendPropertyChanged("Streamname");
					this.OnStreamnameChanged();
				}
			}
		}
		
		[Column(Storage="_StreamnameColor", UpdateCheck=UpdateCheck.Never)]
		public string StreamnameColor
		{
			get
			{
				return this._StreamnameColor;
			}
			set
			{
				if ((this._StreamnameColor != value))
				{
					this.OnStreamnameColorChanging(value);
					this.SendPropertyChanging();
					this._StreamnameColor = value;
					this.SendPropertyChanged("StreamnameColor");
					this.OnStreamnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_Temperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_TemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string TemperatureColor
		{
			get
			{
				return this._TemperatureColor;
			}
			set
			{
				if ((this._TemperatureColor != value))
				{
					this.OnTemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._TemperatureColor = value;
					this.SendPropertyChanged("TemperatureColor");
					this.OnTemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_TotalComposition", UpdateCheck=UpdateCheck.Never)]
		public string TotalComposition
		{
			get
			{
				return this._TotalComposition;
			}
			set
			{
				if ((this._TotalComposition != value))
				{
					this.OnTotalCompositionChanging(value);
					this.SendPropertyChanging();
					this._TotalComposition = value;
					this.SendPropertyChanged("TotalComposition");
					this.OnTotalCompositionChanged();
				}
			}
		}
		
		[Column(Storage="_TotalcompositionColor", UpdateCheck=UpdateCheck.Never)]
		public string TotalcompositionColor
		{
			get
			{
				return this._TotalcompositionColor;
			}
			set
			{
				if ((this._TotalcompositionColor != value))
				{
					this.OnTotalcompositionColorChanging(value);
					this.SendPropertyChanging();
					this._TotalcompositionColor = value;
					this.SendPropertyChanged("TotalcompositionColor");
					this.OnTotalcompositionColorChanged();
				}
			}
		}
		
		[Column(Storage="_TotalMolarEnthalpy", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> TotalMolarEnthalpy
		{
			get
			{
				return this._TotalMolarEnthalpy;
			}
			set
			{
				if ((this._TotalMolarEnthalpy != value))
				{
					this.OnTotalMolarEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._TotalMolarEnthalpy = value;
					this.SendPropertyChanged("TotalMolarEnthalpy");
					this.OnTotalMolarEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalmolarenthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string TotalmolarenthalpyColor
		{
			get
			{
				return this._TotalmolarenthalpyColor;
			}
			set
			{
				if ((this._TotalmolarenthalpyColor != value))
				{
					this.OnTotalmolarenthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._TotalmolarenthalpyColor = value;
					this.SendPropertyChanged("TotalmolarenthalpyColor");
					this.OnTotalmolarenthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_TotalMolarRate", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> TotalMolarRate
		{
			get
			{
				return this._TotalMolarRate;
			}
			set
			{
				if ((this._TotalMolarRate != value))
				{
					this.OnTotalMolarRateChanging(value);
					this.SendPropertyChanging();
					this._TotalMolarRate = value;
					this.SendPropertyChanged("TotalMolarRate");
					this.OnTotalMolarRateChanged();
				}
			}
		}
		
		[Column(Storage="_TotalmolarrateColor", UpdateCheck=UpdateCheck.Never)]
		public string TotalmolarrateColor
		{
			get
			{
				return this._TotalmolarrateColor;
			}
			set
			{
				if ((this._TotalmolarrateColor != value))
				{
					this.OnTotalmolarrateColorChanging(value);
					this.SendPropertyChanging();
					this._TotalmolarrateColor = value;
					this.SendPropertyChanged("TotalmolarrateColor");
					this.OnTotalmolarrateColorChanged();
				}
			}
		}
		
		[Column(Storage="_Tray", UpdateCheck=UpdateCheck.Never)]
		public string Tray
		{
			get
			{
				return this._Tray;
			}
			set
			{
				if ((this._Tray != value))
				{
					this.OnTrayChanging(value);
					this.SendPropertyChanging();
					this._Tray = value;
					this.SendPropertyChanged("Tray");
					this.OnTrayChanged();
				}
			}
		}
		
		[Column(Storage="_TrayColor", UpdateCheck=UpdateCheck.Never)]
		public string TrayColor
		{
			get
			{
				return this._TrayColor;
			}
			set
			{
				if ((this._TrayColor != value))
				{
					this.OnTrayColorChanging(value);
					this.SendPropertyChanging();
					this._TrayColor = value;
					this.SendPropertyChanged("TrayColor");
					this.OnTrayColorChanged();
				}
			}
		}
		
		[Column(Storage="_Type", UpdateCheck=UpdateCheck.Never)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TypeColor", UpdateCheck=UpdateCheck.Never)]
		public string TypeColor
		{
			get
			{
				return this._TypeColor;
			}
			set
			{
				if ((this._TypeColor != value))
				{
					this.OnTypeColorChanging(value);
					this.SendPropertyChanging();
					this._TypeColor = value;
					this.SendPropertyChanged("TypeColor");
					this.OnTypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_Vaporfraction", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Vaporfraction
		{
			get
			{
				return this._Vaporfraction;
			}
			set
			{
				if ((this._Vaporfraction != value))
				{
					this.OnVaporfractionChanging(value);
					this.SendPropertyChanging();
					this._Vaporfraction = value;
					this.SendPropertyChanged("Vaporfraction");
					this.OnVaporfractionChanged();
				}
			}
		}
		
		[Column(Storage="_VaporfractionColor", UpdateCheck=UpdateCheck.Never)]
		public string VaporfractionColor
		{
			get
			{
				return this._VaporfractionColor;
			}
			set
			{
				if ((this._VaporfractionColor != value))
				{
					this.OnVaporfractionColorChanging(value);
					this.SendPropertyChanging();
					this._VaporfractionColor = value;
					this.SendPropertyChanged("VaporfractionColor");
					this.OnVaporfractionColorChanged();
				}
			}
		}
		
		[Column(Storage="_VaporZFmKVal", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> VaporZFmKVal
		{
			get
			{
				return this._VaporZFmKVal;
			}
			set
			{
				if ((this._VaporZFmKVal != value))
				{
					this.OnVaporZFmKValChanging(value);
					this.SendPropertyChanging();
					this._VaporZFmKVal = value;
					this.SendPropertyChanged("VaporZFmKVal");
					this.OnVaporZFmKValChanged();
				}
			}
		}
		
		[Column(Storage="_VaporzfmkvalColor", UpdateCheck=UpdateCheck.Never)]
		public string VaporzfmkvalColor
		{
			get
			{
				return this._VaporzfmkvalColor;
			}
			set
			{
				if ((this._VaporzfmkvalColor != value))
				{
					this.OnVaporzfmkvalColorChanging(value);
					this.SendPropertyChanging();
					this._VaporzfmkvalColor = value;
					this.SendPropertyChanged("VaporzfmkvalColor");
					this.OnVaporzfmkvalColorChanged();
				}
			}
		}
		
		[Column(Storage="_Weightflow", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Weightflow
		{
			get
			{
				return this._Weightflow;
			}
			set
			{
				if ((this._Weightflow != value))
				{
					this.OnWeightflowChanging(value);
					this.SendPropertyChanging();
					this._Weightflow = value;
					this.SendPropertyChanged("Weightflow");
					this.OnWeightflowChanged();
				}
			}
		}
		
		[Column(Storage="_WeightflowColor", UpdateCheck=UpdateCheck.Never)]
		public string WeightflowColor
		{
			get
			{
				return this._WeightflowColor;
			}
			set
			{
				if ((this._WeightflowColor != value))
				{
					this.OnWeightflowColorChanging(value);
					this.SendPropertyChanging();
					this._WeightflowColor = value;
					this.SendPropertyChanged("WeightflowColor");
					this.OnWeightflowColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbProIIEqData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Area;
		
		private string _ColdsidePressureDrop;
		
		private string _ColdsideTemperature;
		
		private string _CondenserDuty;
		
		private string _Diameter;
		
		private string _DrumType;
		
		private string _Duty;
		
		private string _DutyCalc;
		
		private string _Efficiency;
		
		private string _EqName;
		
		private string _EqType;
		
		private string _EqWork;
		
		private string _FeedData;
		
		private string _FeedTrays;
		
		private string _FirstFeed;
		
		private string _FirstProduct;
		
		private string _GasVolumeFlow;
		
		private string _Head;
		
		private string _HeaterDuties;
		
		private string _HeaterNames;
		
		private string _HeaterNumber;
		
		private string _HeaterPANumberfo;
		
		private string _HeaterRegOrPAFlag;
		
		private string _HeaterTrayLoc;
		
		private string _HeaterTrayNumber;
		
		private string _HotsidePressureDrop;
		
		private string _HotsideTemperature;
		
		private string _LastFeed;
		
		private string _LastProduct;
		
		private string _LiquidVolumeFlow;
		
		private string _LmtdCalc;
		
		private string _LmtdFactorCalc;
		
		private string _MolarFlow;
		
		private string _NumberOfTrays;
		
		private string _PressCalc;
		
		private string _PressureDrop;
		
		private string _ProdTrays;
		
		private string _ProdType;
		
		private string _ProductData;
		
		private string _ProductStoreData;
		
		private string _ReboilerDuty;
		
		private string _SourceFile;
		
		private string _TempCalc;
		
		private string _WorkActualCalc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAreaChanging(string value);
    partial void OnAreaChanged();
    partial void OnColdsidePressureDropChanging(string value);
    partial void OnColdsidePressureDropChanged();
    partial void OnColdsideTemperatureChanging(string value);
    partial void OnColdsideTemperatureChanged();
    partial void OnCondenserDutyChanging(string value);
    partial void OnCondenserDutyChanged();
    partial void OnDiameterChanging(string value);
    partial void OnDiameterChanged();
    partial void OnDrumTypeChanging(string value);
    partial void OnDrumTypeChanged();
    partial void OnDutyChanging(string value);
    partial void OnDutyChanged();
    partial void OnDutyCalcChanging(string value);
    partial void OnDutyCalcChanged();
    partial void OnEfficiencyChanging(string value);
    partial void OnEfficiencyChanged();
    partial void OnEqNameChanging(string value);
    partial void OnEqNameChanged();
    partial void OnEqTypeChanging(string value);
    partial void OnEqTypeChanged();
    partial void OnEqWorkChanging(string value);
    partial void OnEqWorkChanged();
    partial void OnFeedDataChanging(string value);
    partial void OnFeedDataChanged();
    partial void OnFeedTraysChanging(string value);
    partial void OnFeedTraysChanged();
    partial void OnFirstFeedChanging(string value);
    partial void OnFirstFeedChanged();
    partial void OnFirstProductChanging(string value);
    partial void OnFirstProductChanged();
    partial void OnGasVolumeFlowChanging(string value);
    partial void OnGasVolumeFlowChanged();
    partial void OnHeadChanging(string value);
    partial void OnHeadChanged();
    partial void OnHeaterDutiesChanging(string value);
    partial void OnHeaterDutiesChanged();
    partial void OnHeaterNamesChanging(string value);
    partial void OnHeaterNamesChanged();
    partial void OnHeaterNumberChanging(string value);
    partial void OnHeaterNumberChanged();
    partial void OnHeaterPANumberfoChanging(string value);
    partial void OnHeaterPANumberfoChanged();
    partial void OnHeaterRegOrPAFlagChanging(string value);
    partial void OnHeaterRegOrPAFlagChanged();
    partial void OnHeaterTrayLocChanging(string value);
    partial void OnHeaterTrayLocChanged();
    partial void OnHeaterTrayNumberChanging(string value);
    partial void OnHeaterTrayNumberChanged();
    partial void OnHotsidePressureDropChanging(string value);
    partial void OnHotsidePressureDropChanged();
    partial void OnHotsideTemperatureChanging(string value);
    partial void OnHotsideTemperatureChanged();
    partial void OnLastFeedChanging(string value);
    partial void OnLastFeedChanged();
    partial void OnLastProductChanging(string value);
    partial void OnLastProductChanged();
    partial void OnLiquidVolumeFlowChanging(string value);
    partial void OnLiquidVolumeFlowChanged();
    partial void OnLmtdCalcChanging(string value);
    partial void OnLmtdCalcChanged();
    partial void OnLmtdFactorCalcChanging(string value);
    partial void OnLmtdFactorCalcChanged();
    partial void OnMolarFlowChanging(string value);
    partial void OnMolarFlowChanged();
    partial void OnNumberOfTraysChanging(string value);
    partial void OnNumberOfTraysChanged();
    partial void OnPressCalcChanging(string value);
    partial void OnPressCalcChanged();
    partial void OnPressureDropChanging(string value);
    partial void OnPressureDropChanged();
    partial void OnProdTraysChanging(string value);
    partial void OnProdTraysChanged();
    partial void OnProdTypeChanging(string value);
    partial void OnProdTypeChanged();
    partial void OnProductDataChanging(string value);
    partial void OnProductDataChanged();
    partial void OnProductStoreDataChanging(string value);
    partial void OnProductStoreDataChanged();
    partial void OnReboilerDutyChanging(string value);
    partial void OnReboilerDutyChanged();
    partial void OnSourceFileChanging(string value);
    partial void OnSourceFileChanged();
    partial void OnTempCalcChanging(string value);
    partial void OnTempCalcChanged();
    partial void OnWorkActualCalcChanging(string value);
    partial void OnWorkActualCalcChanged();
    #endregion
		
		public tbProIIEqData()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Area", UpdateCheck=UpdateCheck.Never)]
		public string Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[Column(Storage="_ColdsidePressureDrop", UpdateCheck=UpdateCheck.Never)]
		public string ColdsidePressureDrop
		{
			get
			{
				return this._ColdsidePressureDrop;
			}
			set
			{
				if ((this._ColdsidePressureDrop != value))
				{
					this.OnColdsidePressureDropChanging(value);
					this.SendPropertyChanging();
					this._ColdsidePressureDrop = value;
					this.SendPropertyChanged("ColdsidePressureDrop");
					this.OnColdsidePressureDropChanged();
				}
			}
		}
		
		[Column(Storage="_ColdsideTemperature", UpdateCheck=UpdateCheck.Never)]
		public string ColdsideTemperature
		{
			get
			{
				return this._ColdsideTemperature;
			}
			set
			{
				if ((this._ColdsideTemperature != value))
				{
					this.OnColdsideTemperatureChanging(value);
					this.SendPropertyChanging();
					this._ColdsideTemperature = value;
					this.SendPropertyChanged("ColdsideTemperature");
					this.OnColdsideTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_CondenserDuty", UpdateCheck=UpdateCheck.Never)]
		public string CondenserDuty
		{
			get
			{
				return this._CondenserDuty;
			}
			set
			{
				if ((this._CondenserDuty != value))
				{
					this.OnCondenserDutyChanging(value);
					this.SendPropertyChanging();
					this._CondenserDuty = value;
					this.SendPropertyChanged("CondenserDuty");
					this.OnCondenserDutyChanged();
				}
			}
		}
		
		[Column(Storage="_Diameter", UpdateCheck=UpdateCheck.Never)]
		public string Diameter
		{
			get
			{
				return this._Diameter;
			}
			set
			{
				if ((this._Diameter != value))
				{
					this.OnDiameterChanging(value);
					this.SendPropertyChanging();
					this._Diameter = value;
					this.SendPropertyChanged("Diameter");
					this.OnDiameterChanged();
				}
			}
		}
		
		[Column(Storage="_DrumType", UpdateCheck=UpdateCheck.Never)]
		public string DrumType
		{
			get
			{
				return this._DrumType;
			}
			set
			{
				if ((this._DrumType != value))
				{
					this.OnDrumTypeChanging(value);
					this.SendPropertyChanging();
					this._DrumType = value;
					this.SendPropertyChanged("DrumType");
					this.OnDrumTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Duty", UpdateCheck=UpdateCheck.Never)]
		public string Duty
		{
			get
			{
				return this._Duty;
			}
			set
			{
				if ((this._Duty != value))
				{
					this.OnDutyChanging(value);
					this.SendPropertyChanging();
					this._Duty = value;
					this.SendPropertyChanged("Duty");
					this.OnDutyChanged();
				}
			}
		}
		
		[Column(Storage="_DutyCalc", UpdateCheck=UpdateCheck.Never)]
		public string DutyCalc
		{
			get
			{
				return this._DutyCalc;
			}
			set
			{
				if ((this._DutyCalc != value))
				{
					this.OnDutyCalcChanging(value);
					this.SendPropertyChanging();
					this._DutyCalc = value;
					this.SendPropertyChanged("DutyCalc");
					this.OnDutyCalcChanged();
				}
			}
		}
		
		[Column(Storage="_Efficiency", UpdateCheck=UpdateCheck.Never)]
		public string Efficiency
		{
			get
			{
				return this._Efficiency;
			}
			set
			{
				if ((this._Efficiency != value))
				{
					this.OnEfficiencyChanging(value);
					this.SendPropertyChanging();
					this._Efficiency = value;
					this.SendPropertyChanged("Efficiency");
					this.OnEfficiencyChanged();
				}
			}
		}
		
		[Column(Storage="_EqName", UpdateCheck=UpdateCheck.Never)]
		public string EqName
		{
			get
			{
				return this._EqName;
			}
			set
			{
				if ((this._EqName != value))
				{
					this.OnEqNameChanging(value);
					this.SendPropertyChanging();
					this._EqName = value;
					this.SendPropertyChanged("EqName");
					this.OnEqNameChanged();
				}
			}
		}
		
		[Column(Storage="_EqType", UpdateCheck=UpdateCheck.Never)]
		public string EqType
		{
			get
			{
				return this._EqType;
			}
			set
			{
				if ((this._EqType != value))
				{
					this.OnEqTypeChanging(value);
					this.SendPropertyChanging();
					this._EqType = value;
					this.SendPropertyChanged("EqType");
					this.OnEqTypeChanged();
				}
			}
		}
		
		[Column(Storage="_EqWork", UpdateCheck=UpdateCheck.Never)]
		public string EqWork
		{
			get
			{
				return this._EqWork;
			}
			set
			{
				if ((this._EqWork != value))
				{
					this.OnEqWorkChanging(value);
					this.SendPropertyChanging();
					this._EqWork = value;
					this.SendPropertyChanged("EqWork");
					this.OnEqWorkChanged();
				}
			}
		}
		
		[Column(Storage="_FeedData", UpdateCheck=UpdateCheck.Never)]
		public string FeedData
		{
			get
			{
				return this._FeedData;
			}
			set
			{
				if ((this._FeedData != value))
				{
					this.OnFeedDataChanging(value);
					this.SendPropertyChanging();
					this._FeedData = value;
					this.SendPropertyChanged("FeedData");
					this.OnFeedDataChanged();
				}
			}
		}
		
		[Column(Storage="_FeedTrays", UpdateCheck=UpdateCheck.Never)]
		public string FeedTrays
		{
			get
			{
				return this._FeedTrays;
			}
			set
			{
				if ((this._FeedTrays != value))
				{
					this.OnFeedTraysChanging(value);
					this.SendPropertyChanging();
					this._FeedTrays = value;
					this.SendPropertyChanged("FeedTrays");
					this.OnFeedTraysChanged();
				}
			}
		}
		
		[Column(Storage="_FirstFeed", UpdateCheck=UpdateCheck.Never)]
		public string FirstFeed
		{
			get
			{
				return this._FirstFeed;
			}
			set
			{
				if ((this._FirstFeed != value))
				{
					this.OnFirstFeedChanging(value);
					this.SendPropertyChanging();
					this._FirstFeed = value;
					this.SendPropertyChanged("FirstFeed");
					this.OnFirstFeedChanged();
				}
			}
		}
		
		[Column(Storage="_FirstProduct", UpdateCheck=UpdateCheck.Never)]
		public string FirstProduct
		{
			get
			{
				return this._FirstProduct;
			}
			set
			{
				if ((this._FirstProduct != value))
				{
					this.OnFirstProductChanging(value);
					this.SendPropertyChanging();
					this._FirstProduct = value;
					this.SendPropertyChanged("FirstProduct");
					this.OnFirstProductChanged();
				}
			}
		}
		
		[Column(Storage="_GasVolumeFlow", UpdateCheck=UpdateCheck.Never)]
		public string GasVolumeFlow
		{
			get
			{
				return this._GasVolumeFlow;
			}
			set
			{
				if ((this._GasVolumeFlow != value))
				{
					this.OnGasVolumeFlowChanging(value);
					this.SendPropertyChanging();
					this._GasVolumeFlow = value;
					this.SendPropertyChanged("GasVolumeFlow");
					this.OnGasVolumeFlowChanged();
				}
			}
		}
		
		[Column(Storage="_Head", UpdateCheck=UpdateCheck.Never)]
		public string Head
		{
			get
			{
				return this._Head;
			}
			set
			{
				if ((this._Head != value))
				{
					this.OnHeadChanging(value);
					this.SendPropertyChanging();
					this._Head = value;
					this.SendPropertyChanged("Head");
					this.OnHeadChanged();
				}
			}
		}
		
		[Column(Storage="_HeaterDuties", UpdateCheck=UpdateCheck.Never)]
		public string HeaterDuties
		{
			get
			{
				return this._HeaterDuties;
			}
			set
			{
				if ((this._HeaterDuties != value))
				{
					this.OnHeaterDutiesChanging(value);
					this.SendPropertyChanging();
					this._HeaterDuties = value;
					this.SendPropertyChanged("HeaterDuties");
					this.OnHeaterDutiesChanged();
				}
			}
		}
		
		[Column(Storage="_HeaterNames", UpdateCheck=UpdateCheck.Never)]
		public string HeaterNames
		{
			get
			{
				return this._HeaterNames;
			}
			set
			{
				if ((this._HeaterNames != value))
				{
					this.OnHeaterNamesChanging(value);
					this.SendPropertyChanging();
					this._HeaterNames = value;
					this.SendPropertyChanged("HeaterNames");
					this.OnHeaterNamesChanged();
				}
			}
		}
		
		[Column(Storage="_HeaterNumber", UpdateCheck=UpdateCheck.Never)]
		public string HeaterNumber
		{
			get
			{
				return this._HeaterNumber;
			}
			set
			{
				if ((this._HeaterNumber != value))
				{
					this.OnHeaterNumberChanging(value);
					this.SendPropertyChanging();
					this._HeaterNumber = value;
					this.SendPropertyChanged("HeaterNumber");
					this.OnHeaterNumberChanged();
				}
			}
		}
		
		[Column(Storage="_HeaterPANumberfo", UpdateCheck=UpdateCheck.Never)]
		public string HeaterPANumberfo
		{
			get
			{
				return this._HeaterPANumberfo;
			}
			set
			{
				if ((this._HeaterPANumberfo != value))
				{
					this.OnHeaterPANumberfoChanging(value);
					this.SendPropertyChanging();
					this._HeaterPANumberfo = value;
					this.SendPropertyChanged("HeaterPANumberfo");
					this.OnHeaterPANumberfoChanged();
				}
			}
		}
		
		[Column(Storage="_HeaterRegOrPAFlag", UpdateCheck=UpdateCheck.Never)]
		public string HeaterRegOrPAFlag
		{
			get
			{
				return this._HeaterRegOrPAFlag;
			}
			set
			{
				if ((this._HeaterRegOrPAFlag != value))
				{
					this.OnHeaterRegOrPAFlagChanging(value);
					this.SendPropertyChanging();
					this._HeaterRegOrPAFlag = value;
					this.SendPropertyChanged("HeaterRegOrPAFlag");
					this.OnHeaterRegOrPAFlagChanged();
				}
			}
		}
		
		[Column(Storage="_HeaterTrayLoc", UpdateCheck=UpdateCheck.Never)]
		public string HeaterTrayLoc
		{
			get
			{
				return this._HeaterTrayLoc;
			}
			set
			{
				if ((this._HeaterTrayLoc != value))
				{
					this.OnHeaterTrayLocChanging(value);
					this.SendPropertyChanging();
					this._HeaterTrayLoc = value;
					this.SendPropertyChanged("HeaterTrayLoc");
					this.OnHeaterTrayLocChanged();
				}
			}
		}
		
		[Column(Storage="_HeaterTrayNumber", UpdateCheck=UpdateCheck.Never)]
		public string HeaterTrayNumber
		{
			get
			{
				return this._HeaterTrayNumber;
			}
			set
			{
				if ((this._HeaterTrayNumber != value))
				{
					this.OnHeaterTrayNumberChanging(value);
					this.SendPropertyChanging();
					this._HeaterTrayNumber = value;
					this.SendPropertyChanged("HeaterTrayNumber");
					this.OnHeaterTrayNumberChanged();
				}
			}
		}
		
		[Column(Storage="_HotsidePressureDrop", UpdateCheck=UpdateCheck.Never)]
		public string HotsidePressureDrop
		{
			get
			{
				return this._HotsidePressureDrop;
			}
			set
			{
				if ((this._HotsidePressureDrop != value))
				{
					this.OnHotsidePressureDropChanging(value);
					this.SendPropertyChanging();
					this._HotsidePressureDrop = value;
					this.SendPropertyChanged("HotsidePressureDrop");
					this.OnHotsidePressureDropChanged();
				}
			}
		}
		
		[Column(Storage="_HotsideTemperature", UpdateCheck=UpdateCheck.Never)]
		public string HotsideTemperature
		{
			get
			{
				return this._HotsideTemperature;
			}
			set
			{
				if ((this._HotsideTemperature != value))
				{
					this.OnHotsideTemperatureChanging(value);
					this.SendPropertyChanging();
					this._HotsideTemperature = value;
					this.SendPropertyChanged("HotsideTemperature");
					this.OnHotsideTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_LastFeed", UpdateCheck=UpdateCheck.Never)]
		public string LastFeed
		{
			get
			{
				return this._LastFeed;
			}
			set
			{
				if ((this._LastFeed != value))
				{
					this.OnLastFeedChanging(value);
					this.SendPropertyChanging();
					this._LastFeed = value;
					this.SendPropertyChanged("LastFeed");
					this.OnLastFeedChanged();
				}
			}
		}
		
		[Column(Storage="_LastProduct", UpdateCheck=UpdateCheck.Never)]
		public string LastProduct
		{
			get
			{
				return this._LastProduct;
			}
			set
			{
				if ((this._LastProduct != value))
				{
					this.OnLastProductChanging(value);
					this.SendPropertyChanging();
					this._LastProduct = value;
					this.SendPropertyChanged("LastProduct");
					this.OnLastProductChanged();
				}
			}
		}
		
		[Column(Storage="_LiquidVolumeFlow", UpdateCheck=UpdateCheck.Never)]
		public string LiquidVolumeFlow
		{
			get
			{
				return this._LiquidVolumeFlow;
			}
			set
			{
				if ((this._LiquidVolumeFlow != value))
				{
					this.OnLiquidVolumeFlowChanging(value);
					this.SendPropertyChanging();
					this._LiquidVolumeFlow = value;
					this.SendPropertyChanged("LiquidVolumeFlow");
					this.OnLiquidVolumeFlowChanged();
				}
			}
		}
		
		[Column(Storage="_LmtdCalc", UpdateCheck=UpdateCheck.Never)]
		public string LmtdCalc
		{
			get
			{
				return this._LmtdCalc;
			}
			set
			{
				if ((this._LmtdCalc != value))
				{
					this.OnLmtdCalcChanging(value);
					this.SendPropertyChanging();
					this._LmtdCalc = value;
					this.SendPropertyChanged("LmtdCalc");
					this.OnLmtdCalcChanged();
				}
			}
		}
		
		[Column(Storage="_LmtdFactorCalc", UpdateCheck=UpdateCheck.Never)]
		public string LmtdFactorCalc
		{
			get
			{
				return this._LmtdFactorCalc;
			}
			set
			{
				if ((this._LmtdFactorCalc != value))
				{
					this.OnLmtdFactorCalcChanging(value);
					this.SendPropertyChanging();
					this._LmtdFactorCalc = value;
					this.SendPropertyChanged("LmtdFactorCalc");
					this.OnLmtdFactorCalcChanged();
				}
			}
		}
		
		[Column(Storage="_MolarFlow", UpdateCheck=UpdateCheck.Never)]
		public string MolarFlow
		{
			get
			{
				return this._MolarFlow;
			}
			set
			{
				if ((this._MolarFlow != value))
				{
					this.OnMolarFlowChanging(value);
					this.SendPropertyChanging();
					this._MolarFlow = value;
					this.SendPropertyChanged("MolarFlow");
					this.OnMolarFlowChanged();
				}
			}
		}
		
		[Column(Storage="_NumberOfTrays", UpdateCheck=UpdateCheck.Never)]
		public string NumberOfTrays
		{
			get
			{
				return this._NumberOfTrays;
			}
			set
			{
				if ((this._NumberOfTrays != value))
				{
					this.OnNumberOfTraysChanging(value);
					this.SendPropertyChanging();
					this._NumberOfTrays = value;
					this.SendPropertyChanged("NumberOfTrays");
					this.OnNumberOfTraysChanged();
				}
			}
		}
		
		[Column(Storage="_PressCalc", UpdateCheck=UpdateCheck.Never)]
		public string PressCalc
		{
			get
			{
				return this._PressCalc;
			}
			set
			{
				if ((this._PressCalc != value))
				{
					this.OnPressCalcChanging(value);
					this.SendPropertyChanging();
					this._PressCalc = value;
					this.SendPropertyChanged("PressCalc");
					this.OnPressCalcChanged();
				}
			}
		}
		
		[Column(Storage="_PressureDrop", UpdateCheck=UpdateCheck.Never)]
		public string PressureDrop
		{
			get
			{
				return this._PressureDrop;
			}
			set
			{
				if ((this._PressureDrop != value))
				{
					this.OnPressureDropChanging(value);
					this.SendPropertyChanging();
					this._PressureDrop = value;
					this.SendPropertyChanged("PressureDrop");
					this.OnPressureDropChanged();
				}
			}
		}
		
		[Column(Storage="_ProdTrays", UpdateCheck=UpdateCheck.Never)]
		public string ProdTrays
		{
			get
			{
				return this._ProdTrays;
			}
			set
			{
				if ((this._ProdTrays != value))
				{
					this.OnProdTraysChanging(value);
					this.SendPropertyChanging();
					this._ProdTrays = value;
					this.SendPropertyChanged("ProdTrays");
					this.OnProdTraysChanged();
				}
			}
		}
		
		[Column(Storage="_ProdType", UpdateCheck=UpdateCheck.Never)]
		public string ProdType
		{
			get
			{
				return this._ProdType;
			}
			set
			{
				if ((this._ProdType != value))
				{
					this.OnProdTypeChanging(value);
					this.SendPropertyChanging();
					this._ProdType = value;
					this.SendPropertyChanged("ProdType");
					this.OnProdTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ProductData", UpdateCheck=UpdateCheck.Never)]
		public string ProductData
		{
			get
			{
				return this._ProductData;
			}
			set
			{
				if ((this._ProductData != value))
				{
					this.OnProductDataChanging(value);
					this.SendPropertyChanging();
					this._ProductData = value;
					this.SendPropertyChanged("ProductData");
					this.OnProductDataChanged();
				}
			}
		}
		
		[Column(Storage="_ProductStoreData", UpdateCheck=UpdateCheck.Never)]
		public string ProductStoreData
		{
			get
			{
				return this._ProductStoreData;
			}
			set
			{
				if ((this._ProductStoreData != value))
				{
					this.OnProductStoreDataChanging(value);
					this.SendPropertyChanging();
					this._ProductStoreData = value;
					this.SendPropertyChanged("ProductStoreData");
					this.OnProductStoreDataChanged();
				}
			}
		}
		
		[Column(Storage="_ReboilerDuty", UpdateCheck=UpdateCheck.Never)]
		public string ReboilerDuty
		{
			get
			{
				return this._ReboilerDuty;
			}
			set
			{
				if ((this._ReboilerDuty != value))
				{
					this.OnReboilerDutyChanging(value);
					this.SendPropertyChanging();
					this._ReboilerDuty = value;
					this.SendPropertyChanged("ReboilerDuty");
					this.OnReboilerDutyChanged();
				}
			}
		}
		
		[Column(Storage="_SourceFile", UpdateCheck=UpdateCheck.Never)]
		public string SourceFile
		{
			get
			{
				return this._SourceFile;
			}
			set
			{
				if ((this._SourceFile != value))
				{
					this.OnSourceFileChanging(value);
					this.SendPropertyChanging();
					this._SourceFile = value;
					this.SendPropertyChanged("SourceFile");
					this.OnSourceFileChanged();
				}
			}
		}
		
		[Column(Storage="_TempCalc", UpdateCheck=UpdateCheck.Never)]
		public string TempCalc
		{
			get
			{
				return this._TempCalc;
			}
			set
			{
				if ((this._TempCalc != value))
				{
					this.OnTempCalcChanging(value);
					this.SendPropertyChanging();
					this._TempCalc = value;
					this.SendPropertyChanged("TempCalc");
					this.OnTempCalcChanged();
				}
			}
		}
		
		[Column(Storage="_WorkActualCalc", UpdateCheck=UpdateCheck.Never)]
		public string WorkActualCalc
		{
			get
			{
				return this._WorkActualCalc;
			}
			set
			{
				if ((this._WorkActualCalc != value))
				{
					this.OnWorkActualCalcChanging(value);
					this.SendPropertyChanging();
					this._WorkActualCalc = value;
					this.SendPropertyChanged("WorkActualCalc");
					this.OnWorkActualCalcChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbProIIStreamData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _BulkCP;
		
		private string _BulkCPCVRatio;
		
		private string _BulkDensityAct;
		
		private string _BulkMwOfPhase;
		
		private string _BulkSurfTension;
		
		private string _BulkThermalCond;
		
		private string _BulkViscosity;
		
		private string _CompIn;
		
		private string _ComponentId;
		
		private string _InertWeightEnthalpy;
		
		private string _InertWeightRate;
		
		private string _Pressure;
		
		private string _PrintNumber;
		
		private string _ProdType;
		
		private string _SourceFile;
		
		private string _StreamName;
		
		private string _Temperature;
		
		private string _TotalComposition;
		
		private string _TotalMolarEnthalpy;
		
		private string _TotalMolarRate;
		
		private string _Tray;
		
		private string _VaporFraction;
		
		private string _VaporZFmKVal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBulkCPChanging(string value);
    partial void OnBulkCPChanged();
    partial void OnBulkCPCVRatioChanging(string value);
    partial void OnBulkCPCVRatioChanged();
    partial void OnBulkDensityActChanging(string value);
    partial void OnBulkDensityActChanged();
    partial void OnBulkMwOfPhaseChanging(string value);
    partial void OnBulkMwOfPhaseChanged();
    partial void OnBulkSurfTensionChanging(string value);
    partial void OnBulkSurfTensionChanged();
    partial void OnBulkThermalCondChanging(string value);
    partial void OnBulkThermalCondChanged();
    partial void OnBulkViscosityChanging(string value);
    partial void OnBulkViscosityChanged();
    partial void OnCompInChanging(string value);
    partial void OnCompInChanged();
    partial void OnComponentIdChanging(string value);
    partial void OnComponentIdChanged();
    partial void OnInertWeightEnthalpyChanging(string value);
    partial void OnInertWeightEnthalpyChanged();
    partial void OnInertWeightRateChanging(string value);
    partial void OnInertWeightRateChanged();
    partial void OnPressureChanging(string value);
    partial void OnPressureChanged();
    partial void OnPrintNumberChanging(string value);
    partial void OnPrintNumberChanged();
    partial void OnProdTypeChanging(string value);
    partial void OnProdTypeChanged();
    partial void OnSourceFileChanging(string value);
    partial void OnSourceFileChanged();
    partial void OnStreamNameChanging(string value);
    partial void OnStreamNameChanged();
    partial void OnTemperatureChanging(string value);
    partial void OnTemperatureChanged();
    partial void OnTotalCompositionChanging(string value);
    partial void OnTotalCompositionChanged();
    partial void OnTotalMolarEnthalpyChanging(string value);
    partial void OnTotalMolarEnthalpyChanged();
    partial void OnTotalMolarRateChanging(string value);
    partial void OnTotalMolarRateChanged();
    partial void OnTrayChanging(string value);
    partial void OnTrayChanged();
    partial void OnVaporFractionChanging(string value);
    partial void OnVaporFractionChanged();
    partial void OnVaporZFmKValChanging(string value);
    partial void OnVaporZFmKValChanged();
    #endregion
		
		public tbProIIStreamData()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_BulkCP", UpdateCheck=UpdateCheck.Never)]
		public string BulkCP
		{
			get
			{
				return this._BulkCP;
			}
			set
			{
				if ((this._BulkCP != value))
				{
					this.OnBulkCPChanging(value);
					this.SendPropertyChanging();
					this._BulkCP = value;
					this.SendPropertyChanged("BulkCP");
					this.OnBulkCPChanged();
				}
			}
		}
		
		[Column(Storage="_BulkCPCVRatio", UpdateCheck=UpdateCheck.Never)]
		public string BulkCPCVRatio
		{
			get
			{
				return this._BulkCPCVRatio;
			}
			set
			{
				if ((this._BulkCPCVRatio != value))
				{
					this.OnBulkCPCVRatioChanging(value);
					this.SendPropertyChanging();
					this._BulkCPCVRatio = value;
					this.SendPropertyChanged("BulkCPCVRatio");
					this.OnBulkCPCVRatioChanged();
				}
			}
		}
		
		[Column(Storage="_BulkDensityAct", UpdateCheck=UpdateCheck.Never)]
		public string BulkDensityAct
		{
			get
			{
				return this._BulkDensityAct;
			}
			set
			{
				if ((this._BulkDensityAct != value))
				{
					this.OnBulkDensityActChanging(value);
					this.SendPropertyChanging();
					this._BulkDensityAct = value;
					this.SendPropertyChanged("BulkDensityAct");
					this.OnBulkDensityActChanged();
				}
			}
		}
		
		[Column(Storage="_BulkMwOfPhase", UpdateCheck=UpdateCheck.Never)]
		public string BulkMwOfPhase
		{
			get
			{
				return this._BulkMwOfPhase;
			}
			set
			{
				if ((this._BulkMwOfPhase != value))
				{
					this.OnBulkMwOfPhaseChanging(value);
					this.SendPropertyChanging();
					this._BulkMwOfPhase = value;
					this.SendPropertyChanged("BulkMwOfPhase");
					this.OnBulkMwOfPhaseChanged();
				}
			}
		}
		
		[Column(Storage="_BulkSurfTension", UpdateCheck=UpdateCheck.Never)]
		public string BulkSurfTension
		{
			get
			{
				return this._BulkSurfTension;
			}
			set
			{
				if ((this._BulkSurfTension != value))
				{
					this.OnBulkSurfTensionChanging(value);
					this.SendPropertyChanging();
					this._BulkSurfTension = value;
					this.SendPropertyChanged("BulkSurfTension");
					this.OnBulkSurfTensionChanged();
				}
			}
		}
		
		[Column(Storage="_BulkThermalCond", UpdateCheck=UpdateCheck.Never)]
		public string BulkThermalCond
		{
			get
			{
				return this._BulkThermalCond;
			}
			set
			{
				if ((this._BulkThermalCond != value))
				{
					this.OnBulkThermalCondChanging(value);
					this.SendPropertyChanging();
					this._BulkThermalCond = value;
					this.SendPropertyChanged("BulkThermalCond");
					this.OnBulkThermalCondChanged();
				}
			}
		}
		
		[Column(Storage="_BulkViscosity", UpdateCheck=UpdateCheck.Never)]
		public string BulkViscosity
		{
			get
			{
				return this._BulkViscosity;
			}
			set
			{
				if ((this._BulkViscosity != value))
				{
					this.OnBulkViscosityChanging(value);
					this.SendPropertyChanging();
					this._BulkViscosity = value;
					this.SendPropertyChanged("BulkViscosity");
					this.OnBulkViscosityChanged();
				}
			}
		}
		
		[Column(Storage="_CompIn", UpdateCheck=UpdateCheck.Never)]
		public string CompIn
		{
			get
			{
				return this._CompIn;
			}
			set
			{
				if ((this._CompIn != value))
				{
					this.OnCompInChanging(value);
					this.SendPropertyChanging();
					this._CompIn = value;
					this.SendPropertyChanged("CompIn");
					this.OnCompInChanged();
				}
			}
		}
		
		[Column(Storage="_ComponentId", UpdateCheck=UpdateCheck.Never)]
		public string ComponentId
		{
			get
			{
				return this._ComponentId;
			}
			set
			{
				if ((this._ComponentId != value))
				{
					this.OnComponentIdChanging(value);
					this.SendPropertyChanging();
					this._ComponentId = value;
					this.SendPropertyChanged("ComponentId");
					this.OnComponentIdChanged();
				}
			}
		}
		
		[Column(Storage="_InertWeightEnthalpy", UpdateCheck=UpdateCheck.Never)]
		public string InertWeightEnthalpy
		{
			get
			{
				return this._InertWeightEnthalpy;
			}
			set
			{
				if ((this._InertWeightEnthalpy != value))
				{
					this.OnInertWeightEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._InertWeightEnthalpy = value;
					this.SendPropertyChanged("InertWeightEnthalpy");
					this.OnInertWeightEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_InertWeightRate", UpdateCheck=UpdateCheck.Never)]
		public string InertWeightRate
		{
			get
			{
				return this._InertWeightRate;
			}
			set
			{
				if ((this._InertWeightRate != value))
				{
					this.OnInertWeightRateChanging(value);
					this.SendPropertyChanging();
					this._InertWeightRate = value;
					this.SendPropertyChanged("InertWeightRate");
					this.OnInertWeightRateChanged();
				}
			}
		}
		
		[Column(Storage="_Pressure", UpdateCheck=UpdateCheck.Never)]
		public string Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this.OnPressureChanging(value);
					this.SendPropertyChanging();
					this._Pressure = value;
					this.SendPropertyChanged("Pressure");
					this.OnPressureChanged();
				}
			}
		}
		
		[Column(Storage="_PrintNumber", UpdateCheck=UpdateCheck.Never)]
		public string PrintNumber
		{
			get
			{
				return this._PrintNumber;
			}
			set
			{
				if ((this._PrintNumber != value))
				{
					this.OnPrintNumberChanging(value);
					this.SendPropertyChanging();
					this._PrintNumber = value;
					this.SendPropertyChanged("PrintNumber");
					this.OnPrintNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ProdType", UpdateCheck=UpdateCheck.Never)]
		public string ProdType
		{
			get
			{
				return this._ProdType;
			}
			set
			{
				if ((this._ProdType != value))
				{
					this.OnProdTypeChanging(value);
					this.SendPropertyChanging();
					this._ProdType = value;
					this.SendPropertyChanged("ProdType");
					this.OnProdTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SourceFile", UpdateCheck=UpdateCheck.Never)]
		public string SourceFile
		{
			get
			{
				return this._SourceFile;
			}
			set
			{
				if ((this._SourceFile != value))
				{
					this.OnSourceFileChanging(value);
					this.SendPropertyChanging();
					this._SourceFile = value;
					this.SendPropertyChanged("SourceFile");
					this.OnSourceFileChanged();
				}
			}
		}
		
		[Column(Storage="_StreamName", UpdateCheck=UpdateCheck.Never)]
		public string StreamName
		{
			get
			{
				return this._StreamName;
			}
			set
			{
				if ((this._StreamName != value))
				{
					this.OnStreamNameChanging(value);
					this.SendPropertyChanging();
					this._StreamName = value;
					this.SendPropertyChanged("StreamName");
					this.OnStreamNameChanged();
				}
			}
		}
		
		[Column(Storage="_Temperature", UpdateCheck=UpdateCheck.Never)]
		public string Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_TotalComposition", UpdateCheck=UpdateCheck.Never)]
		public string TotalComposition
		{
			get
			{
				return this._TotalComposition;
			}
			set
			{
				if ((this._TotalComposition != value))
				{
					this.OnTotalCompositionChanging(value);
					this.SendPropertyChanging();
					this._TotalComposition = value;
					this.SendPropertyChanged("TotalComposition");
					this.OnTotalCompositionChanged();
				}
			}
		}
		
		[Column(Storage="_TotalMolarEnthalpy", UpdateCheck=UpdateCheck.Never)]
		public string TotalMolarEnthalpy
		{
			get
			{
				return this._TotalMolarEnthalpy;
			}
			set
			{
				if ((this._TotalMolarEnthalpy != value))
				{
					this.OnTotalMolarEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._TotalMolarEnthalpy = value;
					this.SendPropertyChanged("TotalMolarEnthalpy");
					this.OnTotalMolarEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalMolarRate", UpdateCheck=UpdateCheck.Never)]
		public string TotalMolarRate
		{
			get
			{
				return this._TotalMolarRate;
			}
			set
			{
				if ((this._TotalMolarRate != value))
				{
					this.OnTotalMolarRateChanging(value);
					this.SendPropertyChanging();
					this._TotalMolarRate = value;
					this.SendPropertyChanged("TotalMolarRate");
					this.OnTotalMolarRateChanged();
				}
			}
		}
		
		[Column(Storage="_Tray", UpdateCheck=UpdateCheck.Never)]
		public string Tray
		{
			get
			{
				return this._Tray;
			}
			set
			{
				if ((this._Tray != value))
				{
					this.OnTrayChanging(value);
					this.SendPropertyChanging();
					this._Tray = value;
					this.SendPropertyChanged("Tray");
					this.OnTrayChanged();
				}
			}
		}
		
		[Column(Storage="_VaporFraction", UpdateCheck=UpdateCheck.Never)]
		public string VaporFraction
		{
			get
			{
				return this._VaporFraction;
			}
			set
			{
				if ((this._VaporFraction != value))
				{
					this.OnVaporFractionChanging(value);
					this.SendPropertyChanging();
					this._VaporFraction = value;
					this.SendPropertyChanged("VaporFraction");
					this.OnVaporFractionChanged();
				}
			}
		}
		
		[Column(Storage="_VaporZFmKVal", UpdateCheck=UpdateCheck.Never)]
		public string VaporZFmKVal
		{
			get
			{
				return this._VaporZFmKVal;
			}
			set
			{
				if ((this._VaporZFmKVal != value))
				{
					this.OnVaporZFmKValChanging(value);
					this.SendPropertyChanging();
					this._VaporZFmKVal = value;
					this.SendPropertyChanged("VaporZFmKVal");
					this.OnVaporZFmKValChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbPSV : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _CricondenbarPress;
		
		private string _CricondenbarpressColor;
		
		private System.Nullable<double> _CricondenbarTemp;
		
		private string _CricondenbartempColor;
		
		private System.Nullable<double> _CriticalPressure;
		
		private string _CriticalpressureColor;
		
		private System.Nullable<double> _CriticalTemperature;
		
		private string _CriticaltemperatureColor;
		
		private string _Description;
		
		private string _DescriptionColor;
		
		private System.Nullable<int> _DeviceID;
		
		private string _DischargeTo;
		
		private string _DischargetoColor;
		
		private System.Nullable<double> _DrumPressure;
		
		private string _DrumpressureColor;
		
		private string _DrumPSVName;
		
		private string _DrumpsvnameColor;
		
		private System.Nullable<double> _LatestEnthalpy;
		
		private string _LatestenthalpyColor;
		
		private string _Location;
		
		private string _LocationColor;
		
		private string _Locationdescription;
		
		private string _LocationdescriptionColor;
		
		private string _Mwap;
		
		private string _MwapColor;
		
		private System.Nullable<double> _Pressure;
		
		private string _PressureColor;
		
		private string _Psvname;
		
		private string _PsvnameColor;
		
		private System.Nullable<double> _ReliefOHLiquidEnthalpy;
		
		private string _ReliefohliquidenthalpyColor;
		
		private System.Nullable<double> _ReliefOHVaporEnthalpy;
		
		private string _ReliefohvaporenthalpyColor;
		
		private System.Nullable<double> _ReliefOHWeightFlow;
		
		private string _ReliefohweightflowColor;
		
		private System.Nullable<double> _Reliefpressurefactor;
		
		private string _ReliefpressurefactorColor;
		
		private System.Nullable<double> _ReliefTemperature;
		
		private string _RelieftemperatureColor;
		
		private System.Nullable<int> _Valvenumber;
		
		private string _ValvenumberColor;
		
		private string _Valvetype;
		
		private string _ValvetypeColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCricondenbarPressChanging(System.Nullable<double> value);
    partial void OnCricondenbarPressChanged();
    partial void OnCricondenbarpressColorChanging(string value);
    partial void OnCricondenbarpressColorChanged();
    partial void OnCricondenbarTempChanging(System.Nullable<double> value);
    partial void OnCricondenbarTempChanged();
    partial void OnCricondenbartempColorChanging(string value);
    partial void OnCricondenbartempColorChanged();
    partial void OnCriticalPressureChanging(System.Nullable<double> value);
    partial void OnCriticalPressureChanged();
    partial void OnCriticalpressureColorChanging(string value);
    partial void OnCriticalpressureColorChanged();
    partial void OnCriticalTemperatureChanging(System.Nullable<double> value);
    partial void OnCriticalTemperatureChanged();
    partial void OnCriticaltemperatureColorChanging(string value);
    partial void OnCriticaltemperatureColorChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDescriptionColorChanging(string value);
    partial void OnDescriptionColorChanged();
    partial void OnDeviceIDChanging(System.Nullable<int> value);
    partial void OnDeviceIDChanged();
    partial void OnDischargeToChanging(string value);
    partial void OnDischargeToChanged();
    partial void OnDischargetoColorChanging(string value);
    partial void OnDischargetoColorChanged();
    partial void OnDrumPressureChanging(System.Nullable<double> value);
    partial void OnDrumPressureChanged();
    partial void OnDrumpressureColorChanging(string value);
    partial void OnDrumpressureColorChanged();
    partial void OnDrumPSVNameChanging(string value);
    partial void OnDrumPSVNameChanged();
    partial void OnDrumpsvnameColorChanging(string value);
    partial void OnDrumpsvnameColorChanged();
    partial void OnLatestEnthalpyChanging(System.Nullable<double> value);
    partial void OnLatestEnthalpyChanged();
    partial void OnLatestenthalpyColorChanging(string value);
    partial void OnLatestenthalpyColorChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnLocationColorChanging(string value);
    partial void OnLocationColorChanged();
    partial void OnLocationdescriptionChanging(string value);
    partial void OnLocationdescriptionChanged();
    partial void OnLocationdescriptionColorChanging(string value);
    partial void OnLocationdescriptionColorChanged();
    partial void OnMwapChanging(string value);
    partial void OnMwapChanged();
    partial void OnMwapColorChanging(string value);
    partial void OnMwapColorChanged();
    partial void OnPressureChanging(System.Nullable<double> value);
    partial void OnPressureChanged();
    partial void OnPressureColorChanging(string value);
    partial void OnPressureColorChanged();
    partial void OnPsvnameChanging(string value);
    partial void OnPsvnameChanged();
    partial void OnPsvnameColorChanging(string value);
    partial void OnPsvnameColorChanged();
    partial void OnReliefOHLiquidEnthalpyChanging(System.Nullable<double> value);
    partial void OnReliefOHLiquidEnthalpyChanged();
    partial void OnReliefohliquidenthalpyColorChanging(string value);
    partial void OnReliefohliquidenthalpyColorChanged();
    partial void OnReliefOHVaporEnthalpyChanging(System.Nullable<double> value);
    partial void OnReliefOHVaporEnthalpyChanged();
    partial void OnReliefohvaporenthalpyColorChanging(string value);
    partial void OnReliefohvaporenthalpyColorChanged();
    partial void OnReliefOHWeightFlowChanging(System.Nullable<double> value);
    partial void OnReliefOHWeightFlowChanged();
    partial void OnReliefohweightflowColorChanging(string value);
    partial void OnReliefohweightflowColorChanged();
    partial void OnReliefpressurefactorChanging(System.Nullable<double> value);
    partial void OnReliefpressurefactorChanged();
    partial void OnReliefpressurefactorColorChanging(string value);
    partial void OnReliefpressurefactorColorChanged();
    partial void OnReliefTemperatureChanging(System.Nullable<double> value);
    partial void OnReliefTemperatureChanged();
    partial void OnRelieftemperatureColorChanging(string value);
    partial void OnRelieftemperatureColorChanged();
    partial void OnValvenumberChanging(System.Nullable<int> value);
    partial void OnValvenumberChanged();
    partial void OnValvenumberColorChanging(string value);
    partial void OnValvenumberColorChanged();
    partial void OnValvetypeChanging(string value);
    partial void OnValvetypeChanged();
    partial void OnValvetypeColorChanging(string value);
    partial void OnValvetypeColorChanged();
    #endregion
		
		public tbPSV()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_CricondenbarPress", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> CricondenbarPress
		{
			get
			{
				return this._CricondenbarPress;
			}
			set
			{
				if ((this._CricondenbarPress != value))
				{
					this.OnCricondenbarPressChanging(value);
					this.SendPropertyChanging();
					this._CricondenbarPress = value;
					this.SendPropertyChanged("CricondenbarPress");
					this.OnCricondenbarPressChanged();
				}
			}
		}
		
		[Column(Storage="_CricondenbarpressColor", UpdateCheck=UpdateCheck.Never)]
		public string CricondenbarpressColor
		{
			get
			{
				return this._CricondenbarpressColor;
			}
			set
			{
				if ((this._CricondenbarpressColor != value))
				{
					this.OnCricondenbarpressColorChanging(value);
					this.SendPropertyChanging();
					this._CricondenbarpressColor = value;
					this.SendPropertyChanged("CricondenbarpressColor");
					this.OnCricondenbarpressColorChanged();
				}
			}
		}
		
		[Column(Storage="_CricondenbarTemp", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> CricondenbarTemp
		{
			get
			{
				return this._CricondenbarTemp;
			}
			set
			{
				if ((this._CricondenbarTemp != value))
				{
					this.OnCricondenbarTempChanging(value);
					this.SendPropertyChanging();
					this._CricondenbarTemp = value;
					this.SendPropertyChanged("CricondenbarTemp");
					this.OnCricondenbarTempChanged();
				}
			}
		}
		
		[Column(Storage="_CricondenbartempColor", UpdateCheck=UpdateCheck.Never)]
		public string CricondenbartempColor
		{
			get
			{
				return this._CricondenbartempColor;
			}
			set
			{
				if ((this._CricondenbartempColor != value))
				{
					this.OnCricondenbartempColorChanging(value);
					this.SendPropertyChanging();
					this._CricondenbartempColor = value;
					this.SendPropertyChanged("CricondenbartempColor");
					this.OnCricondenbartempColorChanged();
				}
			}
		}
		
		[Column(Storage="_CriticalPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> CriticalPressure
		{
			get
			{
				return this._CriticalPressure;
			}
			set
			{
				if ((this._CriticalPressure != value))
				{
					this.OnCriticalPressureChanging(value);
					this.SendPropertyChanging();
					this._CriticalPressure = value;
					this.SendPropertyChanged("CriticalPressure");
					this.OnCriticalPressureChanged();
				}
			}
		}
		
		[Column(Storage="_CriticalpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string CriticalpressureColor
		{
			get
			{
				return this._CriticalpressureColor;
			}
			set
			{
				if ((this._CriticalpressureColor != value))
				{
					this.OnCriticalpressureColorChanging(value);
					this.SendPropertyChanging();
					this._CriticalpressureColor = value;
					this.SendPropertyChanged("CriticalpressureColor");
					this.OnCriticalpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_CriticalTemperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> CriticalTemperature
		{
			get
			{
				return this._CriticalTemperature;
			}
			set
			{
				if ((this._CriticalTemperature != value))
				{
					this.OnCriticalTemperatureChanging(value);
					this.SendPropertyChanging();
					this._CriticalTemperature = value;
					this.SendPropertyChanged("CriticalTemperature");
					this.OnCriticalTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_CriticaltemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string CriticaltemperatureColor
		{
			get
			{
				return this._CriticaltemperatureColor;
			}
			set
			{
				if ((this._CriticaltemperatureColor != value))
				{
					this.OnCriticaltemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._CriticaltemperatureColor = value;
					this.SendPropertyChanged("CriticaltemperatureColor");
					this.OnCriticaltemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_Description", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DescriptionColor", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionColor
		{
			get
			{
				return this._DescriptionColor;
			}
			set
			{
				if ((this._DescriptionColor != value))
				{
					this.OnDescriptionColorChanging(value);
					this.SendPropertyChanging();
					this._DescriptionColor = value;
					this.SendPropertyChanged("DescriptionColor");
					this.OnDescriptionColorChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[Column(Storage="_DischargeTo", UpdateCheck=UpdateCheck.Never)]
		public string DischargeTo
		{
			get
			{
				return this._DischargeTo;
			}
			set
			{
				if ((this._DischargeTo != value))
				{
					this.OnDischargeToChanging(value);
					this.SendPropertyChanging();
					this._DischargeTo = value;
					this.SendPropertyChanged("DischargeTo");
					this.OnDischargeToChanged();
				}
			}
		}
		
		[Column(Storage="_DischargetoColor", UpdateCheck=UpdateCheck.Never)]
		public string DischargetoColor
		{
			get
			{
				return this._DischargetoColor;
			}
			set
			{
				if ((this._DischargetoColor != value))
				{
					this.OnDischargetoColorChanging(value);
					this.SendPropertyChanging();
					this._DischargetoColor = value;
					this.SendPropertyChanged("DischargetoColor");
					this.OnDischargetoColorChanged();
				}
			}
		}
		
		[Column(Storage="_DrumPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> DrumPressure
		{
			get
			{
				return this._DrumPressure;
			}
			set
			{
				if ((this._DrumPressure != value))
				{
					this.OnDrumPressureChanging(value);
					this.SendPropertyChanging();
					this._DrumPressure = value;
					this.SendPropertyChanged("DrumPressure");
					this.OnDrumPressureChanged();
				}
			}
		}
		
		[Column(Storage="_DrumpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string DrumpressureColor
		{
			get
			{
				return this._DrumpressureColor;
			}
			set
			{
				if ((this._DrumpressureColor != value))
				{
					this.OnDrumpressureColorChanging(value);
					this.SendPropertyChanging();
					this._DrumpressureColor = value;
					this.SendPropertyChanged("DrumpressureColor");
					this.OnDrumpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_DrumPSVName", UpdateCheck=UpdateCheck.Never)]
		public string DrumPSVName
		{
			get
			{
				return this._DrumPSVName;
			}
			set
			{
				if ((this._DrumPSVName != value))
				{
					this.OnDrumPSVNameChanging(value);
					this.SendPropertyChanging();
					this._DrumPSVName = value;
					this.SendPropertyChanged("DrumPSVName");
					this.OnDrumPSVNameChanged();
				}
			}
		}
		
		[Column(Storage="_DrumpsvnameColor", UpdateCheck=UpdateCheck.Never)]
		public string DrumpsvnameColor
		{
			get
			{
				return this._DrumpsvnameColor;
			}
			set
			{
				if ((this._DrumpsvnameColor != value))
				{
					this.OnDrumpsvnameColorChanging(value);
					this.SendPropertyChanging();
					this._DrumpsvnameColor = value;
					this.SendPropertyChanged("DrumpsvnameColor");
					this.OnDrumpsvnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_LatestEnthalpy", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> LatestEnthalpy
		{
			get
			{
				return this._LatestEnthalpy;
			}
			set
			{
				if ((this._LatestEnthalpy != value))
				{
					this.OnLatestEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._LatestEnthalpy = value;
					this.SendPropertyChanged("LatestEnthalpy");
					this.OnLatestEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_LatestenthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string LatestenthalpyColor
		{
			get
			{
				return this._LatestenthalpyColor;
			}
			set
			{
				if ((this._LatestenthalpyColor != value))
				{
					this.OnLatestenthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._LatestenthalpyColor = value;
					this.SendPropertyChanged("LatestenthalpyColor");
					this.OnLatestenthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_Location", UpdateCheck=UpdateCheck.Never)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[Column(Storage="_LocationColor", UpdateCheck=UpdateCheck.Never)]
		public string LocationColor
		{
			get
			{
				return this._LocationColor;
			}
			set
			{
				if ((this._LocationColor != value))
				{
					this.OnLocationColorChanging(value);
					this.SendPropertyChanging();
					this._LocationColor = value;
					this.SendPropertyChanged("LocationColor");
					this.OnLocationColorChanged();
				}
			}
		}
		
		[Column(Storage="_Locationdescription", UpdateCheck=UpdateCheck.Never)]
		public string Locationdescription
		{
			get
			{
				return this._Locationdescription;
			}
			set
			{
				if ((this._Locationdescription != value))
				{
					this.OnLocationdescriptionChanging(value);
					this.SendPropertyChanging();
					this._Locationdescription = value;
					this.SendPropertyChanged("Locationdescription");
					this.OnLocationdescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_LocationdescriptionColor", UpdateCheck=UpdateCheck.Never)]
		public string LocationdescriptionColor
		{
			get
			{
				return this._LocationdescriptionColor;
			}
			set
			{
				if ((this._LocationdescriptionColor != value))
				{
					this.OnLocationdescriptionColorChanging(value);
					this.SendPropertyChanging();
					this._LocationdescriptionColor = value;
					this.SendPropertyChanged("LocationdescriptionColor");
					this.OnLocationdescriptionColorChanged();
				}
			}
		}
		
		[Column(Storage="_Mwap", UpdateCheck=UpdateCheck.Never)]
		public string Mwap
		{
			get
			{
				return this._Mwap;
			}
			set
			{
				if ((this._Mwap != value))
				{
					this.OnMwapChanging(value);
					this.SendPropertyChanging();
					this._Mwap = value;
					this.SendPropertyChanged("Mwap");
					this.OnMwapChanged();
				}
			}
		}
		
		[Column(Storage="_MwapColor", UpdateCheck=UpdateCheck.Never)]
		public string MwapColor
		{
			get
			{
				return this._MwapColor;
			}
			set
			{
				if ((this._MwapColor != value))
				{
					this.OnMwapColorChanging(value);
					this.SendPropertyChanging();
					this._MwapColor = value;
					this.SendPropertyChanged("MwapColor");
					this.OnMwapColorChanged();
				}
			}
		}
		
		[Column(Storage="_Pressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this.OnPressureChanging(value);
					this.SendPropertyChanging();
					this._Pressure = value;
					this.SendPropertyChanged("Pressure");
					this.OnPressureChanged();
				}
			}
		}
		
		[Column(Storage="_PressureColor", UpdateCheck=UpdateCheck.Never)]
		public string PressureColor
		{
			get
			{
				return this._PressureColor;
			}
			set
			{
				if ((this._PressureColor != value))
				{
					this.OnPressureColorChanging(value);
					this.SendPropertyChanging();
					this._PressureColor = value;
					this.SendPropertyChanged("PressureColor");
					this.OnPressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_Psvname", UpdateCheck=UpdateCheck.Never)]
		public string Psvname
		{
			get
			{
				return this._Psvname;
			}
			set
			{
				if ((this._Psvname != value))
				{
					this.OnPsvnameChanging(value);
					this.SendPropertyChanging();
					this._Psvname = value;
					this.SendPropertyChanged("Psvname");
					this.OnPsvnameChanged();
				}
			}
		}
		
		[Column(Storage="_PsvnameColor", UpdateCheck=UpdateCheck.Never)]
		public string PsvnameColor
		{
			get
			{
				return this._PsvnameColor;
			}
			set
			{
				if ((this._PsvnameColor != value))
				{
					this.OnPsvnameColorChanging(value);
					this.SendPropertyChanging();
					this._PsvnameColor = value;
					this.SendPropertyChanged("PsvnameColor");
					this.OnPsvnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefOHLiquidEnthalpy", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefOHLiquidEnthalpy
		{
			get
			{
				return this._ReliefOHLiquidEnthalpy;
			}
			set
			{
				if ((this._ReliefOHLiquidEnthalpy != value))
				{
					this.OnReliefOHLiquidEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._ReliefOHLiquidEnthalpy = value;
					this.SendPropertyChanged("ReliefOHLiquidEnthalpy");
					this.OnReliefOHLiquidEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefohliquidenthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefohliquidenthalpyColor
		{
			get
			{
				return this._ReliefohliquidenthalpyColor;
			}
			set
			{
				if ((this._ReliefohliquidenthalpyColor != value))
				{
					this.OnReliefohliquidenthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefohliquidenthalpyColor = value;
					this.SendPropertyChanged("ReliefohliquidenthalpyColor");
					this.OnReliefohliquidenthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefOHVaporEnthalpy", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefOHVaporEnthalpy
		{
			get
			{
				return this._ReliefOHVaporEnthalpy;
			}
			set
			{
				if ((this._ReliefOHVaporEnthalpy != value))
				{
					this.OnReliefOHVaporEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._ReliefOHVaporEnthalpy = value;
					this.SendPropertyChanged("ReliefOHVaporEnthalpy");
					this.OnReliefOHVaporEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefohvaporenthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefohvaporenthalpyColor
		{
			get
			{
				return this._ReliefohvaporenthalpyColor;
			}
			set
			{
				if ((this._ReliefohvaporenthalpyColor != value))
				{
					this.OnReliefohvaporenthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefohvaporenthalpyColor = value;
					this.SendPropertyChanged("ReliefohvaporenthalpyColor");
					this.OnReliefohvaporenthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefOHWeightFlow", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefOHWeightFlow
		{
			get
			{
				return this._ReliefOHWeightFlow;
			}
			set
			{
				if ((this._ReliefOHWeightFlow != value))
				{
					this.OnReliefOHWeightFlowChanging(value);
					this.SendPropertyChanging();
					this._ReliefOHWeightFlow = value;
					this.SendPropertyChanged("ReliefOHWeightFlow");
					this.OnReliefOHWeightFlowChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefohweightflowColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefohweightflowColor
		{
			get
			{
				return this._ReliefohweightflowColor;
			}
			set
			{
				if ((this._ReliefohweightflowColor != value))
				{
					this.OnReliefohweightflowColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefohweightflowColor = value;
					this.SendPropertyChanged("ReliefohweightflowColor");
					this.OnReliefohweightflowColorChanged();
				}
			}
		}
		
		[Column(Storage="_Reliefpressurefactor", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Reliefpressurefactor
		{
			get
			{
				return this._Reliefpressurefactor;
			}
			set
			{
				if ((this._Reliefpressurefactor != value))
				{
					this.OnReliefpressurefactorChanging(value);
					this.SendPropertyChanging();
					this._Reliefpressurefactor = value;
					this.SendPropertyChanged("Reliefpressurefactor");
					this.OnReliefpressurefactorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefpressurefactorColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefpressurefactorColor
		{
			get
			{
				return this._ReliefpressurefactorColor;
			}
			set
			{
				if ((this._ReliefpressurefactorColor != value))
				{
					this.OnReliefpressurefactorColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefpressurefactorColor = value;
					this.SendPropertyChanged("ReliefpressurefactorColor");
					this.OnReliefpressurefactorColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefTemperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefTemperature
		{
			get
			{
				return this._ReliefTemperature;
			}
			set
			{
				if ((this._ReliefTemperature != value))
				{
					this.OnReliefTemperatureChanging(value);
					this.SendPropertyChanging();
					this._ReliefTemperature = value;
					this.SendPropertyChanged("ReliefTemperature");
					this.OnReliefTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_RelieftemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string RelieftemperatureColor
		{
			get
			{
				return this._RelieftemperatureColor;
			}
			set
			{
				if ((this._RelieftemperatureColor != value))
				{
					this.OnRelieftemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._RelieftemperatureColor = value;
					this.SendPropertyChanged("RelieftemperatureColor");
					this.OnRelieftemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_Valvenumber", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Valvenumber
		{
			get
			{
				return this._Valvenumber;
			}
			set
			{
				if ((this._Valvenumber != value))
				{
					this.OnValvenumberChanging(value);
					this.SendPropertyChanging();
					this._Valvenumber = value;
					this.SendPropertyChanged("Valvenumber");
					this.OnValvenumberChanged();
				}
			}
		}
		
		[Column(Storage="_ValvenumberColor", UpdateCheck=UpdateCheck.Never)]
		public string ValvenumberColor
		{
			get
			{
				return this._ValvenumberColor;
			}
			set
			{
				if ((this._ValvenumberColor != value))
				{
					this.OnValvenumberColorChanging(value);
					this.SendPropertyChanging();
					this._ValvenumberColor = value;
					this.SendPropertyChanged("ValvenumberColor");
					this.OnValvenumberColorChanged();
				}
			}
		}
		
		[Column(Storage="_Valvetype", UpdateCheck=UpdateCheck.Never)]
		public string Valvetype
		{
			get
			{
				return this._Valvetype;
			}
			set
			{
				if ((this._Valvetype != value))
				{
					this.OnValvetypeChanging(value);
					this.SendPropertyChanging();
					this._Valvetype = value;
					this.SendPropertyChanged("Valvetype");
					this.OnValvetypeChanged();
				}
			}
		}
		
		[Column(Storage="_ValvetypeColor", UpdateCheck=UpdateCheck.Never)]
		public string ValvetypeColor
		{
			get
			{
				return this._ValvetypeColor;
			}
			set
			{
				if ((this._ValvetypeColor != value))
				{
					this.OnValvetypeColorChanging(value);
					this.SendPropertyChanging();
					this._ValvetypeColor = value;
					this.SendPropertyChanged("ValvetypeColor");
					this.OnValvetypeColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbPUsummary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private string _PlantName;
		
		private string _ProcessUnitName;
		
		private string _Remark;
		
		private System.Nullable<int> _UnitID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPlantNameChanging(string value);
    partial void OnPlantNameChanged();
    partial void OnProcessUnitNameChanging(string value);
    partial void OnProcessUnitNameChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnUnitIDChanging(System.Nullable<int> value);
    partial void OnUnitIDChanged();
    #endregion
		
		public tbPUsummary()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_PlantName", UpdateCheck=UpdateCheck.Never)]
		public string PlantName
		{
			get
			{
				return this._PlantName;
			}
			set
			{
				if ((this._PlantName != value))
				{
					this.OnPlantNameChanging(value);
					this.SendPropertyChanging();
					this._PlantName = value;
					this.SendPropertyChanged("PlantName");
					this.OnPlantNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProcessUnitName", UpdateCheck=UpdateCheck.Never)]
		public string ProcessUnitName
		{
			get
			{
				return this._ProcessUnitName;
			}
			set
			{
				if ((this._ProcessUnitName != value))
				{
					this.OnProcessUnitNameChanging(value);
					this.SendPropertyChanging();
					this._ProcessUnitName = value;
					this.SendPropertyChanged("ProcessUnitName");
					this.OnProcessUnitNameChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", UpdateCheck=UpdateCheck.Never)]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_UnitID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbReactorLoopCommon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _EffluentTemperature;
		
		private string _EffluenttemperatureColor;
		
		private string _EffluentTemperature2;
		
		private string _Effluenttemperature2Color;
		
		private bool _IsSolved;
		
		private string _IssolvedColor;
		
		private System.Nullable<double> _MaxGasRate;
		
		private string _MaxgasrateColor;
		
		private System.Nullable<int> _ReactorType;
		
		private string _ReactortypeColor;
		
		private System.Nullable<double> _ReliefCpCv;
		
		private string _ReliefcpcvColor;
		
		private System.Nullable<double> _ReliefLoad;
		
		private string _ReliefloadColor;
		
		private System.Nullable<double> _ReliefMW;
		
		private string _ReliefmwColor;
		
		private System.Nullable<double> _ReliefPressure;
		
		private string _ReliefpressureColor;
		
		private System.Nullable<double> _ReliefTemperature;
		
		private string _RelieftemperatureColor;
		
		private System.Nullable<double> _ReliefZ;
		
		private string _ReliefzColor;
		
		private System.Nullable<int> _ScenarioID;
		
		private string _ScenarioidColor;
		
		private System.Nullable<double> _TotalPurgeRate;
		
		private string _TotalpurgerateColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEffluentTemperatureChanging(System.Nullable<double> value);
    partial void OnEffluentTemperatureChanged();
    partial void OnEffluenttemperatureColorChanging(string value);
    partial void OnEffluenttemperatureColorChanged();
    partial void OnEffluentTemperature2Changing(string value);
    partial void OnEffluentTemperature2Changed();
    partial void OnEffluenttemperature2ColorChanging(string value);
    partial void OnEffluenttemperature2ColorChanged();
    partial void OnIsSolvedChanging(bool value);
    partial void OnIsSolvedChanged();
    partial void OnIssolvedColorChanging(string value);
    partial void OnIssolvedColorChanged();
    partial void OnMaxGasRateChanging(System.Nullable<double> value);
    partial void OnMaxGasRateChanged();
    partial void OnMaxgasrateColorChanging(string value);
    partial void OnMaxgasrateColorChanged();
    partial void OnReactorTypeChanging(System.Nullable<int> value);
    partial void OnReactorTypeChanged();
    partial void OnReactortypeColorChanging(string value);
    partial void OnReactortypeColorChanged();
    partial void OnReliefCpCvChanging(System.Nullable<double> value);
    partial void OnReliefCpCvChanged();
    partial void OnReliefcpcvColorChanging(string value);
    partial void OnReliefcpcvColorChanged();
    partial void OnReliefLoadChanging(System.Nullable<double> value);
    partial void OnReliefLoadChanged();
    partial void OnReliefloadColorChanging(string value);
    partial void OnReliefloadColorChanged();
    partial void OnReliefMWChanging(System.Nullable<double> value);
    partial void OnReliefMWChanged();
    partial void OnReliefmwColorChanging(string value);
    partial void OnReliefmwColorChanged();
    partial void OnReliefPressureChanging(System.Nullable<double> value);
    partial void OnReliefPressureChanged();
    partial void OnReliefpressureColorChanging(string value);
    partial void OnReliefpressureColorChanged();
    partial void OnReliefTemperatureChanging(System.Nullable<double> value);
    partial void OnReliefTemperatureChanged();
    partial void OnRelieftemperatureColorChanging(string value);
    partial void OnRelieftemperatureColorChanged();
    partial void OnReliefZChanging(System.Nullable<double> value);
    partial void OnReliefZChanged();
    partial void OnReliefzColorChanging(string value);
    partial void OnReliefzColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnScenarioidColorChanging(string value);
    partial void OnScenarioidColorChanged();
    partial void OnTotalPurgeRateChanging(System.Nullable<double> value);
    partial void OnTotalPurgeRateChanged();
    partial void OnTotalpurgerateColorChanging(string value);
    partial void OnTotalpurgerateColorChanged();
    #endregion
		
		public tbReactorLoopCommon()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_EffluentTemperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> EffluentTemperature
		{
			get
			{
				return this._EffluentTemperature;
			}
			set
			{
				if ((this._EffluentTemperature != value))
				{
					this.OnEffluentTemperatureChanging(value);
					this.SendPropertyChanging();
					this._EffluentTemperature = value;
					this.SendPropertyChanged("EffluentTemperature");
					this.OnEffluentTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_EffluenttemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string EffluenttemperatureColor
		{
			get
			{
				return this._EffluenttemperatureColor;
			}
			set
			{
				if ((this._EffluenttemperatureColor != value))
				{
					this.OnEffluenttemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._EffluenttemperatureColor = value;
					this.SendPropertyChanged("EffluenttemperatureColor");
					this.OnEffluenttemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_EffluentTemperature2", UpdateCheck=UpdateCheck.Never)]
		public string EffluentTemperature2
		{
			get
			{
				return this._EffluentTemperature2;
			}
			set
			{
				if ((this._EffluentTemperature2 != value))
				{
					this.OnEffluentTemperature2Changing(value);
					this.SendPropertyChanging();
					this._EffluentTemperature2 = value;
					this.SendPropertyChanged("EffluentTemperature2");
					this.OnEffluentTemperature2Changed();
				}
			}
		}
		
		[Column(Storage="_Effluenttemperature2Color", UpdateCheck=UpdateCheck.Never)]
		public string Effluenttemperature2Color
		{
			get
			{
				return this._Effluenttemperature2Color;
			}
			set
			{
				if ((this._Effluenttemperature2Color != value))
				{
					this.OnEffluenttemperature2ColorChanging(value);
					this.SendPropertyChanging();
					this._Effluenttemperature2Color = value;
					this.SendPropertyChanged("Effluenttemperature2Color");
					this.OnEffluenttemperature2ColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsSolved", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsSolved
		{
			get
			{
				return this._IsSolved;
			}
			set
			{
				if ((this._IsSolved != value))
				{
					this.OnIsSolvedChanging(value);
					this.SendPropertyChanging();
					this._IsSolved = value;
					this.SendPropertyChanged("IsSolved");
					this.OnIsSolvedChanged();
				}
			}
		}
		
		[Column(Storage="_IssolvedColor", UpdateCheck=UpdateCheck.Never)]
		public string IssolvedColor
		{
			get
			{
				return this._IssolvedColor;
			}
			set
			{
				if ((this._IssolvedColor != value))
				{
					this.OnIssolvedColorChanging(value);
					this.SendPropertyChanging();
					this._IssolvedColor = value;
					this.SendPropertyChanged("IssolvedColor");
					this.OnIssolvedColorChanged();
				}
			}
		}
		
		[Column(Storage="_MaxGasRate", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> MaxGasRate
		{
			get
			{
				return this._MaxGasRate;
			}
			set
			{
				if ((this._MaxGasRate != value))
				{
					this.OnMaxGasRateChanging(value);
					this.SendPropertyChanging();
					this._MaxGasRate = value;
					this.SendPropertyChanged("MaxGasRate");
					this.OnMaxGasRateChanged();
				}
			}
		}
		
		[Column(Storage="_MaxgasrateColor", UpdateCheck=UpdateCheck.Never)]
		public string MaxgasrateColor
		{
			get
			{
				return this._MaxgasrateColor;
			}
			set
			{
				if ((this._MaxgasrateColor != value))
				{
					this.OnMaxgasrateColorChanging(value);
					this.SendPropertyChanging();
					this._MaxgasrateColor = value;
					this.SendPropertyChanged("MaxgasrateColor");
					this.OnMaxgasrateColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReactorType", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ReactorType
		{
			get
			{
				return this._ReactorType;
			}
			set
			{
				if ((this._ReactorType != value))
				{
					this.OnReactorTypeChanging(value);
					this.SendPropertyChanging();
					this._ReactorType = value;
					this.SendPropertyChanged("ReactorType");
					this.OnReactorTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ReactortypeColor", UpdateCheck=UpdateCheck.Never)]
		public string ReactortypeColor
		{
			get
			{
				return this._ReactortypeColor;
			}
			set
			{
				if ((this._ReactortypeColor != value))
				{
					this.OnReactortypeColorChanging(value);
					this.SendPropertyChanging();
					this._ReactortypeColor = value;
					this.SendPropertyChanged("ReactortypeColor");
					this.OnReactortypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefCpCv", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefCpCv
		{
			get
			{
				return this._ReliefCpCv;
			}
			set
			{
				if ((this._ReliefCpCv != value))
				{
					this.OnReliefCpCvChanging(value);
					this.SendPropertyChanging();
					this._ReliefCpCv = value;
					this.SendPropertyChanged("ReliefCpCv");
					this.OnReliefCpCvChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefcpcvColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefcpcvColor
		{
			get
			{
				return this._ReliefcpcvColor;
			}
			set
			{
				if ((this._ReliefcpcvColor != value))
				{
					this.OnReliefcpcvColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefcpcvColor = value;
					this.SendPropertyChanged("ReliefcpcvColor");
					this.OnReliefcpcvColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefLoad", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefLoad
		{
			get
			{
				return this._ReliefLoad;
			}
			set
			{
				if ((this._ReliefLoad != value))
				{
					this.OnReliefLoadChanging(value);
					this.SendPropertyChanging();
					this._ReliefLoad = value;
					this.SendPropertyChanged("ReliefLoad");
					this.OnReliefLoadChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefloadColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefloadColor
		{
			get
			{
				return this._ReliefloadColor;
			}
			set
			{
				if ((this._ReliefloadColor != value))
				{
					this.OnReliefloadColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefloadColor = value;
					this.SendPropertyChanged("ReliefloadColor");
					this.OnReliefloadColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefMW", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefMW
		{
			get
			{
				return this._ReliefMW;
			}
			set
			{
				if ((this._ReliefMW != value))
				{
					this.OnReliefMWChanging(value);
					this.SendPropertyChanging();
					this._ReliefMW = value;
					this.SendPropertyChanged("ReliefMW");
					this.OnReliefMWChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefmwColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefmwColor
		{
			get
			{
				return this._ReliefmwColor;
			}
			set
			{
				if ((this._ReliefmwColor != value))
				{
					this.OnReliefmwColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefmwColor = value;
					this.SendPropertyChanged("ReliefmwColor");
					this.OnReliefmwColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefPressure
		{
			get
			{
				return this._ReliefPressure;
			}
			set
			{
				if ((this._ReliefPressure != value))
				{
					this.OnReliefPressureChanging(value);
					this.SendPropertyChanging();
					this._ReliefPressure = value;
					this.SendPropertyChanged("ReliefPressure");
					this.OnReliefPressureChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefpressureColor
		{
			get
			{
				return this._ReliefpressureColor;
			}
			set
			{
				if ((this._ReliefpressureColor != value))
				{
					this.OnReliefpressureColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefpressureColor = value;
					this.SendPropertyChanged("ReliefpressureColor");
					this.OnReliefpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefTemperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefTemperature
		{
			get
			{
				return this._ReliefTemperature;
			}
			set
			{
				if ((this._ReliefTemperature != value))
				{
					this.OnReliefTemperatureChanging(value);
					this.SendPropertyChanging();
					this._ReliefTemperature = value;
					this.SendPropertyChanged("ReliefTemperature");
					this.OnReliefTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_RelieftemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string RelieftemperatureColor
		{
			get
			{
				return this._RelieftemperatureColor;
			}
			set
			{
				if ((this._RelieftemperatureColor != value))
				{
					this.OnRelieftemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._RelieftemperatureColor = value;
					this.SendPropertyChanged("RelieftemperatureColor");
					this.OnRelieftemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefZ", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefZ
		{
			get
			{
				return this._ReliefZ;
			}
			set
			{
				if ((this._ReliefZ != value))
				{
					this.OnReliefZChanging(value);
					this.SendPropertyChanging();
					this._ReliefZ = value;
					this.SendPropertyChanged("ReliefZ");
					this.OnReliefZChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefzColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefzColor
		{
			get
			{
				return this._ReliefzColor;
			}
			set
			{
				if ((this._ReliefzColor != value))
				{
					this.OnReliefzColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefzColor = value;
					this.SendPropertyChanged("ReliefzColor");
					this.OnReliefzColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioidColor", UpdateCheck=UpdateCheck.Never)]
		public string ScenarioidColor
		{
			get
			{
				return this._ScenarioidColor;
			}
			set
			{
				if ((this._ScenarioidColor != value))
				{
					this.OnScenarioidColorChanging(value);
					this.SendPropertyChanging();
					this._ScenarioidColor = value;
					this.SendPropertyChanged("ScenarioidColor");
					this.OnScenarioidColorChanged();
				}
			}
		}
		
		[Column(Storage="_TotalPurgeRate", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> TotalPurgeRate
		{
			get
			{
				return this._TotalPurgeRate;
			}
			set
			{
				if ((this._TotalPurgeRate != value))
				{
					this.OnTotalPurgeRateChanging(value);
					this.SendPropertyChanging();
					this._TotalPurgeRate = value;
					this.SendPropertyChanged("TotalPurgeRate");
					this.OnTotalPurgeRateChanged();
				}
			}
		}
		
		[Column(Storage="_TotalpurgerateColor", UpdateCheck=UpdateCheck.Never)]
		public string TotalpurgerateColor
		{
			get
			{
				return this._TotalpurgerateColor;
			}
			set
			{
				if ((this._TotalpurgerateColor != value))
				{
					this.OnTotalpurgerateColorChanging(value);
					this.SendPropertyChanging();
					this._TotalpurgerateColor = value;
					this.SendPropertyChanged("TotalpurgerateColor");
					this.OnTotalpurgerateColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbReactorLoopDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _DetailInfo;
		
		private string _DetailinfoColor;
		
		private System.Nullable<int> _DetailType;
		
		private System.Nullable<short> _ReactorLoopID;
		
		private string _ReactorloopidColor;
		
		private System.Nullable<short> _ReactorType;
		
		private string _ReactortypeColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDetailInfoChanging(string value);
    partial void OnDetailInfoChanged();
    partial void OnDetailinfoColorChanging(string value);
    partial void OnDetailinfoColorChanged();
    partial void OnDetailTypeChanging(System.Nullable<int> value);
    partial void OnDetailTypeChanged();
    partial void OnReactorLoopIDChanging(System.Nullable<short> value);
    partial void OnReactorLoopIDChanged();
    partial void OnReactorloopidColorChanging(string value);
    partial void OnReactorloopidColorChanged();
    partial void OnReactorTypeChanging(System.Nullable<short> value);
    partial void OnReactorTypeChanged();
    partial void OnReactortypeColorChanging(string value);
    partial void OnReactortypeColorChanged();
    #endregion
		
		public tbReactorLoopDetail()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DetailInfo", UpdateCheck=UpdateCheck.Never)]
		public string DetailInfo
		{
			get
			{
				return this._DetailInfo;
			}
			set
			{
				if ((this._DetailInfo != value))
				{
					this.OnDetailInfoChanging(value);
					this.SendPropertyChanging();
					this._DetailInfo = value;
					this.SendPropertyChanged("DetailInfo");
					this.OnDetailInfoChanged();
				}
			}
		}
		
		[Column(Storage="_DetailinfoColor", UpdateCheck=UpdateCheck.Never)]
		public string DetailinfoColor
		{
			get
			{
				return this._DetailinfoColor;
			}
			set
			{
				if ((this._DetailinfoColor != value))
				{
					this.OnDetailinfoColorChanging(value);
					this.SendPropertyChanging();
					this._DetailinfoColor = value;
					this.SendPropertyChanged("DetailinfoColor");
					this.OnDetailinfoColorChanged();
				}
			}
		}
		
		[Column(Storage="_DetailType", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DetailType
		{
			get
			{
				return this._DetailType;
			}
			set
			{
				if ((this._DetailType != value))
				{
					this.OnDetailTypeChanging(value);
					this.SendPropertyChanging();
					this._DetailType = value;
					this.SendPropertyChanged("DetailType");
					this.OnDetailTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ReactorLoopID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> ReactorLoopID
		{
			get
			{
				return this._ReactorLoopID;
			}
			set
			{
				if ((this._ReactorLoopID != value))
				{
					this.OnReactorLoopIDChanging(value);
					this.SendPropertyChanging();
					this._ReactorLoopID = value;
					this.SendPropertyChanged("ReactorLoopID");
					this.OnReactorLoopIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReactorloopidColor", UpdateCheck=UpdateCheck.Never)]
		public string ReactorloopidColor
		{
			get
			{
				return this._ReactorloopidColor;
			}
			set
			{
				if ((this._ReactorloopidColor != value))
				{
					this.OnReactorloopidColorChanging(value);
					this.SendPropertyChanging();
					this._ReactorloopidColor = value;
					this.SendPropertyChanged("ReactorloopidColor");
					this.OnReactorloopidColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReactorType", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> ReactorType
		{
			get
			{
				return this._ReactorType;
			}
			set
			{
				if ((this._ReactorType != value))
				{
					this.OnReactorTypeChanging(value);
					this.SendPropertyChanging();
					this._ReactorType = value;
					this.SendPropertyChanged("ReactorType");
					this.OnReactorTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ReactortypeColor", UpdateCheck=UpdateCheck.Never)]
		public string ReactortypeColor
		{
			get
			{
				return this._ReactortypeColor;
			}
			set
			{
				if ((this._ReactortypeColor != value))
				{
					this.OnReactortypeColorChanging(value);
					this.SendPropertyChanging();
					this._ReactortypeColor = value;
					this.SendPropertyChanged("ReactortypeColor");
					this.OnReactortypeColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbReactorLoopEqDiff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _CurrentDuty;
		
		private System.Nullable<int> _Diff;
		
		private string _EqName;
		
		private string _EqType;
		
		private System.Nullable<double> _OrginDuty;
		
		private System.Nullable<int> _ReactorLoopID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCurrentDutyChanging(System.Nullable<double> value);
    partial void OnCurrentDutyChanged();
    partial void OnDiffChanging(System.Nullable<int> value);
    partial void OnDiffChanged();
    partial void OnEqNameChanging(string value);
    partial void OnEqNameChanged();
    partial void OnEqTypeChanging(string value);
    partial void OnEqTypeChanged();
    partial void OnOrginDutyChanging(System.Nullable<double> value);
    partial void OnOrginDutyChanged();
    partial void OnReactorLoopIDChanging(System.Nullable<int> value);
    partial void OnReactorLoopIDChanged();
    #endregion
		
		public tbReactorLoopEqDiff()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentDuty", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> CurrentDuty
		{
			get
			{
				return this._CurrentDuty;
			}
			set
			{
				if ((this._CurrentDuty != value))
				{
					this.OnCurrentDutyChanging(value);
					this.SendPropertyChanging();
					this._CurrentDuty = value;
					this.SendPropertyChanged("CurrentDuty");
					this.OnCurrentDutyChanged();
				}
			}
		}
		
		[Column(Storage="_Diff", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Diff
		{
			get
			{
				return this._Diff;
			}
			set
			{
				if ((this._Diff != value))
				{
					this.OnDiffChanging(value);
					this.SendPropertyChanging();
					this._Diff = value;
					this.SendPropertyChanged("Diff");
					this.OnDiffChanged();
				}
			}
		}
		
		[Column(Storage="_EqName", UpdateCheck=UpdateCheck.Never)]
		public string EqName
		{
			get
			{
				return this._EqName;
			}
			set
			{
				if ((this._EqName != value))
				{
					this.OnEqNameChanging(value);
					this.SendPropertyChanging();
					this._EqName = value;
					this.SendPropertyChanged("EqName");
					this.OnEqNameChanged();
				}
			}
		}
		
		[Column(Storage="_EqType", UpdateCheck=UpdateCheck.Never)]
		public string EqType
		{
			get
			{
				return this._EqType;
			}
			set
			{
				if ((this._EqType != value))
				{
					this.OnEqTypeChanging(value);
					this.SendPropertyChanging();
					this._EqType = value;
					this.SendPropertyChanged("EqType");
					this.OnEqTypeChanged();
				}
			}
		}
		
		[Column(Storage="_OrginDuty", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> OrginDuty
		{
			get
			{
				return this._OrginDuty;
			}
			set
			{
				if ((this._OrginDuty != value))
				{
					this.OnOrginDutyChanging(value);
					this.SendPropertyChanging();
					this._OrginDuty = value;
					this.SendPropertyChanged("OrginDuty");
					this.OnOrginDutyChanged();
				}
			}
		}
		
		[Column(Storage="_ReactorLoopID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ReactorLoopID
		{
			get
			{
				return this._ReactorLoopID;
			}
			set
			{
				if ((this._ReactorLoopID != value))
				{
					this.OnReactorLoopIDChanging(value);
					this.SendPropertyChanging();
					this._ReactorLoopID = value;
					this.SendPropertyChanged("ReactorLoopID");
					this.OnReactorLoopIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbReboilerPinch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _Area;
		
		private string _AreaColor;
		
		private System.Nullable<double> _ColdTIn;
		
		private string _ColdtinColor;
		
		private System.Nullable<double> _ColdTout;
		
		private string _ColdtoutColor;
		
		private System.Nullable<int> _DetailID;
		
		private string _DetailidColor;
		
		private System.Nullable<double> _Duty;
		
		private string _DutyColor;
		
		private System.Nullable<double> _Factor;
		
		private string _FactorColor;
		
		private System.Nullable<double> _HeatTin;
		
		private string _HeattinColor;
		
		private System.Nullable<double> _HeatTout;
		
		private string _HeattoutColor;
		
		private bool _IsHotStreamInProII;
		
		private string _IshotstreaminproiiColor;
		
		private bool _IsPinch;
		
		private string _IspinchColor;
		
		private bool _IsUseFlowStop;
		
		private string _IsuseflowstopColor;
		
		private System.Nullable<double> _Qrqn;
		
		private string _QrqnColor;
		
		private System.Nullable<double> _ReliefColdtout;
		
		private string _ReliefcoldtoutColor;
		
		private System.Nullable<double> _ReliefDuty;
		
		private string _ReliefdutyColor;
		
		private System.Nullable<double> _ReliefHeatTin;
		
		private string _ReliefheattinColor;
		
		private string _SourceType;
		
		private string _SourcetypeColor;
		
		private string _StreamName;
		
		private string _StreamnameColor;
		
		private System.Nullable<double> _SupplyHeadPressure;
		
		private string _SupplyheadpressureColor;
		
		private System.Nullable<double> _TotalCount;
		
		private string _TotalcountColor;
		
		private System.Nullable<int> _TowerScenarioHXID;
		
		private string _TowerscenariohxidColor;
		
		private System.Nullable<double> _UClean;
		
		private string _UcleanColor;
		
		private System.Nullable<double> _UDesign;
		
		private string _UdesignColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAreaChanging(System.Nullable<double> value);
    partial void OnAreaChanged();
    partial void OnAreaColorChanging(string value);
    partial void OnAreaColorChanged();
    partial void OnColdTInChanging(System.Nullable<double> value);
    partial void OnColdTInChanged();
    partial void OnColdtinColorChanging(string value);
    partial void OnColdtinColorChanged();
    partial void OnColdToutChanging(System.Nullable<double> value);
    partial void OnColdToutChanged();
    partial void OnColdtoutColorChanging(string value);
    partial void OnColdtoutColorChanged();
    partial void OnDetailIDChanging(System.Nullable<int> value);
    partial void OnDetailIDChanged();
    partial void OnDetailidColorChanging(string value);
    partial void OnDetailidColorChanged();
    partial void OnDutyChanging(System.Nullable<double> value);
    partial void OnDutyChanged();
    partial void OnDutyColorChanging(string value);
    partial void OnDutyColorChanged();
    partial void OnFactorChanging(System.Nullable<double> value);
    partial void OnFactorChanged();
    partial void OnFactorColorChanging(string value);
    partial void OnFactorColorChanged();
    partial void OnHeatTinChanging(System.Nullable<double> value);
    partial void OnHeatTinChanged();
    partial void OnHeattinColorChanging(string value);
    partial void OnHeattinColorChanged();
    partial void OnHeatToutChanging(System.Nullable<double> value);
    partial void OnHeatToutChanged();
    partial void OnHeattoutColorChanging(string value);
    partial void OnHeattoutColorChanged();
    partial void OnIsHotStreamInProIIChanging(bool value);
    partial void OnIsHotStreamInProIIChanged();
    partial void OnIshotstreaminproiiColorChanging(string value);
    partial void OnIshotstreaminproiiColorChanged();
    partial void OnIsPinchChanging(bool value);
    partial void OnIsPinchChanged();
    partial void OnIspinchColorChanging(string value);
    partial void OnIspinchColorChanged();
    partial void OnIsUseFlowStopChanging(bool value);
    partial void OnIsUseFlowStopChanged();
    partial void OnIsuseflowstopColorChanging(string value);
    partial void OnIsuseflowstopColorChanged();
    partial void OnQrqnChanging(System.Nullable<double> value);
    partial void OnQrqnChanged();
    partial void OnQrqnColorChanging(string value);
    partial void OnQrqnColorChanged();
    partial void OnReliefColdtoutChanging(System.Nullable<double> value);
    partial void OnReliefColdtoutChanged();
    partial void OnReliefcoldtoutColorChanging(string value);
    partial void OnReliefcoldtoutColorChanged();
    partial void OnReliefDutyChanging(System.Nullable<double> value);
    partial void OnReliefDutyChanged();
    partial void OnReliefdutyColorChanging(string value);
    partial void OnReliefdutyColorChanged();
    partial void OnReliefHeatTinChanging(System.Nullable<double> value);
    partial void OnReliefHeatTinChanged();
    partial void OnReliefheattinColorChanging(string value);
    partial void OnReliefheattinColorChanged();
    partial void OnSourceTypeChanging(string value);
    partial void OnSourceTypeChanged();
    partial void OnSourcetypeColorChanging(string value);
    partial void OnSourcetypeColorChanged();
    partial void OnStreamNameChanging(string value);
    partial void OnStreamNameChanged();
    partial void OnStreamnameColorChanging(string value);
    partial void OnStreamnameColorChanged();
    partial void OnSupplyHeadPressureChanging(System.Nullable<double> value);
    partial void OnSupplyHeadPressureChanged();
    partial void OnSupplyheadpressureColorChanging(string value);
    partial void OnSupplyheadpressureColorChanged();
    partial void OnTotalCountChanging(System.Nullable<double> value);
    partial void OnTotalCountChanged();
    partial void OnTotalcountColorChanging(string value);
    partial void OnTotalcountColorChanged();
    partial void OnTowerScenarioHXIDChanging(System.Nullable<int> value);
    partial void OnTowerScenarioHXIDChanged();
    partial void OnTowerscenariohxidColorChanging(string value);
    partial void OnTowerscenariohxidColorChanged();
    partial void OnUCleanChanging(System.Nullable<double> value);
    partial void OnUCleanChanged();
    partial void OnUcleanColorChanging(string value);
    partial void OnUcleanColorChanged();
    partial void OnUDesignChanging(System.Nullable<double> value);
    partial void OnUDesignChanged();
    partial void OnUdesignColorChanging(string value);
    partial void OnUdesignColorChanged();
    #endregion
		
		public tbReboilerPinch()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Area", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[Column(Storage="_AreaColor", UpdateCheck=UpdateCheck.Never)]
		public string AreaColor
		{
			get
			{
				return this._AreaColor;
			}
			set
			{
				if ((this._AreaColor != value))
				{
					this.OnAreaColorChanging(value);
					this.SendPropertyChanging();
					this._AreaColor = value;
					this.SendPropertyChanged("AreaColor");
					this.OnAreaColorChanged();
				}
			}
		}
		
		[Column(Storage="_ColdTIn", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ColdTIn
		{
			get
			{
				return this._ColdTIn;
			}
			set
			{
				if ((this._ColdTIn != value))
				{
					this.OnColdTInChanging(value);
					this.SendPropertyChanging();
					this._ColdTIn = value;
					this.SendPropertyChanged("ColdTIn");
					this.OnColdTInChanged();
				}
			}
		}
		
		[Column(Storage="_ColdtinColor", UpdateCheck=UpdateCheck.Never)]
		public string ColdtinColor
		{
			get
			{
				return this._ColdtinColor;
			}
			set
			{
				if ((this._ColdtinColor != value))
				{
					this.OnColdtinColorChanging(value);
					this.SendPropertyChanging();
					this._ColdtinColor = value;
					this.SendPropertyChanged("ColdtinColor");
					this.OnColdtinColorChanged();
				}
			}
		}
		
		[Column(Storage="_ColdTout", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ColdTout
		{
			get
			{
				return this._ColdTout;
			}
			set
			{
				if ((this._ColdTout != value))
				{
					this.OnColdToutChanging(value);
					this.SendPropertyChanging();
					this._ColdTout = value;
					this.SendPropertyChanged("ColdTout");
					this.OnColdToutChanged();
				}
			}
		}
		
		[Column(Storage="_ColdtoutColor", UpdateCheck=UpdateCheck.Never)]
		public string ColdtoutColor
		{
			get
			{
				return this._ColdtoutColor;
			}
			set
			{
				if ((this._ColdtoutColor != value))
				{
					this.OnColdtoutColorChanging(value);
					this.SendPropertyChanging();
					this._ColdtoutColor = value;
					this.SendPropertyChanged("ColdtoutColor");
					this.OnColdtoutColorChanged();
				}
			}
		}
		
		[Column(Storage="_DetailID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[Column(Storage="_DetailidColor", UpdateCheck=UpdateCheck.Never)]
		public string DetailidColor
		{
			get
			{
				return this._DetailidColor;
			}
			set
			{
				if ((this._DetailidColor != value))
				{
					this.OnDetailidColorChanging(value);
					this.SendPropertyChanging();
					this._DetailidColor = value;
					this.SendPropertyChanged("DetailidColor");
					this.OnDetailidColorChanged();
				}
			}
		}
		
		[Column(Storage="_Duty", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Duty
		{
			get
			{
				return this._Duty;
			}
			set
			{
				if ((this._Duty != value))
				{
					this.OnDutyChanging(value);
					this.SendPropertyChanging();
					this._Duty = value;
					this.SendPropertyChanged("Duty");
					this.OnDutyChanged();
				}
			}
		}
		
		[Column(Storage="_DutyColor", UpdateCheck=UpdateCheck.Never)]
		public string DutyColor
		{
			get
			{
				return this._DutyColor;
			}
			set
			{
				if ((this._DutyColor != value))
				{
					this.OnDutyColorChanging(value);
					this.SendPropertyChanging();
					this._DutyColor = value;
					this.SendPropertyChanged("DutyColor");
					this.OnDutyColorChanged();
				}
			}
		}
		
		[Column(Storage="_Factor", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Factor
		{
			get
			{
				return this._Factor;
			}
			set
			{
				if ((this._Factor != value))
				{
					this.OnFactorChanging(value);
					this.SendPropertyChanging();
					this._Factor = value;
					this.SendPropertyChanged("Factor");
					this.OnFactorChanged();
				}
			}
		}
		
		[Column(Storage="_FactorColor", UpdateCheck=UpdateCheck.Never)]
		public string FactorColor
		{
			get
			{
				return this._FactorColor;
			}
			set
			{
				if ((this._FactorColor != value))
				{
					this.OnFactorColorChanging(value);
					this.SendPropertyChanging();
					this._FactorColor = value;
					this.SendPropertyChanged("FactorColor");
					this.OnFactorColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeatTin", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> HeatTin
		{
			get
			{
				return this._HeatTin;
			}
			set
			{
				if ((this._HeatTin != value))
				{
					this.OnHeatTinChanging(value);
					this.SendPropertyChanging();
					this._HeatTin = value;
					this.SendPropertyChanged("HeatTin");
					this.OnHeatTinChanged();
				}
			}
		}
		
		[Column(Storage="_HeattinColor", UpdateCheck=UpdateCheck.Never)]
		public string HeattinColor
		{
			get
			{
				return this._HeattinColor;
			}
			set
			{
				if ((this._HeattinColor != value))
				{
					this.OnHeattinColorChanging(value);
					this.SendPropertyChanging();
					this._HeattinColor = value;
					this.SendPropertyChanged("HeattinColor");
					this.OnHeattinColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeatTout", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> HeatTout
		{
			get
			{
				return this._HeatTout;
			}
			set
			{
				if ((this._HeatTout != value))
				{
					this.OnHeatToutChanging(value);
					this.SendPropertyChanging();
					this._HeatTout = value;
					this.SendPropertyChanged("HeatTout");
					this.OnHeatToutChanged();
				}
			}
		}
		
		[Column(Storage="_HeattoutColor", UpdateCheck=UpdateCheck.Never)]
		public string HeattoutColor
		{
			get
			{
				return this._HeattoutColor;
			}
			set
			{
				if ((this._HeattoutColor != value))
				{
					this.OnHeattoutColorChanging(value);
					this.SendPropertyChanging();
					this._HeattoutColor = value;
					this.SendPropertyChanged("HeattoutColor");
					this.OnHeattoutColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsHotStreamInProII", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsHotStreamInProII
		{
			get
			{
				return this._IsHotStreamInProII;
			}
			set
			{
				if ((this._IsHotStreamInProII != value))
				{
					this.OnIsHotStreamInProIIChanging(value);
					this.SendPropertyChanging();
					this._IsHotStreamInProII = value;
					this.SendPropertyChanged("IsHotStreamInProII");
					this.OnIsHotStreamInProIIChanged();
				}
			}
		}
		
		[Column(Storage="_IshotstreaminproiiColor", UpdateCheck=UpdateCheck.Never)]
		public string IshotstreaminproiiColor
		{
			get
			{
				return this._IshotstreaminproiiColor;
			}
			set
			{
				if ((this._IshotstreaminproiiColor != value))
				{
					this.OnIshotstreaminproiiColorChanging(value);
					this.SendPropertyChanging();
					this._IshotstreaminproiiColor = value;
					this.SendPropertyChanged("IshotstreaminproiiColor");
					this.OnIshotstreaminproiiColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsPinch", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsPinch
		{
			get
			{
				return this._IsPinch;
			}
			set
			{
				if ((this._IsPinch != value))
				{
					this.OnIsPinchChanging(value);
					this.SendPropertyChanging();
					this._IsPinch = value;
					this.SendPropertyChanged("IsPinch");
					this.OnIsPinchChanged();
				}
			}
		}
		
		[Column(Storage="_IspinchColor", UpdateCheck=UpdateCheck.Never)]
		public string IspinchColor
		{
			get
			{
				return this._IspinchColor;
			}
			set
			{
				if ((this._IspinchColor != value))
				{
					this.OnIspinchColorChanging(value);
					this.SendPropertyChanging();
					this._IspinchColor = value;
					this.SendPropertyChanged("IspinchColor");
					this.OnIspinchColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsUseFlowStop", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsUseFlowStop
		{
			get
			{
				return this._IsUseFlowStop;
			}
			set
			{
				if ((this._IsUseFlowStop != value))
				{
					this.OnIsUseFlowStopChanging(value);
					this.SendPropertyChanging();
					this._IsUseFlowStop = value;
					this.SendPropertyChanged("IsUseFlowStop");
					this.OnIsUseFlowStopChanged();
				}
			}
		}
		
		[Column(Storage="_IsuseflowstopColor", UpdateCheck=UpdateCheck.Never)]
		public string IsuseflowstopColor
		{
			get
			{
				return this._IsuseflowstopColor;
			}
			set
			{
				if ((this._IsuseflowstopColor != value))
				{
					this.OnIsuseflowstopColorChanging(value);
					this.SendPropertyChanging();
					this._IsuseflowstopColor = value;
					this.SendPropertyChanged("IsuseflowstopColor");
					this.OnIsuseflowstopColorChanged();
				}
			}
		}
		
		[Column(Storage="_Qrqn", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Qrqn
		{
			get
			{
				return this._Qrqn;
			}
			set
			{
				if ((this._Qrqn != value))
				{
					this.OnQrqnChanging(value);
					this.SendPropertyChanging();
					this._Qrqn = value;
					this.SendPropertyChanged("Qrqn");
					this.OnQrqnChanged();
				}
			}
		}
		
		[Column(Storage="_QrqnColor", UpdateCheck=UpdateCheck.Never)]
		public string QrqnColor
		{
			get
			{
				return this._QrqnColor;
			}
			set
			{
				if ((this._QrqnColor != value))
				{
					this.OnQrqnColorChanging(value);
					this.SendPropertyChanging();
					this._QrqnColor = value;
					this.SendPropertyChanged("QrqnColor");
					this.OnQrqnColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefColdtout", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefColdtout
		{
			get
			{
				return this._ReliefColdtout;
			}
			set
			{
				if ((this._ReliefColdtout != value))
				{
					this.OnReliefColdtoutChanging(value);
					this.SendPropertyChanging();
					this._ReliefColdtout = value;
					this.SendPropertyChanged("ReliefColdtout");
					this.OnReliefColdtoutChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefcoldtoutColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefcoldtoutColor
		{
			get
			{
				return this._ReliefcoldtoutColor;
			}
			set
			{
				if ((this._ReliefcoldtoutColor != value))
				{
					this.OnReliefcoldtoutColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefcoldtoutColor = value;
					this.SendPropertyChanged("ReliefcoldtoutColor");
					this.OnReliefcoldtoutColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefDuty", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefDuty
		{
			get
			{
				return this._ReliefDuty;
			}
			set
			{
				if ((this._ReliefDuty != value))
				{
					this.OnReliefDutyChanging(value);
					this.SendPropertyChanging();
					this._ReliefDuty = value;
					this.SendPropertyChanged("ReliefDuty");
					this.OnReliefDutyChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefdutyColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefdutyColor
		{
			get
			{
				return this._ReliefdutyColor;
			}
			set
			{
				if ((this._ReliefdutyColor != value))
				{
					this.OnReliefdutyColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefdutyColor = value;
					this.SendPropertyChanged("ReliefdutyColor");
					this.OnReliefdutyColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefHeatTin", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefHeatTin
		{
			get
			{
				return this._ReliefHeatTin;
			}
			set
			{
				if ((this._ReliefHeatTin != value))
				{
					this.OnReliefHeatTinChanging(value);
					this.SendPropertyChanging();
					this._ReliefHeatTin = value;
					this.SendPropertyChanged("ReliefHeatTin");
					this.OnReliefHeatTinChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefheattinColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefheattinColor
		{
			get
			{
				return this._ReliefheattinColor;
			}
			set
			{
				if ((this._ReliefheattinColor != value))
				{
					this.OnReliefheattinColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefheattinColor = value;
					this.SendPropertyChanged("ReliefheattinColor");
					this.OnReliefheattinColorChanged();
				}
			}
		}
		
		[Column(Storage="_SourceType", UpdateCheck=UpdateCheck.Never)]
		public string SourceType
		{
			get
			{
				return this._SourceType;
			}
			set
			{
				if ((this._SourceType != value))
				{
					this.OnSourceTypeChanging(value);
					this.SendPropertyChanging();
					this._SourceType = value;
					this.SendPropertyChanged("SourceType");
					this.OnSourceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SourcetypeColor", UpdateCheck=UpdateCheck.Never)]
		public string SourcetypeColor
		{
			get
			{
				return this._SourcetypeColor;
			}
			set
			{
				if ((this._SourcetypeColor != value))
				{
					this.OnSourcetypeColorChanging(value);
					this.SendPropertyChanging();
					this._SourcetypeColor = value;
					this.SendPropertyChanged("SourcetypeColor");
					this.OnSourcetypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_StreamName", UpdateCheck=UpdateCheck.Never)]
		public string StreamName
		{
			get
			{
				return this._StreamName;
			}
			set
			{
				if ((this._StreamName != value))
				{
					this.OnStreamNameChanging(value);
					this.SendPropertyChanging();
					this._StreamName = value;
					this.SendPropertyChanged("StreamName");
					this.OnStreamNameChanged();
				}
			}
		}
		
		[Column(Storage="_StreamnameColor", UpdateCheck=UpdateCheck.Never)]
		public string StreamnameColor
		{
			get
			{
				return this._StreamnameColor;
			}
			set
			{
				if ((this._StreamnameColor != value))
				{
					this.OnStreamnameColorChanging(value);
					this.SendPropertyChanging();
					this._StreamnameColor = value;
					this.SendPropertyChanged("StreamnameColor");
					this.OnStreamnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_SupplyHeadPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> SupplyHeadPressure
		{
			get
			{
				return this._SupplyHeadPressure;
			}
			set
			{
				if ((this._SupplyHeadPressure != value))
				{
					this.OnSupplyHeadPressureChanging(value);
					this.SendPropertyChanging();
					this._SupplyHeadPressure = value;
					this.SendPropertyChanged("SupplyHeadPressure");
					this.OnSupplyHeadPressureChanged();
				}
			}
		}
		
		[Column(Storage="_SupplyheadpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string SupplyheadpressureColor
		{
			get
			{
				return this._SupplyheadpressureColor;
			}
			set
			{
				if ((this._SupplyheadpressureColor != value))
				{
					this.OnSupplyheadpressureColorChanging(value);
					this.SendPropertyChanging();
					this._SupplyheadpressureColor = value;
					this.SendPropertyChanged("SupplyheadpressureColor");
					this.OnSupplyheadpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_TotalCount", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> TotalCount
		{
			get
			{
				return this._TotalCount;
			}
			set
			{
				if ((this._TotalCount != value))
				{
					this.OnTotalCountChanging(value);
					this.SendPropertyChanging();
					this._TotalCount = value;
					this.SendPropertyChanged("TotalCount");
					this.OnTotalCountChanged();
				}
			}
		}
		
		[Column(Storage="_TotalcountColor", UpdateCheck=UpdateCheck.Never)]
		public string TotalcountColor
		{
			get
			{
				return this._TotalcountColor;
			}
			set
			{
				if ((this._TotalcountColor != value))
				{
					this.OnTotalcountColorChanging(value);
					this.SendPropertyChanging();
					this._TotalcountColor = value;
					this.SendPropertyChanged("TotalcountColor");
					this.OnTotalcountColorChanged();
				}
			}
		}
		
		[Column(Storage="_TowerScenarioHXID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> TowerScenarioHXID
		{
			get
			{
				return this._TowerScenarioHXID;
			}
			set
			{
				if ((this._TowerScenarioHXID != value))
				{
					this.OnTowerScenarioHXIDChanging(value);
					this.SendPropertyChanging();
					this._TowerScenarioHXID = value;
					this.SendPropertyChanged("TowerScenarioHXID");
					this.OnTowerScenarioHXIDChanged();
				}
			}
		}
		
		[Column(Storage="_TowerscenariohxidColor", UpdateCheck=UpdateCheck.Never)]
		public string TowerscenariohxidColor
		{
			get
			{
				return this._TowerscenariohxidColor;
			}
			set
			{
				if ((this._TowerscenariohxidColor != value))
				{
					this.OnTowerscenariohxidColorChanging(value);
					this.SendPropertyChanging();
					this._TowerscenariohxidColor = value;
					this.SendPropertyChanged("TowerscenariohxidColor");
					this.OnTowerscenariohxidColorChanged();
				}
			}
		}
		
		[Column(Storage="_UClean", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> UClean
		{
			get
			{
				return this._UClean;
			}
			set
			{
				if ((this._UClean != value))
				{
					this.OnUCleanChanging(value);
					this.SendPropertyChanging();
					this._UClean = value;
					this.SendPropertyChanged("UClean");
					this.OnUCleanChanged();
				}
			}
		}
		
		[Column(Storage="_UcleanColor", UpdateCheck=UpdateCheck.Never)]
		public string UcleanColor
		{
			get
			{
				return this._UcleanColor;
			}
			set
			{
				if ((this._UcleanColor != value))
				{
					this.OnUcleanColorChanging(value);
					this.SendPropertyChanging();
					this._UcleanColor = value;
					this.SendPropertyChanged("UcleanColor");
					this.OnUcleanColorChanged();
				}
			}
		}
		
		[Column(Storage="_UDesign", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> UDesign
		{
			get
			{
				return this._UDesign;
			}
			set
			{
				if ((this._UDesign != value))
				{
					this.OnUDesignChanging(value);
					this.SendPropertyChanging();
					this._UDesign = value;
					this.SendPropertyChanged("UDesign");
					this.OnUDesignChanged();
				}
			}
		}
		
		[Column(Storage="_UdesignColor", UpdateCheck=UpdateCheck.Never)]
		public string UdesignColor
		{
			get
			{
				return this._UdesignColor;
			}
			set
			{
				if ((this._UdesignColor != value))
				{
					this.OnUdesignColorChanging(value);
					this.SendPropertyChanging();
					this._UdesignColor = value;
					this.SendPropertyChanged("UdesignColor");
					this.OnUdesignColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbScenario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _DeviceID;
		
		private string _HeatInputModel;
		
		private string _HeatinputmodelColor;
		
		private bool _IsExist;
		
		private string _IsexistColor;
		
		private System.Nullable<double> _Od;
		
		private string _OdColor;
		
		private System.Nullable<double> _ReliefCpCv;
		
		private string _ReliefcpcvColor;
		
		private System.Nullable<double> _ReliefCpCv2;
		
		private string _Reliefcpcv2Color;
		
		private System.Nullable<double> _ReliefLoad;
		
		private string _ReliefloadColor;
		
		private System.Nullable<double> _ReliefLoad2;
		
		private string _Reliefload2Color;
		
		private System.Nullable<double> _ReliefMW;
		
		private string _ReliefmwColor;
		
		private System.Nullable<double> _ReliefMW2;
		
		private string _Reliefmw2Color;
		
		private System.Nullable<double> _ReliefPressure;
		
		private string _ReliefpressureColor;
		
		private System.Nullable<double> _ReliefPressure2;
		
		private string _Reliefpressure2Color;
		
		private System.Nullable<double> _ReliefTemperature;
		
		private string _RelieftemperatureColor;
		
		private System.Nullable<double> _ReliefTemperature2;
		
		private string _Relieftemperature2Color;
		
		private System.Nullable<double> _ReliefZ;
		
		private string _ReliefzColor;
		
		private System.Nullable<double> _ReliefZ2;
		
		private string _Reliefz2Color;
		
		private string _ScenarioName;
		
		private string _ScenarionameColor;
		
		private string _Scenarioname2Color;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDeviceIDChanging(System.Nullable<int> value);
    partial void OnDeviceIDChanged();
    partial void OnHeatInputModelChanging(string value);
    partial void OnHeatInputModelChanged();
    partial void OnHeatinputmodelColorChanging(string value);
    partial void OnHeatinputmodelColorChanged();
    partial void OnIsExistChanging(bool value);
    partial void OnIsExistChanged();
    partial void OnIsexistColorChanging(string value);
    partial void OnIsexistColorChanged();
    partial void OnOdChanging(System.Nullable<double> value);
    partial void OnOdChanged();
    partial void OnOdColorChanging(string value);
    partial void OnOdColorChanged();
    partial void OnReliefCpCvChanging(System.Nullable<double> value);
    partial void OnReliefCpCvChanged();
    partial void OnReliefcpcvColorChanging(string value);
    partial void OnReliefcpcvColorChanged();
    partial void OnReliefCpCv2Changing(System.Nullable<double> value);
    partial void OnReliefCpCv2Changed();
    partial void OnReliefcpcv2ColorChanging(string value);
    partial void OnReliefcpcv2ColorChanged();
    partial void OnReliefLoadChanging(System.Nullable<double> value);
    partial void OnReliefLoadChanged();
    partial void OnReliefloadColorChanging(string value);
    partial void OnReliefloadColorChanged();
    partial void OnReliefLoad2Changing(System.Nullable<double> value);
    partial void OnReliefLoad2Changed();
    partial void OnReliefload2ColorChanging(string value);
    partial void OnReliefload2ColorChanged();
    partial void OnReliefMWChanging(System.Nullable<double> value);
    partial void OnReliefMWChanged();
    partial void OnReliefmwColorChanging(string value);
    partial void OnReliefmwColorChanged();
    partial void OnReliefMW2Changing(System.Nullable<double> value);
    partial void OnReliefMW2Changed();
    partial void OnReliefmw2ColorChanging(string value);
    partial void OnReliefmw2ColorChanged();
    partial void OnReliefPressureChanging(System.Nullable<double> value);
    partial void OnReliefPressureChanged();
    partial void OnReliefpressureColorChanging(string value);
    partial void OnReliefpressureColorChanged();
    partial void OnReliefPressure2Changing(System.Nullable<double> value);
    partial void OnReliefPressure2Changed();
    partial void OnReliefpressure2ColorChanging(string value);
    partial void OnReliefpressure2ColorChanged();
    partial void OnReliefTemperatureChanging(System.Nullable<double> value);
    partial void OnReliefTemperatureChanged();
    partial void OnRelieftemperatureColorChanging(string value);
    partial void OnRelieftemperatureColorChanged();
    partial void OnReliefTemperature2Changing(System.Nullable<double> value);
    partial void OnReliefTemperature2Changed();
    partial void OnRelieftemperature2ColorChanging(string value);
    partial void OnRelieftemperature2ColorChanged();
    partial void OnReliefZChanging(System.Nullable<double> value);
    partial void OnReliefZChanged();
    partial void OnReliefzColorChanging(string value);
    partial void OnReliefzColorChanged();
    partial void OnReliefZ2Changing(System.Nullable<double> value);
    partial void OnReliefZ2Changed();
    partial void OnReliefz2ColorChanging(string value);
    partial void OnReliefz2ColorChanged();
    partial void OnScenarioNameChanging(string value);
    partial void OnScenarioNameChanged();
    partial void OnScenarionameColorChanging(string value);
    partial void OnScenarionameColorChanged();
    partial void OnScenarioname2ColorChanging(string value);
    partial void OnScenarioname2ColorChanged();
    #endregion
		
		public tbScenario()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeatInputModel", UpdateCheck=UpdateCheck.Never)]
		public string HeatInputModel
		{
			get
			{
				return this._HeatInputModel;
			}
			set
			{
				if ((this._HeatInputModel != value))
				{
					this.OnHeatInputModelChanging(value);
					this.SendPropertyChanging();
					this._HeatInputModel = value;
					this.SendPropertyChanged("HeatInputModel");
					this.OnHeatInputModelChanged();
				}
			}
		}
		
		[Column(Storage="_HeatinputmodelColor", UpdateCheck=UpdateCheck.Never)]
		public string HeatinputmodelColor
		{
			get
			{
				return this._HeatinputmodelColor;
			}
			set
			{
				if ((this._HeatinputmodelColor != value))
				{
					this.OnHeatinputmodelColorChanging(value);
					this.SendPropertyChanging();
					this._HeatinputmodelColor = value;
					this.SendPropertyChanged("HeatinputmodelColor");
					this.OnHeatinputmodelColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsExist", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsExist
		{
			get
			{
				return this._IsExist;
			}
			set
			{
				if ((this._IsExist != value))
				{
					this.OnIsExistChanging(value);
					this.SendPropertyChanging();
					this._IsExist = value;
					this.SendPropertyChanged("IsExist");
					this.OnIsExistChanged();
				}
			}
		}
		
		[Column(Storage="_IsexistColor", UpdateCheck=UpdateCheck.Never)]
		public string IsexistColor
		{
			get
			{
				return this._IsexistColor;
			}
			set
			{
				if ((this._IsexistColor != value))
				{
					this.OnIsexistColorChanging(value);
					this.SendPropertyChanging();
					this._IsexistColor = value;
					this.SendPropertyChanged("IsexistColor");
					this.OnIsexistColorChanged();
				}
			}
		}
		
		[Column(Storage="_Od", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Od
		{
			get
			{
				return this._Od;
			}
			set
			{
				if ((this._Od != value))
				{
					this.OnOdChanging(value);
					this.SendPropertyChanging();
					this._Od = value;
					this.SendPropertyChanged("Od");
					this.OnOdChanged();
				}
			}
		}
		
		[Column(Storage="_OdColor", UpdateCheck=UpdateCheck.Never)]
		public string OdColor
		{
			get
			{
				return this._OdColor;
			}
			set
			{
				if ((this._OdColor != value))
				{
					this.OnOdColorChanging(value);
					this.SendPropertyChanging();
					this._OdColor = value;
					this.SendPropertyChanged("OdColor");
					this.OnOdColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefCpCv", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefCpCv
		{
			get
			{
				return this._ReliefCpCv;
			}
			set
			{
				if ((this._ReliefCpCv != value))
				{
					this.OnReliefCpCvChanging(value);
					this.SendPropertyChanging();
					this._ReliefCpCv = value;
					this.SendPropertyChanged("ReliefCpCv");
					this.OnReliefCpCvChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefcpcvColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefcpcvColor
		{
			get
			{
				return this._ReliefcpcvColor;
			}
			set
			{
				if ((this._ReliefcpcvColor != value))
				{
					this.OnReliefcpcvColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefcpcvColor = value;
					this.SendPropertyChanged("ReliefcpcvColor");
					this.OnReliefcpcvColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefCpCv2", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefCpCv2
		{
			get
			{
				return this._ReliefCpCv2;
			}
			set
			{
				if ((this._ReliefCpCv2 != value))
				{
					this.OnReliefCpCv2Changing(value);
					this.SendPropertyChanging();
					this._ReliefCpCv2 = value;
					this.SendPropertyChanged("ReliefCpCv2");
					this.OnReliefCpCv2Changed();
				}
			}
		}
		
		[Column(Storage="_Reliefcpcv2Color", UpdateCheck=UpdateCheck.Never)]
		public string Reliefcpcv2Color
		{
			get
			{
				return this._Reliefcpcv2Color;
			}
			set
			{
				if ((this._Reliefcpcv2Color != value))
				{
					this.OnReliefcpcv2ColorChanging(value);
					this.SendPropertyChanging();
					this._Reliefcpcv2Color = value;
					this.SendPropertyChanged("Reliefcpcv2Color");
					this.OnReliefcpcv2ColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefLoad", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefLoad
		{
			get
			{
				return this._ReliefLoad;
			}
			set
			{
				if ((this._ReliefLoad != value))
				{
					this.OnReliefLoadChanging(value);
					this.SendPropertyChanging();
					this._ReliefLoad = value;
					this.SendPropertyChanged("ReliefLoad");
					this.OnReliefLoadChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefloadColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefloadColor
		{
			get
			{
				return this._ReliefloadColor;
			}
			set
			{
				if ((this._ReliefloadColor != value))
				{
					this.OnReliefloadColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefloadColor = value;
					this.SendPropertyChanged("ReliefloadColor");
					this.OnReliefloadColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefLoad2", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefLoad2
		{
			get
			{
				return this._ReliefLoad2;
			}
			set
			{
				if ((this._ReliefLoad2 != value))
				{
					this.OnReliefLoad2Changing(value);
					this.SendPropertyChanging();
					this._ReliefLoad2 = value;
					this.SendPropertyChanged("ReliefLoad2");
					this.OnReliefLoad2Changed();
				}
			}
		}
		
		[Column(Storage="_Reliefload2Color", UpdateCheck=UpdateCheck.Never)]
		public string Reliefload2Color
		{
			get
			{
				return this._Reliefload2Color;
			}
			set
			{
				if ((this._Reliefload2Color != value))
				{
					this.OnReliefload2ColorChanging(value);
					this.SendPropertyChanging();
					this._Reliefload2Color = value;
					this.SendPropertyChanged("Reliefload2Color");
					this.OnReliefload2ColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefMW", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefMW
		{
			get
			{
				return this._ReliefMW;
			}
			set
			{
				if ((this._ReliefMW != value))
				{
					this.OnReliefMWChanging(value);
					this.SendPropertyChanging();
					this._ReliefMW = value;
					this.SendPropertyChanged("ReliefMW");
					this.OnReliefMWChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefmwColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefmwColor
		{
			get
			{
				return this._ReliefmwColor;
			}
			set
			{
				if ((this._ReliefmwColor != value))
				{
					this.OnReliefmwColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefmwColor = value;
					this.SendPropertyChanged("ReliefmwColor");
					this.OnReliefmwColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefMW2", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefMW2
		{
			get
			{
				return this._ReliefMW2;
			}
			set
			{
				if ((this._ReliefMW2 != value))
				{
					this.OnReliefMW2Changing(value);
					this.SendPropertyChanging();
					this._ReliefMW2 = value;
					this.SendPropertyChanged("ReliefMW2");
					this.OnReliefMW2Changed();
				}
			}
		}
		
		[Column(Storage="_Reliefmw2Color", UpdateCheck=UpdateCheck.Never)]
		public string Reliefmw2Color
		{
			get
			{
				return this._Reliefmw2Color;
			}
			set
			{
				if ((this._Reliefmw2Color != value))
				{
					this.OnReliefmw2ColorChanging(value);
					this.SendPropertyChanging();
					this._Reliefmw2Color = value;
					this.SendPropertyChanged("Reliefmw2Color");
					this.OnReliefmw2ColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefPressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefPressure
		{
			get
			{
				return this._ReliefPressure;
			}
			set
			{
				if ((this._ReliefPressure != value))
				{
					this.OnReliefPressureChanging(value);
					this.SendPropertyChanging();
					this._ReliefPressure = value;
					this.SendPropertyChanged("ReliefPressure");
					this.OnReliefPressureChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefpressureColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefpressureColor
		{
			get
			{
				return this._ReliefpressureColor;
			}
			set
			{
				if ((this._ReliefpressureColor != value))
				{
					this.OnReliefpressureColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefpressureColor = value;
					this.SendPropertyChanged("ReliefpressureColor");
					this.OnReliefpressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefPressure2", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefPressure2
		{
			get
			{
				return this._ReliefPressure2;
			}
			set
			{
				if ((this._ReliefPressure2 != value))
				{
					this.OnReliefPressure2Changing(value);
					this.SendPropertyChanging();
					this._ReliefPressure2 = value;
					this.SendPropertyChanged("ReliefPressure2");
					this.OnReliefPressure2Changed();
				}
			}
		}
		
		[Column(Storage="_Reliefpressure2Color", UpdateCheck=UpdateCheck.Never)]
		public string Reliefpressure2Color
		{
			get
			{
				return this._Reliefpressure2Color;
			}
			set
			{
				if ((this._Reliefpressure2Color != value))
				{
					this.OnReliefpressure2ColorChanging(value);
					this.SendPropertyChanging();
					this._Reliefpressure2Color = value;
					this.SendPropertyChanged("Reliefpressure2Color");
					this.OnReliefpressure2ColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefTemperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefTemperature
		{
			get
			{
				return this._ReliefTemperature;
			}
			set
			{
				if ((this._ReliefTemperature != value))
				{
					this.OnReliefTemperatureChanging(value);
					this.SendPropertyChanging();
					this._ReliefTemperature = value;
					this.SendPropertyChanged("ReliefTemperature");
					this.OnReliefTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_RelieftemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string RelieftemperatureColor
		{
			get
			{
				return this._RelieftemperatureColor;
			}
			set
			{
				if ((this._RelieftemperatureColor != value))
				{
					this.OnRelieftemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._RelieftemperatureColor = value;
					this.SendPropertyChanged("RelieftemperatureColor");
					this.OnRelieftemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefTemperature2", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefTemperature2
		{
			get
			{
				return this._ReliefTemperature2;
			}
			set
			{
				if ((this._ReliefTemperature2 != value))
				{
					this.OnReliefTemperature2Changing(value);
					this.SendPropertyChanging();
					this._ReliefTemperature2 = value;
					this.SendPropertyChanged("ReliefTemperature2");
					this.OnReliefTemperature2Changed();
				}
			}
		}
		
		[Column(Storage="_Relieftemperature2Color", UpdateCheck=UpdateCheck.Never)]
		public string Relieftemperature2Color
		{
			get
			{
				return this._Relieftemperature2Color;
			}
			set
			{
				if ((this._Relieftemperature2Color != value))
				{
					this.OnRelieftemperature2ColorChanging(value);
					this.SendPropertyChanging();
					this._Relieftemperature2Color = value;
					this.SendPropertyChanged("Relieftemperature2Color");
					this.OnRelieftemperature2ColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefZ", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefZ
		{
			get
			{
				return this._ReliefZ;
			}
			set
			{
				if ((this._ReliefZ != value))
				{
					this.OnReliefZChanging(value);
					this.SendPropertyChanging();
					this._ReliefZ = value;
					this.SendPropertyChanged("ReliefZ");
					this.OnReliefZChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefzColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefzColor
		{
			get
			{
				return this._ReliefzColor;
			}
			set
			{
				if ((this._ReliefzColor != value))
				{
					this.OnReliefzColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefzColor = value;
					this.SendPropertyChanged("ReliefzColor");
					this.OnReliefzColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefZ2", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefZ2
		{
			get
			{
				return this._ReliefZ2;
			}
			set
			{
				if ((this._ReliefZ2 != value))
				{
					this.OnReliefZ2Changing(value);
					this.SendPropertyChanging();
					this._ReliefZ2 = value;
					this.SendPropertyChanged("ReliefZ2");
					this.OnReliefZ2Changed();
				}
			}
		}
		
		[Column(Storage="_Reliefz2Color", UpdateCheck=UpdateCheck.Never)]
		public string Reliefz2Color
		{
			get
			{
				return this._Reliefz2Color;
			}
			set
			{
				if ((this._Reliefz2Color != value))
				{
					this.OnReliefz2ColorChanging(value);
					this.SendPropertyChanging();
					this._Reliefz2Color = value;
					this.SendPropertyChanged("Reliefz2Color");
					this.OnReliefz2ColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioName", UpdateCheck=UpdateCheck.Never)]
		public string ScenarioName
		{
			get
			{
				return this._ScenarioName;
			}
			set
			{
				if ((this._ScenarioName != value))
				{
					this.OnScenarioNameChanging(value);
					this.SendPropertyChanging();
					this._ScenarioName = value;
					this.SendPropertyChanged("ScenarioName");
					this.OnScenarioNameChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarionameColor", UpdateCheck=UpdateCheck.Never)]
		public string ScenarionameColor
		{
			get
			{
				return this._ScenarionameColor;
			}
			set
			{
				if ((this._ScenarionameColor != value))
				{
					this.OnScenarionameColorChanging(value);
					this.SendPropertyChanging();
					this._ScenarionameColor = value;
					this.SendPropertyChanged("ScenarionameColor");
					this.OnScenarionameColorChanged();
				}
			}
		}
		
		[Column(Storage="_Scenarioname2Color", UpdateCheck=UpdateCheck.Never)]
		public string Scenarioname2Color
		{
			get
			{
				return this._Scenarioname2Color;
			}
			set
			{
				if ((this._Scenarioname2Color != value))
				{
					this.OnScenarioname2ColorChanging(value);
					this.SendPropertyChanging();
					this._Scenarioname2Color = value;
					this.SendPropertyChanged("Scenarioname2Color");
					this.OnScenarioname2ColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbScenarioHeatSource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _DutyFactor;
		
		private string _DutyfactorColor;
		
		private System.Nullable<int> _HeatSourceID;
		
		private string _HeatsourceidColor;
		
		private string _HeatSourceType;
		
		private bool _IsFB;
		
		private string _IsfbColor;
		
		private bool _IsFired;
		
		private System.Nullable<int> _ScenarioID;
		
		private string _ScenarioidColor;
		
		private System.Nullable<int> _ScenarioStreamID;
		
		private string _ScenariostreamidColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDutyFactorChanging(System.Nullable<double> value);
    partial void OnDutyFactorChanged();
    partial void OnDutyfactorColorChanging(string value);
    partial void OnDutyfactorColorChanged();
    partial void OnHeatSourceIDChanging(System.Nullable<int> value);
    partial void OnHeatSourceIDChanged();
    partial void OnHeatsourceidColorChanging(string value);
    partial void OnHeatsourceidColorChanged();
    partial void OnHeatSourceTypeChanging(string value);
    partial void OnHeatSourceTypeChanged();
    partial void OnIsFBChanging(bool value);
    partial void OnIsFBChanged();
    partial void OnIsfbColorChanging(string value);
    partial void OnIsfbColorChanged();
    partial void OnIsFiredChanging(bool value);
    partial void OnIsFiredChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnScenarioidColorChanging(string value);
    partial void OnScenarioidColorChanged();
    partial void OnScenarioStreamIDChanging(System.Nullable<int> value);
    partial void OnScenarioStreamIDChanged();
    partial void OnScenariostreamidColorChanging(string value);
    partial void OnScenariostreamidColorChanged();
    #endregion
		
		public tbScenarioHeatSource()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DutyFactor", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> DutyFactor
		{
			get
			{
				return this._DutyFactor;
			}
			set
			{
				if ((this._DutyFactor != value))
				{
					this.OnDutyFactorChanging(value);
					this.SendPropertyChanging();
					this._DutyFactor = value;
					this.SendPropertyChanged("DutyFactor");
					this.OnDutyFactorChanged();
				}
			}
		}
		
		[Column(Storage="_DutyfactorColor", UpdateCheck=UpdateCheck.Never)]
		public string DutyfactorColor
		{
			get
			{
				return this._DutyfactorColor;
			}
			set
			{
				if ((this._DutyfactorColor != value))
				{
					this.OnDutyfactorColorChanging(value);
					this.SendPropertyChanging();
					this._DutyfactorColor = value;
					this.SendPropertyChanged("DutyfactorColor");
					this.OnDutyfactorColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeatSourceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> HeatSourceID
		{
			get
			{
				return this._HeatSourceID;
			}
			set
			{
				if ((this._HeatSourceID != value))
				{
					this.OnHeatSourceIDChanging(value);
					this.SendPropertyChanging();
					this._HeatSourceID = value;
					this.SendPropertyChanged("HeatSourceID");
					this.OnHeatSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeatsourceidColor", UpdateCheck=UpdateCheck.Never)]
		public string HeatsourceidColor
		{
			get
			{
				return this._HeatsourceidColor;
			}
			set
			{
				if ((this._HeatsourceidColor != value))
				{
					this.OnHeatsourceidColorChanging(value);
					this.SendPropertyChanging();
					this._HeatsourceidColor = value;
					this.SendPropertyChanged("HeatsourceidColor");
					this.OnHeatsourceidColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeatSourceType", UpdateCheck=UpdateCheck.Never)]
		public string HeatSourceType
		{
			get
			{
				return this._HeatSourceType;
			}
			set
			{
				if ((this._HeatSourceType != value))
				{
					this.OnHeatSourceTypeChanging(value);
					this.SendPropertyChanging();
					this._HeatSourceType = value;
					this.SendPropertyChanged("HeatSourceType");
					this.OnHeatSourceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_IsFB", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsFB
		{
			get
			{
				return this._IsFB;
			}
			set
			{
				if ((this._IsFB != value))
				{
					this.OnIsFBChanging(value);
					this.SendPropertyChanging();
					this._IsFB = value;
					this.SendPropertyChanged("IsFB");
					this.OnIsFBChanged();
				}
			}
		}
		
		[Column(Storage="_IsfbColor", UpdateCheck=UpdateCheck.Never)]
		public string IsfbColor
		{
			get
			{
				return this._IsfbColor;
			}
			set
			{
				if ((this._IsfbColor != value))
				{
					this.OnIsfbColorChanging(value);
					this.SendPropertyChanging();
					this._IsfbColor = value;
					this.SendPropertyChanged("IsfbColor");
					this.OnIsfbColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsFired", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsFired
		{
			get
			{
				return this._IsFired;
			}
			set
			{
				if ((this._IsFired != value))
				{
					this.OnIsFiredChanging(value);
					this.SendPropertyChanging();
					this._IsFired = value;
					this.SendPropertyChanged("IsFired");
					this.OnIsFiredChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioidColor", UpdateCheck=UpdateCheck.Never)]
		public string ScenarioidColor
		{
			get
			{
				return this._ScenarioidColor;
			}
			set
			{
				if ((this._ScenarioidColor != value))
				{
					this.OnScenarioidColorChanging(value);
					this.SendPropertyChanging();
					this._ScenarioidColor = value;
					this.SendPropertyChanged("ScenarioidColor");
					this.OnScenarioidColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioStreamID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioStreamID
		{
			get
			{
				return this._ScenarioStreamID;
			}
			set
			{
				if ((this._ScenarioStreamID != value))
				{
					this.OnScenarioStreamIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioStreamID = value;
					this.SendPropertyChanged("ScenarioStreamID");
					this.OnScenarioStreamIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScenariostreamidColor", UpdateCheck=UpdateCheck.Never)]
		public string ScenariostreamidColor
		{
			get
			{
				return this._ScenariostreamidColor;
			}
			set
			{
				if ((this._ScenariostreamidColor != value))
				{
					this.OnScenariostreamidColorChanging(value);
					this.SendPropertyChanging();
					this._ScenariostreamidColor = value;
					this.SendPropertyChanged("ScenariostreamidColor");
					this.OnScenariostreamidColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbSink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private string _DescriptionColor;
		
		private System.Nullable<int> _DeviceID;
		
		private bool _Ismaintained;
		
		private string _IsmaintainedColor;
		
		private System.Nullable<double> _Maxpossiblepressure;
		
		private string _MaxpossiblepressureColor;
		
		private string _Sinkname;
		
		private string _SinknameColor;
		
		private string _Sinktype;
		
		private string _SinktypeColor;
		
		private string _Streamname;
		
		private string _StreamnameColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDescriptionColorChanging(string value);
    partial void OnDescriptionColorChanged();
    partial void OnDeviceIDChanging(System.Nullable<int> value);
    partial void OnDeviceIDChanged();
    partial void OnIsmaintainedChanging(bool value);
    partial void OnIsmaintainedChanged();
    partial void OnIsmaintainedColorChanging(string value);
    partial void OnIsmaintainedColorChanged();
    partial void OnMaxpossiblepressureChanging(System.Nullable<double> value);
    partial void OnMaxpossiblepressureChanged();
    partial void OnMaxpossiblepressureColorChanging(string value);
    partial void OnMaxpossiblepressureColorChanged();
    partial void OnSinknameChanging(string value);
    partial void OnSinknameChanged();
    partial void OnSinknameColorChanging(string value);
    partial void OnSinknameColorChanged();
    partial void OnSinktypeChanging(string value);
    partial void OnSinktypeChanged();
    partial void OnSinktypeColorChanging(string value);
    partial void OnSinktypeColorChanged();
    partial void OnStreamnameChanging(string value);
    partial void OnStreamnameChanged();
    partial void OnStreamnameColorChanging(string value);
    partial void OnStreamnameColorChanged();
    #endregion
		
		public tbSink()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DescriptionColor", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionColor
		{
			get
			{
				return this._DescriptionColor;
			}
			set
			{
				if ((this._DescriptionColor != value))
				{
					this.OnDescriptionColorChanging(value);
					this.SendPropertyChanging();
					this._DescriptionColor = value;
					this.SendPropertyChanged("DescriptionColor");
					this.OnDescriptionColorChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Ismaintained", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool Ismaintained
		{
			get
			{
				return this._Ismaintained;
			}
			set
			{
				if ((this._Ismaintained != value))
				{
					this.OnIsmaintainedChanging(value);
					this.SendPropertyChanging();
					this._Ismaintained = value;
					this.SendPropertyChanged("Ismaintained");
					this.OnIsmaintainedChanged();
				}
			}
		}
		
		[Column(Storage="_IsmaintainedColor", UpdateCheck=UpdateCheck.Never)]
		public string IsmaintainedColor
		{
			get
			{
				return this._IsmaintainedColor;
			}
			set
			{
				if ((this._IsmaintainedColor != value))
				{
					this.OnIsmaintainedColorChanging(value);
					this.SendPropertyChanging();
					this._IsmaintainedColor = value;
					this.SendPropertyChanged("IsmaintainedColor");
					this.OnIsmaintainedColorChanged();
				}
			}
		}
		
		[Column(Storage="_Maxpossiblepressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Maxpossiblepressure
		{
			get
			{
				return this._Maxpossiblepressure;
			}
			set
			{
				if ((this._Maxpossiblepressure != value))
				{
					this.OnMaxpossiblepressureChanging(value);
					this.SendPropertyChanging();
					this._Maxpossiblepressure = value;
					this.SendPropertyChanged("Maxpossiblepressure");
					this.OnMaxpossiblepressureChanged();
				}
			}
		}
		
		[Column(Storage="_MaxpossiblepressureColor", UpdateCheck=UpdateCheck.Never)]
		public string MaxpossiblepressureColor
		{
			get
			{
				return this._MaxpossiblepressureColor;
			}
			set
			{
				if ((this._MaxpossiblepressureColor != value))
				{
					this.OnMaxpossiblepressureColorChanging(value);
					this.SendPropertyChanging();
					this._MaxpossiblepressureColor = value;
					this.SendPropertyChanged("MaxpossiblepressureColor");
					this.OnMaxpossiblepressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_Sinkname", UpdateCheck=UpdateCheck.Never)]
		public string Sinkname
		{
			get
			{
				return this._Sinkname;
			}
			set
			{
				if ((this._Sinkname != value))
				{
					this.OnSinknameChanging(value);
					this.SendPropertyChanging();
					this._Sinkname = value;
					this.SendPropertyChanged("Sinkname");
					this.OnSinknameChanged();
				}
			}
		}
		
		[Column(Storage="_SinknameColor", UpdateCheck=UpdateCheck.Never)]
		public string SinknameColor
		{
			get
			{
				return this._SinknameColor;
			}
			set
			{
				if ((this._SinknameColor != value))
				{
					this.OnSinknameColorChanging(value);
					this.SendPropertyChanging();
					this._SinknameColor = value;
					this.SendPropertyChanged("SinknameColor");
					this.OnSinknameColorChanged();
				}
			}
		}
		
		[Column(Storage="_Sinktype", UpdateCheck=UpdateCheck.Never)]
		public string Sinktype
		{
			get
			{
				return this._Sinktype;
			}
			set
			{
				if ((this._Sinktype != value))
				{
					this.OnSinktypeChanging(value);
					this.SendPropertyChanging();
					this._Sinktype = value;
					this.SendPropertyChanged("Sinktype");
					this.OnSinktypeChanged();
				}
			}
		}
		
		[Column(Storage="_SinktypeColor", UpdateCheck=UpdateCheck.Never)]
		public string SinktypeColor
		{
			get
			{
				return this._SinktypeColor;
			}
			set
			{
				if ((this._SinktypeColor != value))
				{
					this.OnSinktypeColorChanging(value);
					this.SendPropertyChanging();
					this._SinktypeColor = value;
					this.SendPropertyChanged("SinktypeColor");
					this.OnSinktypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_Streamname", UpdateCheck=UpdateCheck.Never)]
		public string Streamname
		{
			get
			{
				return this._Streamname;
			}
			set
			{
				if ((this._Streamname != value))
				{
					this.OnStreamnameChanging(value);
					this.SendPropertyChanging();
					this._Streamname = value;
					this.SendPropertyChanged("Streamname");
					this.OnStreamnameChanged();
				}
			}
		}
		
		[Column(Storage="_StreamnameColor", UpdateCheck=UpdateCheck.Never)]
		public string StreamnameColor
		{
			get
			{
				return this._StreamnameColor;
			}
			set
			{
				if ((this._StreamnameColor != value))
				{
					this.OnStreamnameColorChanging(value);
					this.SendPropertyChanging();
					this._StreamnameColor = value;
					this.SendPropertyChanged("StreamnameColor");
					this.OnStreamnameColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbSource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private string _DescriptionColor;
		
		private System.Nullable<int> _DeviceID;
		
		private bool _IsHeatSource;
		
		private string _IsheatsourceColor;
		
		private bool _Ismaintained;
		
		private string _IsmaintainedColor;
		
		private bool _IsSteam;
		
		private string _IssteamColor;
		
		private System.Nullable<double> _Maxpossiblepressure;
		
		private string _MaxpossiblepressureColor;
		
		private string _Sourcename;
		
		private string _SourcenameColor;
		
		private string _Sourcetype;
		
		private string _SourcetypeColor;
		
		private string _Streamname;
		
		private string _StreamnameColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDescriptionColorChanging(string value);
    partial void OnDescriptionColorChanged();
    partial void OnDeviceIDChanging(System.Nullable<int> value);
    partial void OnDeviceIDChanged();
    partial void OnIsHeatSourceChanging(bool value);
    partial void OnIsHeatSourceChanged();
    partial void OnIsheatsourceColorChanging(string value);
    partial void OnIsheatsourceColorChanged();
    partial void OnIsmaintainedChanging(bool value);
    partial void OnIsmaintainedChanged();
    partial void OnIsmaintainedColorChanging(string value);
    partial void OnIsmaintainedColorChanged();
    partial void OnIsSteamChanging(bool value);
    partial void OnIsSteamChanged();
    partial void OnIssteamColorChanging(string value);
    partial void OnIssteamColorChanged();
    partial void OnMaxpossiblepressureChanging(System.Nullable<double> value);
    partial void OnMaxpossiblepressureChanged();
    partial void OnMaxpossiblepressureColorChanging(string value);
    partial void OnMaxpossiblepressureColorChanged();
    partial void OnSourcenameChanging(string value);
    partial void OnSourcenameChanged();
    partial void OnSourcenameColorChanging(string value);
    partial void OnSourcenameColorChanged();
    partial void OnSourcetypeChanging(string value);
    partial void OnSourcetypeChanged();
    partial void OnSourcetypeColorChanging(string value);
    partial void OnSourcetypeColorChanged();
    partial void OnStreamnameChanging(string value);
    partial void OnStreamnameChanged();
    partial void OnStreamnameColorChanging(string value);
    partial void OnStreamnameColorChanged();
    #endregion
		
		public tbSource()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DescriptionColor", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionColor
		{
			get
			{
				return this._DescriptionColor;
			}
			set
			{
				if ((this._DescriptionColor != value))
				{
					this.OnDescriptionColorChanging(value);
					this.SendPropertyChanging();
					this._DescriptionColor = value;
					this.SendPropertyChanged("DescriptionColor");
					this.OnDescriptionColorChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsHeatSource", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsHeatSource
		{
			get
			{
				return this._IsHeatSource;
			}
			set
			{
				if ((this._IsHeatSource != value))
				{
					this.OnIsHeatSourceChanging(value);
					this.SendPropertyChanging();
					this._IsHeatSource = value;
					this.SendPropertyChanged("IsHeatSource");
					this.OnIsHeatSourceChanged();
				}
			}
		}
		
		[Column(Storage="_IsheatsourceColor", UpdateCheck=UpdateCheck.Never)]
		public string IsheatsourceColor
		{
			get
			{
				return this._IsheatsourceColor;
			}
			set
			{
				if ((this._IsheatsourceColor != value))
				{
					this.OnIsheatsourceColorChanging(value);
					this.SendPropertyChanging();
					this._IsheatsourceColor = value;
					this.SendPropertyChanged("IsheatsourceColor");
					this.OnIsheatsourceColorChanged();
				}
			}
		}
		
		[Column(Storage="_Ismaintained", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool Ismaintained
		{
			get
			{
				return this._Ismaintained;
			}
			set
			{
				if ((this._Ismaintained != value))
				{
					this.OnIsmaintainedChanging(value);
					this.SendPropertyChanging();
					this._Ismaintained = value;
					this.SendPropertyChanged("Ismaintained");
					this.OnIsmaintainedChanged();
				}
			}
		}
		
		[Column(Storage="_IsmaintainedColor", UpdateCheck=UpdateCheck.Never)]
		public string IsmaintainedColor
		{
			get
			{
				return this._IsmaintainedColor;
			}
			set
			{
				if ((this._IsmaintainedColor != value))
				{
					this.OnIsmaintainedColorChanging(value);
					this.SendPropertyChanging();
					this._IsmaintainedColor = value;
					this.SendPropertyChanged("IsmaintainedColor");
					this.OnIsmaintainedColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsSteam", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsSteam
		{
			get
			{
				return this._IsSteam;
			}
			set
			{
				if ((this._IsSteam != value))
				{
					this.OnIsSteamChanging(value);
					this.SendPropertyChanging();
					this._IsSteam = value;
					this.SendPropertyChanged("IsSteam");
					this.OnIsSteamChanged();
				}
			}
		}
		
		[Column(Storage="_IssteamColor", UpdateCheck=UpdateCheck.Never)]
		public string IssteamColor
		{
			get
			{
				return this._IssteamColor;
			}
			set
			{
				if ((this._IssteamColor != value))
				{
					this.OnIssteamColorChanging(value);
					this.SendPropertyChanging();
					this._IssteamColor = value;
					this.SendPropertyChanged("IssteamColor");
					this.OnIssteamColorChanged();
				}
			}
		}
		
		[Column(Storage="_Maxpossiblepressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Maxpossiblepressure
		{
			get
			{
				return this._Maxpossiblepressure;
			}
			set
			{
				if ((this._Maxpossiblepressure != value))
				{
					this.OnMaxpossiblepressureChanging(value);
					this.SendPropertyChanging();
					this._Maxpossiblepressure = value;
					this.SendPropertyChanged("Maxpossiblepressure");
					this.OnMaxpossiblepressureChanged();
				}
			}
		}
		
		[Column(Storage="_MaxpossiblepressureColor", UpdateCheck=UpdateCheck.Never)]
		public string MaxpossiblepressureColor
		{
			get
			{
				return this._MaxpossiblepressureColor;
			}
			set
			{
				if ((this._MaxpossiblepressureColor != value))
				{
					this.OnMaxpossiblepressureColorChanging(value);
					this.SendPropertyChanging();
					this._MaxpossiblepressureColor = value;
					this.SendPropertyChanged("MaxpossiblepressureColor");
					this.OnMaxpossiblepressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_Sourcename", UpdateCheck=UpdateCheck.Never)]
		public string Sourcename
		{
			get
			{
				return this._Sourcename;
			}
			set
			{
				if ((this._Sourcename != value))
				{
					this.OnSourcenameChanging(value);
					this.SendPropertyChanging();
					this._Sourcename = value;
					this.SendPropertyChanged("Sourcename");
					this.OnSourcenameChanged();
				}
			}
		}
		
		[Column(Storage="_SourcenameColor", UpdateCheck=UpdateCheck.Never)]
		public string SourcenameColor
		{
			get
			{
				return this._SourcenameColor;
			}
			set
			{
				if ((this._SourcenameColor != value))
				{
					this.OnSourcenameColorChanging(value);
					this.SendPropertyChanging();
					this._SourcenameColor = value;
					this.SendPropertyChanged("SourcenameColor");
					this.OnSourcenameColorChanged();
				}
			}
		}
		
		[Column(Storage="_Sourcetype", UpdateCheck=UpdateCheck.Never)]
		public string Sourcetype
		{
			get
			{
				return this._Sourcetype;
			}
			set
			{
				if ((this._Sourcetype != value))
				{
					this.OnSourcetypeChanging(value);
					this.SendPropertyChanging();
					this._Sourcetype = value;
					this.SendPropertyChanged("Sourcetype");
					this.OnSourcetypeChanged();
				}
			}
		}
		
		[Column(Storage="_SourcetypeColor", UpdateCheck=UpdateCheck.Never)]
		public string SourcetypeColor
		{
			get
			{
				return this._SourcetypeColor;
			}
			set
			{
				if ((this._SourcetypeColor != value))
				{
					this.OnSourcetypeColorChanging(value);
					this.SendPropertyChanging();
					this._SourcetypeColor = value;
					this.SendPropertyChanged("SourcetypeColor");
					this.OnSourcetypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_Streamname", UpdateCheck=UpdateCheck.Never)]
		public string Streamname
		{
			get
			{
				return this._Streamname;
			}
			set
			{
				if ((this._Streamname != value))
				{
					this.OnStreamnameChanging(value);
					this.SendPropertyChanging();
					this._Streamname = value;
					this.SendPropertyChanged("Streamname");
					this.OnStreamnameChanged();
				}
			}
		}
		
		[Column(Storage="_StreamnameColor", UpdateCheck=UpdateCheck.Never)]
		public string StreamnameColor
		{
			get
			{
				return this._StreamnameColor;
			}
			set
			{
				if ((this._StreamnameColor != value))
				{
					this.OnStreamnameColorChanging(value);
					this.SendPropertyChanging();
					this._StreamnameColor = value;
					this.SendPropertyChanged("StreamnameColor");
					this.OnStreamnameColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbSourceFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FileName;
		
		private string _FileNameNoExt;
		
		private System.Nullable<int> _FileType;
		
		private string _FileVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileNameNoExtChanging(string value);
    partial void OnFileNameNoExtChanged();
    partial void OnFileTypeChanging(System.Nullable<int> value);
    partial void OnFileTypeChanged();
    partial void OnFileVersionChanging(string value);
    partial void OnFileVersionChanged();
    #endregion
		
		public tbSourceFile()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", UpdateCheck=UpdateCheck.Never)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileNameNoExt", UpdateCheck=UpdateCheck.Never)]
		public string FileNameNoExt
		{
			get
			{
				return this._FileNameNoExt;
			}
			set
			{
				if ((this._FileNameNoExt != value))
				{
					this.OnFileNameNoExtChanging(value);
					this.SendPropertyChanging();
					this._FileNameNoExt = value;
					this.SendPropertyChanged("FileNameNoExt");
					this.OnFileNameNoExtChanged();
				}
			}
		}
		
		[Column(Storage="_FileType", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FileType
		{
			get
			{
				return this._FileType;
			}
			set
			{
				if ((this._FileType != value))
				{
					this.OnFileTypeChanging(value);
					this.SendPropertyChanging();
					this._FileType = value;
					this.SendPropertyChanged("FileType");
					this.OnFileTypeChanged();
				}
			}
		}
		
		[Column(Storage="_FileVersion", UpdateCheck=UpdateCheck.Never)]
		public string FileVersion
		{
			get
			{
				return this._FileVersion;
			}
			set
			{
				if ((this._FileVersion != value))
				{
					this.OnFileVersionChanging(value);
					this.SendPropertyChanging();
					this._FileVersion = value;
					this.SendPropertyChanged("FileVersion");
					this.OnFileVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbStream : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _BulkCP;
		
		private string _BulkcpColor;
		
		private System.Nullable<double> _BulkCPCVRatio;
		
		private string _BulkcpcvratioColor;
		
		private System.Nullable<double> _BulkDensityAct;
		
		private string _BulkdensityactColor;
		
		private System.Nullable<double> _BulkMwOfPhase;
		
		private string _BulkmwofphaseColor;
		
		private System.Nullable<double> _BulkSurfTension;
		
		private string _BulksurftensionColor;
		
		private System.Nullable<double> _BulkThermalCond;
		
		private string _BulkthermalcondColor;
		
		private System.Nullable<double> _BulkViscosity;
		
		private string _BulkviscosityColor;
		
		private string _CompIn;
		
		private string _CompinColor;
		
		private string _ComponentId;
		
		private string _ComponentidColor;
		
		private string _Description;
		
		private string _DescriptionColor;
		
		private System.Nullable<int> _DeviceID;
		
		private System.Nullable<int> _Enthalpy;
		
		private string _EnthalpyColor;
		
		private System.Nullable<double> _InertWeightEnthalpy;
		
		private string _InertweightenthalpyColor;
		
		private System.Nullable<double> _InertWeightRate;
		
		private string _InertweightrateColor;
		
		private bool _IsProduct;
		
		private string _IsproductColor;
		
		private System.Nullable<double> _Pressure;
		
		private string _PressureColor;
		
		private string _PrintNumber;
		
		private string _PrintnumberColor;
		
		private string _Prodtype;
		
		private string _ProdtypeColor;
		
		private System.Nullable<double> _Spenthalpy;
		
		private string _SpenthalpyColor;
		
		private string _Streamname;
		
		private string _StreamnameColor;
		
		private System.Nullable<double> _Temperature;
		
		private string _TemperatureColor;
		
		private string _TotalComposition;
		
		private string _TotalcompositionColor;
		
		private System.Nullable<double> _TotalMolarEnthalpy;
		
		private string _TotalmolarenthalpyColor;
		
		private System.Nullable<double> _TotalMolarRate;
		
		private string _TotalmolarrateColor;
		
		private string _Tray;
		
		private string _TrayColor;
		
		private string _Type;
		
		private string _TypeColor;
		
		private System.Nullable<double> _Vaporfraction;
		
		private string _VaporfractionColor;
		
		private System.Nullable<double> _VaporZFmKVal;
		
		private string _VaporzfmkvalColor;
		
		private System.Nullable<double> _Weightflow;
		
		private string _WeightflowColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBulkCPChanging(System.Nullable<double> value);
    partial void OnBulkCPChanged();
    partial void OnBulkcpColorChanging(string value);
    partial void OnBulkcpColorChanged();
    partial void OnBulkCPCVRatioChanging(System.Nullable<double> value);
    partial void OnBulkCPCVRatioChanged();
    partial void OnBulkcpcvratioColorChanging(string value);
    partial void OnBulkcpcvratioColorChanged();
    partial void OnBulkDensityActChanging(System.Nullable<double> value);
    partial void OnBulkDensityActChanged();
    partial void OnBulkdensityactColorChanging(string value);
    partial void OnBulkdensityactColorChanged();
    partial void OnBulkMwOfPhaseChanging(System.Nullable<double> value);
    partial void OnBulkMwOfPhaseChanged();
    partial void OnBulkmwofphaseColorChanging(string value);
    partial void OnBulkmwofphaseColorChanged();
    partial void OnBulkSurfTensionChanging(System.Nullable<double> value);
    partial void OnBulkSurfTensionChanged();
    partial void OnBulksurftensionColorChanging(string value);
    partial void OnBulksurftensionColorChanged();
    partial void OnBulkThermalCondChanging(System.Nullable<double> value);
    partial void OnBulkThermalCondChanged();
    partial void OnBulkthermalcondColorChanging(string value);
    partial void OnBulkthermalcondColorChanged();
    partial void OnBulkViscosityChanging(System.Nullable<double> value);
    partial void OnBulkViscosityChanged();
    partial void OnBulkviscosityColorChanging(string value);
    partial void OnBulkviscosityColorChanged();
    partial void OnCompInChanging(string value);
    partial void OnCompInChanged();
    partial void OnCompinColorChanging(string value);
    partial void OnCompinColorChanged();
    partial void OnComponentIdChanging(string value);
    partial void OnComponentIdChanged();
    partial void OnComponentidColorChanging(string value);
    partial void OnComponentidColorChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDescriptionColorChanging(string value);
    partial void OnDescriptionColorChanged();
    partial void OnDeviceIDChanging(System.Nullable<int> value);
    partial void OnDeviceIDChanged();
    partial void OnEnthalpyChanging(System.Nullable<int> value);
    partial void OnEnthalpyChanged();
    partial void OnEnthalpyColorChanging(string value);
    partial void OnEnthalpyColorChanged();
    partial void OnInertWeightEnthalpyChanging(System.Nullable<double> value);
    partial void OnInertWeightEnthalpyChanged();
    partial void OnInertweightenthalpyColorChanging(string value);
    partial void OnInertweightenthalpyColorChanged();
    partial void OnInertWeightRateChanging(System.Nullable<double> value);
    partial void OnInertWeightRateChanged();
    partial void OnInertweightrateColorChanging(string value);
    partial void OnInertweightrateColorChanged();
    partial void OnIsProductChanging(bool value);
    partial void OnIsProductChanged();
    partial void OnIsproductColorChanging(string value);
    partial void OnIsproductColorChanged();
    partial void OnPressureChanging(System.Nullable<double> value);
    partial void OnPressureChanged();
    partial void OnPressureColorChanging(string value);
    partial void OnPressureColorChanged();
    partial void OnPrintNumberChanging(string value);
    partial void OnPrintNumberChanged();
    partial void OnPrintnumberColorChanging(string value);
    partial void OnPrintnumberColorChanged();
    partial void OnProdtypeChanging(string value);
    partial void OnProdtypeChanged();
    partial void OnProdtypeColorChanging(string value);
    partial void OnProdtypeColorChanged();
    partial void OnSpenthalpyChanging(System.Nullable<double> value);
    partial void OnSpenthalpyChanged();
    partial void OnSpenthalpyColorChanging(string value);
    partial void OnSpenthalpyColorChanged();
    partial void OnStreamnameChanging(string value);
    partial void OnStreamnameChanged();
    partial void OnStreamnameColorChanging(string value);
    partial void OnStreamnameColorChanged();
    partial void OnTemperatureChanging(System.Nullable<double> value);
    partial void OnTemperatureChanged();
    partial void OnTemperatureColorChanging(string value);
    partial void OnTemperatureColorChanged();
    partial void OnTotalCompositionChanging(string value);
    partial void OnTotalCompositionChanged();
    partial void OnTotalcompositionColorChanging(string value);
    partial void OnTotalcompositionColorChanged();
    partial void OnTotalMolarEnthalpyChanging(System.Nullable<double> value);
    partial void OnTotalMolarEnthalpyChanged();
    partial void OnTotalmolarenthalpyColorChanging(string value);
    partial void OnTotalmolarenthalpyColorChanged();
    partial void OnTotalMolarRateChanging(System.Nullable<double> value);
    partial void OnTotalMolarRateChanged();
    partial void OnTotalmolarrateColorChanging(string value);
    partial void OnTotalmolarrateColorChanged();
    partial void OnTrayChanging(string value);
    partial void OnTrayChanged();
    partial void OnTrayColorChanging(string value);
    partial void OnTrayColorChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTypeColorChanging(string value);
    partial void OnTypeColorChanged();
    partial void OnVaporfractionChanging(System.Nullable<double> value);
    partial void OnVaporfractionChanged();
    partial void OnVaporfractionColorChanging(string value);
    partial void OnVaporfractionColorChanged();
    partial void OnVaporZFmKValChanging(System.Nullable<double> value);
    partial void OnVaporZFmKValChanged();
    partial void OnVaporzfmkvalColorChanging(string value);
    partial void OnVaporzfmkvalColorChanged();
    partial void OnWeightflowChanging(System.Nullable<double> value);
    partial void OnWeightflowChanged();
    partial void OnWeightflowColorChanging(string value);
    partial void OnWeightflowColorChanged();
    #endregion
		
		public tbStream()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_BulkCP", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkCP
		{
			get
			{
				return this._BulkCP;
			}
			set
			{
				if ((this._BulkCP != value))
				{
					this.OnBulkCPChanging(value);
					this.SendPropertyChanging();
					this._BulkCP = value;
					this.SendPropertyChanged("BulkCP");
					this.OnBulkCPChanged();
				}
			}
		}
		
		[Column(Storage="_BulkcpColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkcpColor
		{
			get
			{
				return this._BulkcpColor;
			}
			set
			{
				if ((this._BulkcpColor != value))
				{
					this.OnBulkcpColorChanging(value);
					this.SendPropertyChanging();
					this._BulkcpColor = value;
					this.SendPropertyChanged("BulkcpColor");
					this.OnBulkcpColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkCPCVRatio", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkCPCVRatio
		{
			get
			{
				return this._BulkCPCVRatio;
			}
			set
			{
				if ((this._BulkCPCVRatio != value))
				{
					this.OnBulkCPCVRatioChanging(value);
					this.SendPropertyChanging();
					this._BulkCPCVRatio = value;
					this.SendPropertyChanged("BulkCPCVRatio");
					this.OnBulkCPCVRatioChanged();
				}
			}
		}
		
		[Column(Storage="_BulkcpcvratioColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkcpcvratioColor
		{
			get
			{
				return this._BulkcpcvratioColor;
			}
			set
			{
				if ((this._BulkcpcvratioColor != value))
				{
					this.OnBulkcpcvratioColorChanging(value);
					this.SendPropertyChanging();
					this._BulkcpcvratioColor = value;
					this.SendPropertyChanged("BulkcpcvratioColor");
					this.OnBulkcpcvratioColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkDensityAct", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkDensityAct
		{
			get
			{
				return this._BulkDensityAct;
			}
			set
			{
				if ((this._BulkDensityAct != value))
				{
					this.OnBulkDensityActChanging(value);
					this.SendPropertyChanging();
					this._BulkDensityAct = value;
					this.SendPropertyChanged("BulkDensityAct");
					this.OnBulkDensityActChanged();
				}
			}
		}
		
		[Column(Storage="_BulkdensityactColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkdensityactColor
		{
			get
			{
				return this._BulkdensityactColor;
			}
			set
			{
				if ((this._BulkdensityactColor != value))
				{
					this.OnBulkdensityactColorChanging(value);
					this.SendPropertyChanging();
					this._BulkdensityactColor = value;
					this.SendPropertyChanged("BulkdensityactColor");
					this.OnBulkdensityactColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkMwOfPhase", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkMwOfPhase
		{
			get
			{
				return this._BulkMwOfPhase;
			}
			set
			{
				if ((this._BulkMwOfPhase != value))
				{
					this.OnBulkMwOfPhaseChanging(value);
					this.SendPropertyChanging();
					this._BulkMwOfPhase = value;
					this.SendPropertyChanged("BulkMwOfPhase");
					this.OnBulkMwOfPhaseChanged();
				}
			}
		}
		
		[Column(Storage="_BulkmwofphaseColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkmwofphaseColor
		{
			get
			{
				return this._BulkmwofphaseColor;
			}
			set
			{
				if ((this._BulkmwofphaseColor != value))
				{
					this.OnBulkmwofphaseColorChanging(value);
					this.SendPropertyChanging();
					this._BulkmwofphaseColor = value;
					this.SendPropertyChanged("BulkmwofphaseColor");
					this.OnBulkmwofphaseColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkSurfTension", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkSurfTension
		{
			get
			{
				return this._BulkSurfTension;
			}
			set
			{
				if ((this._BulkSurfTension != value))
				{
					this.OnBulkSurfTensionChanging(value);
					this.SendPropertyChanging();
					this._BulkSurfTension = value;
					this.SendPropertyChanged("BulkSurfTension");
					this.OnBulkSurfTensionChanged();
				}
			}
		}
		
		[Column(Storage="_BulksurftensionColor", UpdateCheck=UpdateCheck.Never)]
		public string BulksurftensionColor
		{
			get
			{
				return this._BulksurftensionColor;
			}
			set
			{
				if ((this._BulksurftensionColor != value))
				{
					this.OnBulksurftensionColorChanging(value);
					this.SendPropertyChanging();
					this._BulksurftensionColor = value;
					this.SendPropertyChanged("BulksurftensionColor");
					this.OnBulksurftensionColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkThermalCond", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkThermalCond
		{
			get
			{
				return this._BulkThermalCond;
			}
			set
			{
				if ((this._BulkThermalCond != value))
				{
					this.OnBulkThermalCondChanging(value);
					this.SendPropertyChanging();
					this._BulkThermalCond = value;
					this.SendPropertyChanged("BulkThermalCond");
					this.OnBulkThermalCondChanged();
				}
			}
		}
		
		[Column(Storage="_BulkthermalcondColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkthermalcondColor
		{
			get
			{
				return this._BulkthermalcondColor;
			}
			set
			{
				if ((this._BulkthermalcondColor != value))
				{
					this.OnBulkthermalcondColorChanging(value);
					this.SendPropertyChanging();
					this._BulkthermalcondColor = value;
					this.SendPropertyChanged("BulkthermalcondColor");
					this.OnBulkthermalcondColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkViscosity", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkViscosity
		{
			get
			{
				return this._BulkViscosity;
			}
			set
			{
				if ((this._BulkViscosity != value))
				{
					this.OnBulkViscosityChanging(value);
					this.SendPropertyChanging();
					this._BulkViscosity = value;
					this.SendPropertyChanged("BulkViscosity");
					this.OnBulkViscosityChanged();
				}
			}
		}
		
		[Column(Storage="_BulkviscosityColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkviscosityColor
		{
			get
			{
				return this._BulkviscosityColor;
			}
			set
			{
				if ((this._BulkviscosityColor != value))
				{
					this.OnBulkviscosityColorChanging(value);
					this.SendPropertyChanging();
					this._BulkviscosityColor = value;
					this.SendPropertyChanged("BulkviscosityColor");
					this.OnBulkviscosityColorChanged();
				}
			}
		}
		
		[Column(Storage="_CompIn", UpdateCheck=UpdateCheck.Never)]
		public string CompIn
		{
			get
			{
				return this._CompIn;
			}
			set
			{
				if ((this._CompIn != value))
				{
					this.OnCompInChanging(value);
					this.SendPropertyChanging();
					this._CompIn = value;
					this.SendPropertyChanged("CompIn");
					this.OnCompInChanged();
				}
			}
		}
		
		[Column(Storage="_CompinColor", UpdateCheck=UpdateCheck.Never)]
		public string CompinColor
		{
			get
			{
				return this._CompinColor;
			}
			set
			{
				if ((this._CompinColor != value))
				{
					this.OnCompinColorChanging(value);
					this.SendPropertyChanging();
					this._CompinColor = value;
					this.SendPropertyChanged("CompinColor");
					this.OnCompinColorChanged();
				}
			}
		}
		
		[Column(Storage="_ComponentId", UpdateCheck=UpdateCheck.Never)]
		public string ComponentId
		{
			get
			{
				return this._ComponentId;
			}
			set
			{
				if ((this._ComponentId != value))
				{
					this.OnComponentIdChanging(value);
					this.SendPropertyChanging();
					this._ComponentId = value;
					this.SendPropertyChanged("ComponentId");
					this.OnComponentIdChanged();
				}
			}
		}
		
		[Column(Storage="_ComponentidColor", UpdateCheck=UpdateCheck.Never)]
		public string ComponentidColor
		{
			get
			{
				return this._ComponentidColor;
			}
			set
			{
				if ((this._ComponentidColor != value))
				{
					this.OnComponentidColorChanging(value);
					this.SendPropertyChanging();
					this._ComponentidColor = value;
					this.SendPropertyChanged("ComponentidColor");
					this.OnComponentidColorChanged();
				}
			}
		}
		
		[Column(Storage="_Description", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DescriptionColor", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionColor
		{
			get
			{
				return this._DescriptionColor;
			}
			set
			{
				if ((this._DescriptionColor != value))
				{
					this.OnDescriptionColorChanging(value);
					this.SendPropertyChanging();
					this._DescriptionColor = value;
					this.SendPropertyChanged("DescriptionColor");
					this.OnDescriptionColorChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Enthalpy", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Enthalpy
		{
			get
			{
				return this._Enthalpy;
			}
			set
			{
				if ((this._Enthalpy != value))
				{
					this.OnEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._Enthalpy = value;
					this.SendPropertyChanged("Enthalpy");
					this.OnEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_EnthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string EnthalpyColor
		{
			get
			{
				return this._EnthalpyColor;
			}
			set
			{
				if ((this._EnthalpyColor != value))
				{
					this.OnEnthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._EnthalpyColor = value;
					this.SendPropertyChanged("EnthalpyColor");
					this.OnEnthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_InertWeightEnthalpy", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> InertWeightEnthalpy
		{
			get
			{
				return this._InertWeightEnthalpy;
			}
			set
			{
				if ((this._InertWeightEnthalpy != value))
				{
					this.OnInertWeightEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._InertWeightEnthalpy = value;
					this.SendPropertyChanged("InertWeightEnthalpy");
					this.OnInertWeightEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_InertweightenthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string InertweightenthalpyColor
		{
			get
			{
				return this._InertweightenthalpyColor;
			}
			set
			{
				if ((this._InertweightenthalpyColor != value))
				{
					this.OnInertweightenthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._InertweightenthalpyColor = value;
					this.SendPropertyChanged("InertweightenthalpyColor");
					this.OnInertweightenthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_InertWeightRate", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> InertWeightRate
		{
			get
			{
				return this._InertWeightRate;
			}
			set
			{
				if ((this._InertWeightRate != value))
				{
					this.OnInertWeightRateChanging(value);
					this.SendPropertyChanging();
					this._InertWeightRate = value;
					this.SendPropertyChanged("InertWeightRate");
					this.OnInertWeightRateChanged();
				}
			}
		}
		
		[Column(Storage="_InertweightrateColor", UpdateCheck=UpdateCheck.Never)]
		public string InertweightrateColor
		{
			get
			{
				return this._InertweightrateColor;
			}
			set
			{
				if ((this._InertweightrateColor != value))
				{
					this.OnInertweightrateColorChanging(value);
					this.SendPropertyChanging();
					this._InertweightrateColor = value;
					this.SendPropertyChanged("InertweightrateColor");
					this.OnInertweightrateColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsProduct", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsProduct
		{
			get
			{
				return this._IsProduct;
			}
			set
			{
				if ((this._IsProduct != value))
				{
					this.OnIsProductChanging(value);
					this.SendPropertyChanging();
					this._IsProduct = value;
					this.SendPropertyChanged("IsProduct");
					this.OnIsProductChanged();
				}
			}
		}
		
		[Column(Storage="_IsproductColor", UpdateCheck=UpdateCheck.Never)]
		public string IsproductColor
		{
			get
			{
				return this._IsproductColor;
			}
			set
			{
				if ((this._IsproductColor != value))
				{
					this.OnIsproductColorChanging(value);
					this.SendPropertyChanging();
					this._IsproductColor = value;
					this.SendPropertyChanged("IsproductColor");
					this.OnIsproductColorChanged();
				}
			}
		}
		
		[Column(Storage="_Pressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this.OnPressureChanging(value);
					this.SendPropertyChanging();
					this._Pressure = value;
					this.SendPropertyChanged("Pressure");
					this.OnPressureChanged();
				}
			}
		}
		
		[Column(Storage="_PressureColor", UpdateCheck=UpdateCheck.Never)]
		public string PressureColor
		{
			get
			{
				return this._PressureColor;
			}
			set
			{
				if ((this._PressureColor != value))
				{
					this.OnPressureColorChanging(value);
					this.SendPropertyChanging();
					this._PressureColor = value;
					this.SendPropertyChanged("PressureColor");
					this.OnPressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_PrintNumber", UpdateCheck=UpdateCheck.Never)]
		public string PrintNumber
		{
			get
			{
				return this._PrintNumber;
			}
			set
			{
				if ((this._PrintNumber != value))
				{
					this.OnPrintNumberChanging(value);
					this.SendPropertyChanging();
					this._PrintNumber = value;
					this.SendPropertyChanged("PrintNumber");
					this.OnPrintNumberChanged();
				}
			}
		}
		
		[Column(Storage="_PrintnumberColor", UpdateCheck=UpdateCheck.Never)]
		public string PrintnumberColor
		{
			get
			{
				return this._PrintnumberColor;
			}
			set
			{
				if ((this._PrintnumberColor != value))
				{
					this.OnPrintnumberColorChanging(value);
					this.SendPropertyChanging();
					this._PrintnumberColor = value;
					this.SendPropertyChanged("PrintnumberColor");
					this.OnPrintnumberColorChanged();
				}
			}
		}
		
		[Column(Storage="_Prodtype", UpdateCheck=UpdateCheck.Never)]
		public string Prodtype
		{
			get
			{
				return this._Prodtype;
			}
			set
			{
				if ((this._Prodtype != value))
				{
					this.OnProdtypeChanging(value);
					this.SendPropertyChanging();
					this._Prodtype = value;
					this.SendPropertyChanged("Prodtype");
					this.OnProdtypeChanged();
				}
			}
		}
		
		[Column(Storage="_ProdtypeColor", UpdateCheck=UpdateCheck.Never)]
		public string ProdtypeColor
		{
			get
			{
				return this._ProdtypeColor;
			}
			set
			{
				if ((this._ProdtypeColor != value))
				{
					this.OnProdtypeColorChanging(value);
					this.SendPropertyChanging();
					this._ProdtypeColor = value;
					this.SendPropertyChanged("ProdtypeColor");
					this.OnProdtypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_Spenthalpy", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Spenthalpy
		{
			get
			{
				return this._Spenthalpy;
			}
			set
			{
				if ((this._Spenthalpy != value))
				{
					this.OnSpenthalpyChanging(value);
					this.SendPropertyChanging();
					this._Spenthalpy = value;
					this.SendPropertyChanged("Spenthalpy");
					this.OnSpenthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_SpenthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string SpenthalpyColor
		{
			get
			{
				return this._SpenthalpyColor;
			}
			set
			{
				if ((this._SpenthalpyColor != value))
				{
					this.OnSpenthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._SpenthalpyColor = value;
					this.SendPropertyChanged("SpenthalpyColor");
					this.OnSpenthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_Streamname", UpdateCheck=UpdateCheck.Never)]
		public string Streamname
		{
			get
			{
				return this._Streamname;
			}
			set
			{
				if ((this._Streamname != value))
				{
					this.OnStreamnameChanging(value);
					this.SendPropertyChanging();
					this._Streamname = value;
					this.SendPropertyChanged("Streamname");
					this.OnStreamnameChanged();
				}
			}
		}
		
		[Column(Storage="_StreamnameColor", UpdateCheck=UpdateCheck.Never)]
		public string StreamnameColor
		{
			get
			{
				return this._StreamnameColor;
			}
			set
			{
				if ((this._StreamnameColor != value))
				{
					this.OnStreamnameColorChanging(value);
					this.SendPropertyChanging();
					this._StreamnameColor = value;
					this.SendPropertyChanged("StreamnameColor");
					this.OnStreamnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_Temperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_TemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string TemperatureColor
		{
			get
			{
				return this._TemperatureColor;
			}
			set
			{
				if ((this._TemperatureColor != value))
				{
					this.OnTemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._TemperatureColor = value;
					this.SendPropertyChanged("TemperatureColor");
					this.OnTemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_TotalComposition", UpdateCheck=UpdateCheck.Never)]
		public string TotalComposition
		{
			get
			{
				return this._TotalComposition;
			}
			set
			{
				if ((this._TotalComposition != value))
				{
					this.OnTotalCompositionChanging(value);
					this.SendPropertyChanging();
					this._TotalComposition = value;
					this.SendPropertyChanged("TotalComposition");
					this.OnTotalCompositionChanged();
				}
			}
		}
		
		[Column(Storage="_TotalcompositionColor", UpdateCheck=UpdateCheck.Never)]
		public string TotalcompositionColor
		{
			get
			{
				return this._TotalcompositionColor;
			}
			set
			{
				if ((this._TotalcompositionColor != value))
				{
					this.OnTotalcompositionColorChanging(value);
					this.SendPropertyChanging();
					this._TotalcompositionColor = value;
					this.SendPropertyChanged("TotalcompositionColor");
					this.OnTotalcompositionColorChanged();
				}
			}
		}
		
		[Column(Storage="_TotalMolarEnthalpy", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> TotalMolarEnthalpy
		{
			get
			{
				return this._TotalMolarEnthalpy;
			}
			set
			{
				if ((this._TotalMolarEnthalpy != value))
				{
					this.OnTotalMolarEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._TotalMolarEnthalpy = value;
					this.SendPropertyChanged("TotalMolarEnthalpy");
					this.OnTotalMolarEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalmolarenthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string TotalmolarenthalpyColor
		{
			get
			{
				return this._TotalmolarenthalpyColor;
			}
			set
			{
				if ((this._TotalmolarenthalpyColor != value))
				{
					this.OnTotalmolarenthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._TotalmolarenthalpyColor = value;
					this.SendPropertyChanged("TotalmolarenthalpyColor");
					this.OnTotalmolarenthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_TotalMolarRate", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> TotalMolarRate
		{
			get
			{
				return this._TotalMolarRate;
			}
			set
			{
				if ((this._TotalMolarRate != value))
				{
					this.OnTotalMolarRateChanging(value);
					this.SendPropertyChanging();
					this._TotalMolarRate = value;
					this.SendPropertyChanged("TotalMolarRate");
					this.OnTotalMolarRateChanged();
				}
			}
		}
		
		[Column(Storage="_TotalmolarrateColor", UpdateCheck=UpdateCheck.Never)]
		public string TotalmolarrateColor
		{
			get
			{
				return this._TotalmolarrateColor;
			}
			set
			{
				if ((this._TotalmolarrateColor != value))
				{
					this.OnTotalmolarrateColorChanging(value);
					this.SendPropertyChanging();
					this._TotalmolarrateColor = value;
					this.SendPropertyChanged("TotalmolarrateColor");
					this.OnTotalmolarrateColorChanged();
				}
			}
		}
		
		[Column(Storage="_Tray", UpdateCheck=UpdateCheck.Never)]
		public string Tray
		{
			get
			{
				return this._Tray;
			}
			set
			{
				if ((this._Tray != value))
				{
					this.OnTrayChanging(value);
					this.SendPropertyChanging();
					this._Tray = value;
					this.SendPropertyChanged("Tray");
					this.OnTrayChanged();
				}
			}
		}
		
		[Column(Storage="_TrayColor", UpdateCheck=UpdateCheck.Never)]
		public string TrayColor
		{
			get
			{
				return this._TrayColor;
			}
			set
			{
				if ((this._TrayColor != value))
				{
					this.OnTrayColorChanging(value);
					this.SendPropertyChanging();
					this._TrayColor = value;
					this.SendPropertyChanged("TrayColor");
					this.OnTrayColorChanged();
				}
			}
		}
		
		[Column(Storage="_Type", UpdateCheck=UpdateCheck.Never)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TypeColor", UpdateCheck=UpdateCheck.Never)]
		public string TypeColor
		{
			get
			{
				return this._TypeColor;
			}
			set
			{
				if ((this._TypeColor != value))
				{
					this.OnTypeColorChanging(value);
					this.SendPropertyChanging();
					this._TypeColor = value;
					this.SendPropertyChanged("TypeColor");
					this.OnTypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_Vaporfraction", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Vaporfraction
		{
			get
			{
				return this._Vaporfraction;
			}
			set
			{
				if ((this._Vaporfraction != value))
				{
					this.OnVaporfractionChanging(value);
					this.SendPropertyChanging();
					this._Vaporfraction = value;
					this.SendPropertyChanged("Vaporfraction");
					this.OnVaporfractionChanged();
				}
			}
		}
		
		[Column(Storage="_VaporfractionColor", UpdateCheck=UpdateCheck.Never)]
		public string VaporfractionColor
		{
			get
			{
				return this._VaporfractionColor;
			}
			set
			{
				if ((this._VaporfractionColor != value))
				{
					this.OnVaporfractionColorChanging(value);
					this.SendPropertyChanging();
					this._VaporfractionColor = value;
					this.SendPropertyChanged("VaporfractionColor");
					this.OnVaporfractionColorChanged();
				}
			}
		}
		
		[Column(Storage="_VaporZFmKVal", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> VaporZFmKVal
		{
			get
			{
				return this._VaporZFmKVal;
			}
			set
			{
				if ((this._VaporZFmKVal != value))
				{
					this.OnVaporZFmKValChanging(value);
					this.SendPropertyChanging();
					this._VaporZFmKVal = value;
					this.SendPropertyChanged("VaporZFmKVal");
					this.OnVaporZFmKValChanged();
				}
			}
		}
		
		[Column(Storage="_VaporzfmkvalColor", UpdateCheck=UpdateCheck.Never)]
		public string VaporzfmkvalColor
		{
			get
			{
				return this._VaporzfmkvalColor;
			}
			set
			{
				if ((this._VaporzfmkvalColor != value))
				{
					this.OnVaporzfmkvalColorChanging(value);
					this.SendPropertyChanging();
					this._VaporzfmkvalColor = value;
					this.SendPropertyChanged("VaporzfmkvalColor");
					this.OnVaporzfmkvalColorChanged();
				}
			}
		}
		
		[Column(Storage="_Weightflow", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Weightflow
		{
			get
			{
				return this._Weightflow;
			}
			set
			{
				if ((this._Weightflow != value))
				{
					this.OnWeightflowChanging(value);
					this.SendPropertyChanging();
					this._Weightflow = value;
					this.SendPropertyChanged("Weightflow");
					this.OnWeightflowChanged();
				}
			}
		}
		
		[Column(Storage="_WeightflowColor", UpdateCheck=UpdateCheck.Never)]
		public string WeightflowColor
		{
			get
			{
				return this._WeightflowColor;
			}
			set
			{
				if ((this._WeightflowColor != value))
				{
					this.OnWeightflowColorChanging(value);
					this.SendPropertyChanging();
					this._WeightflowColor = value;
					this.SendPropertyChanged("WeightflowColor");
					this.OnWeightflowColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTowerAccumulator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Accumulatorname;
		
		private string _AccumulatornameColor;
		
		private System.Nullable<int> _DeviceID;
		
		private System.Nullable<double> _Diameter;
		
		private string _DiameterColor;
		
		private System.Nullable<double> _Length;
		
		private string _LengthColor;
		
		private System.Nullable<double> _NormalLiquidLevel;
		
		private string _NormalliquidlevelColor;
		
		private bool _Orientation;
		
		private string _OrientationColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAccumulatornameChanging(string value);
    partial void OnAccumulatornameChanged();
    partial void OnAccumulatornameColorChanging(string value);
    partial void OnAccumulatornameColorChanged();
    partial void OnDeviceIDChanging(System.Nullable<int> value);
    partial void OnDeviceIDChanged();
    partial void OnDiameterChanging(System.Nullable<double> value);
    partial void OnDiameterChanged();
    partial void OnDiameterColorChanging(string value);
    partial void OnDiameterColorChanged();
    partial void OnLengthChanging(System.Nullable<double> value);
    partial void OnLengthChanged();
    partial void OnLengthColorChanging(string value);
    partial void OnLengthColorChanged();
    partial void OnNormalLiquidLevelChanging(System.Nullable<double> value);
    partial void OnNormalLiquidLevelChanged();
    partial void OnNormalliquidlevelColorChanging(string value);
    partial void OnNormalliquidlevelColorChanged();
    partial void OnOrientationChanging(bool value);
    partial void OnOrientationChanged();
    partial void OnOrientationColorChanging(string value);
    partial void OnOrientationColorChanged();
    #endregion
		
		public tbTowerAccumulator()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Accumulatorname", UpdateCheck=UpdateCheck.Never)]
		public string Accumulatorname
		{
			get
			{
				return this._Accumulatorname;
			}
			set
			{
				if ((this._Accumulatorname != value))
				{
					this.OnAccumulatornameChanging(value);
					this.SendPropertyChanging();
					this._Accumulatorname = value;
					this.SendPropertyChanged("Accumulatorname");
					this.OnAccumulatornameChanged();
				}
			}
		}
		
		[Column(Storage="_AccumulatornameColor", UpdateCheck=UpdateCheck.Never)]
		public string AccumulatornameColor
		{
			get
			{
				return this._AccumulatornameColor;
			}
			set
			{
				if ((this._AccumulatornameColor != value))
				{
					this.OnAccumulatornameColorChanging(value);
					this.SendPropertyChanging();
					this._AccumulatornameColor = value;
					this.SendPropertyChanged("AccumulatornameColor");
					this.OnAccumulatornameColorChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Diameter", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Diameter
		{
			get
			{
				return this._Diameter;
			}
			set
			{
				if ((this._Diameter != value))
				{
					this.OnDiameterChanging(value);
					this.SendPropertyChanging();
					this._Diameter = value;
					this.SendPropertyChanged("Diameter");
					this.OnDiameterChanged();
				}
			}
		}
		
		[Column(Storage="_DiameterColor", UpdateCheck=UpdateCheck.Never)]
		public string DiameterColor
		{
			get
			{
				return this._DiameterColor;
			}
			set
			{
				if ((this._DiameterColor != value))
				{
					this.OnDiameterColorChanging(value);
					this.SendPropertyChanging();
					this._DiameterColor = value;
					this.SendPropertyChanged("DiameterColor");
					this.OnDiameterColorChanged();
				}
			}
		}
		
		[Column(Storage="_Length", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_LengthColor", UpdateCheck=UpdateCheck.Never)]
		public string LengthColor
		{
			get
			{
				return this._LengthColor;
			}
			set
			{
				if ((this._LengthColor != value))
				{
					this.OnLengthColorChanging(value);
					this.SendPropertyChanging();
					this._LengthColor = value;
					this.SendPropertyChanged("LengthColor");
					this.OnLengthColorChanged();
				}
			}
		}
		
		[Column(Storage="_NormalLiquidLevel", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> NormalLiquidLevel
		{
			get
			{
				return this._NormalLiquidLevel;
			}
			set
			{
				if ((this._NormalLiquidLevel != value))
				{
					this.OnNormalLiquidLevelChanging(value);
					this.SendPropertyChanging();
					this._NormalLiquidLevel = value;
					this.SendPropertyChanged("NormalLiquidLevel");
					this.OnNormalLiquidLevelChanged();
				}
			}
		}
		
		[Column(Storage="_NormalliquidlevelColor", UpdateCheck=UpdateCheck.Never)]
		public string NormalliquidlevelColor
		{
			get
			{
				return this._NormalliquidlevelColor;
			}
			set
			{
				if ((this._NormalliquidlevelColor != value))
				{
					this.OnNormalliquidlevelColorChanging(value);
					this.SendPropertyChanging();
					this._NormalliquidlevelColor = value;
					this.SendPropertyChanged("NormalliquidlevelColor");
					this.OnNormalliquidlevelColorChanged();
				}
			}
		}
		
		[Column(Storage="_Orientation", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool Orientation
		{
			get
			{
				return this._Orientation;
			}
			set
			{
				if ((this._Orientation != value))
				{
					this.OnOrientationChanging(value);
					this.SendPropertyChanging();
					this._Orientation = value;
					this.SendPropertyChanged("Orientation");
					this.OnOrientationChanged();
				}
			}
		}
		
		[Column(Storage="_OrientationColor", UpdateCheck=UpdateCheck.Never)]
		public string OrientationColor
		{
			get
			{
				return this._OrientationColor;
			}
			set
			{
				if ((this._OrientationColor != value))
				{
					this.OnOrientationColorChanging(value);
					this.SendPropertyChanging();
					this._OrientationColor = value;
					this.SendPropertyChanged("OrientationColor");
					this.OnOrientationColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTowerFireColumn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _Bnll;
		
		private string _BnllColor;
		
		private System.Nullable<double> _Elevation;
		
		private string _ElevationColor;
		
		private System.Nullable<int> _EqID;
		
		private string _EqidColor;
		
		private System.Nullable<double> _LiquidHoldup;
		
		private string _LiquidholdupColor;
		
		private System.Nullable<int> _NumberOfSegment;
		
		private string _NumberofsegmentColor;
		
		private System.Nullable<double> _PipingContingency;
		
		private string _PipingcontingencyColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBnllChanging(System.Nullable<double> value);
    partial void OnBnllChanged();
    partial void OnBnllColorChanging(string value);
    partial void OnBnllColorChanged();
    partial void OnElevationChanging(System.Nullable<double> value);
    partial void OnElevationChanged();
    partial void OnElevationColorChanging(string value);
    partial void OnElevationColorChanged();
    partial void OnEqIDChanging(System.Nullable<int> value);
    partial void OnEqIDChanged();
    partial void OnEqidColorChanging(string value);
    partial void OnEqidColorChanged();
    partial void OnLiquidHoldupChanging(System.Nullable<double> value);
    partial void OnLiquidHoldupChanged();
    partial void OnLiquidholdupColorChanging(string value);
    partial void OnLiquidholdupColorChanged();
    partial void OnNumberOfSegmentChanging(System.Nullable<int> value);
    partial void OnNumberOfSegmentChanged();
    partial void OnNumberofsegmentColorChanging(string value);
    partial void OnNumberofsegmentColorChanged();
    partial void OnPipingContingencyChanging(System.Nullable<double> value);
    partial void OnPipingContingencyChanged();
    partial void OnPipingcontingencyColorChanging(string value);
    partial void OnPipingcontingencyColorChanged();
    #endregion
		
		public tbTowerFireColumn()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Bnll", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Bnll
		{
			get
			{
				return this._Bnll;
			}
			set
			{
				if ((this._Bnll != value))
				{
					this.OnBnllChanging(value);
					this.SendPropertyChanging();
					this._Bnll = value;
					this.SendPropertyChanged("Bnll");
					this.OnBnllChanged();
				}
			}
		}
		
		[Column(Storage="_BnllColor", UpdateCheck=UpdateCheck.Never)]
		public string BnllColor
		{
			get
			{
				return this._BnllColor;
			}
			set
			{
				if ((this._BnllColor != value))
				{
					this.OnBnllColorChanging(value);
					this.SendPropertyChanging();
					this._BnllColor = value;
					this.SendPropertyChanged("BnllColor");
					this.OnBnllColorChanged();
				}
			}
		}
		
		[Column(Storage="_Elevation", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Elevation
		{
			get
			{
				return this._Elevation;
			}
			set
			{
				if ((this._Elevation != value))
				{
					this.OnElevationChanging(value);
					this.SendPropertyChanging();
					this._Elevation = value;
					this.SendPropertyChanged("Elevation");
					this.OnElevationChanged();
				}
			}
		}
		
		[Column(Storage="_ElevationColor", UpdateCheck=UpdateCheck.Never)]
		public string ElevationColor
		{
			get
			{
				return this._ElevationColor;
			}
			set
			{
				if ((this._ElevationColor != value))
				{
					this.OnElevationColorChanging(value);
					this.SendPropertyChanging();
					this._ElevationColor = value;
					this.SendPropertyChanged("ElevationColor");
					this.OnElevationColorChanged();
				}
			}
		}
		
		[Column(Storage="_EqID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EqID
		{
			get
			{
				return this._EqID;
			}
			set
			{
				if ((this._EqID != value))
				{
					this.OnEqIDChanging(value);
					this.SendPropertyChanging();
					this._EqID = value;
					this.SendPropertyChanged("EqID");
					this.OnEqIDChanged();
				}
			}
		}
		
		[Column(Storage="_EqidColor", UpdateCheck=UpdateCheck.Never)]
		public string EqidColor
		{
			get
			{
				return this._EqidColor;
			}
			set
			{
				if ((this._EqidColor != value))
				{
					this.OnEqidColorChanging(value);
					this.SendPropertyChanging();
					this._EqidColor = value;
					this.SendPropertyChanged("EqidColor");
					this.OnEqidColorChanged();
				}
			}
		}
		
		[Column(Storage="_LiquidHoldup", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> LiquidHoldup
		{
			get
			{
				return this._LiquidHoldup;
			}
			set
			{
				if ((this._LiquidHoldup != value))
				{
					this.OnLiquidHoldupChanging(value);
					this.SendPropertyChanging();
					this._LiquidHoldup = value;
					this.SendPropertyChanged("LiquidHoldup");
					this.OnLiquidHoldupChanged();
				}
			}
		}
		
		[Column(Storage="_LiquidholdupColor", UpdateCheck=UpdateCheck.Never)]
		public string LiquidholdupColor
		{
			get
			{
				return this._LiquidholdupColor;
			}
			set
			{
				if ((this._LiquidholdupColor != value))
				{
					this.OnLiquidholdupColorChanging(value);
					this.SendPropertyChanging();
					this._LiquidholdupColor = value;
					this.SendPropertyChanged("LiquidholdupColor");
					this.OnLiquidholdupColorChanged();
				}
			}
		}
		
		[Column(Storage="_NumberOfSegment", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> NumberOfSegment
		{
			get
			{
				return this._NumberOfSegment;
			}
			set
			{
				if ((this._NumberOfSegment != value))
				{
					this.OnNumberOfSegmentChanging(value);
					this.SendPropertyChanging();
					this._NumberOfSegment = value;
					this.SendPropertyChanged("NumberOfSegment");
					this.OnNumberOfSegmentChanged();
				}
			}
		}
		
		[Column(Storage="_NumberofsegmentColor", UpdateCheck=UpdateCheck.Never)]
		public string NumberofsegmentColor
		{
			get
			{
				return this._NumberofsegmentColor;
			}
			set
			{
				if ((this._NumberofsegmentColor != value))
				{
					this.OnNumberofsegmentColorChanging(value);
					this.SendPropertyChanging();
					this._NumberofsegmentColor = value;
					this.SendPropertyChanged("NumberofsegmentColor");
					this.OnNumberofsegmentColorChanged();
				}
			}
		}
		
		[Column(Storage="_PipingContingency", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> PipingContingency
		{
			get
			{
				return this._PipingContingency;
			}
			set
			{
				if ((this._PipingContingency != value))
				{
					this.OnPipingContingencyChanging(value);
					this.SendPropertyChanging();
					this._PipingContingency = value;
					this.SendPropertyChanged("PipingContingency");
					this.OnPipingContingencyChanged();
				}
			}
		}
		
		[Column(Storage="_PipingcontingencyColor", UpdateCheck=UpdateCheck.Never)]
		public string PipingcontingencyColor
		{
			get
			{
				return this._PipingcontingencyColor;
			}
			set
			{
				if ((this._PipingcontingencyColor != value))
				{
					this.OnPipingcontingencyColorChanging(value);
					this.SendPropertyChanging();
					this._PipingcontingencyColor = value;
					this.SendPropertyChanged("PipingcontingencyColor");
					this.OnPipingcontingencyColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTowerFireColumnDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ColumnID;
		
		private string _ColumnidColor;
		
		private System.Nullable<double> _Diameter;
		
		private string _DiameterColor;
		
		private System.Nullable<double> _Height;
		
		private string _HeightColor;
		
		private string _Internal;
		
		private string _InternalColor;
		
		private System.Nullable<double> _Segment;
		
		private string _SegmentColor;
		
		private System.Nullable<int> _Trays;
		
		private string _TraysColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnColumnIDChanging(System.Nullable<int> value);
    partial void OnColumnIDChanged();
    partial void OnColumnidColorChanging(string value);
    partial void OnColumnidColorChanged();
    partial void OnDiameterChanging(System.Nullable<double> value);
    partial void OnDiameterChanged();
    partial void OnDiameterColorChanging(string value);
    partial void OnDiameterColorChanged();
    partial void OnHeightChanging(System.Nullable<double> value);
    partial void OnHeightChanged();
    partial void OnHeightColorChanging(string value);
    partial void OnHeightColorChanged();
    partial void OnInternalChanging(string value);
    partial void OnInternalChanged();
    partial void OnInternalColorChanging(string value);
    partial void OnInternalColorChanged();
    partial void OnSegmentChanging(System.Nullable<double> value);
    partial void OnSegmentChanged();
    partial void OnSegmentColorChanging(string value);
    partial void OnSegmentColorChanged();
    partial void OnTraysChanging(System.Nullable<int> value);
    partial void OnTraysChanged();
    partial void OnTraysColorChanging(string value);
    partial void OnTraysColorChanged();
    #endregion
		
		public tbTowerFireColumnDetail()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ColumnID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ColumnID
		{
			get
			{
				return this._ColumnID;
			}
			set
			{
				if ((this._ColumnID != value))
				{
					this.OnColumnIDChanging(value);
					this.SendPropertyChanging();
					this._ColumnID = value;
					this.SendPropertyChanged("ColumnID");
					this.OnColumnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ColumnidColor", UpdateCheck=UpdateCheck.Never)]
		public string ColumnidColor
		{
			get
			{
				return this._ColumnidColor;
			}
			set
			{
				if ((this._ColumnidColor != value))
				{
					this.OnColumnidColorChanging(value);
					this.SendPropertyChanging();
					this._ColumnidColor = value;
					this.SendPropertyChanged("ColumnidColor");
					this.OnColumnidColorChanged();
				}
			}
		}
		
		[Column(Storage="_Diameter", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Diameter
		{
			get
			{
				return this._Diameter;
			}
			set
			{
				if ((this._Diameter != value))
				{
					this.OnDiameterChanging(value);
					this.SendPropertyChanging();
					this._Diameter = value;
					this.SendPropertyChanged("Diameter");
					this.OnDiameterChanged();
				}
			}
		}
		
		[Column(Storage="_DiameterColor", UpdateCheck=UpdateCheck.Never)]
		public string DiameterColor
		{
			get
			{
				return this._DiameterColor;
			}
			set
			{
				if ((this._DiameterColor != value))
				{
					this.OnDiameterColorChanging(value);
					this.SendPropertyChanging();
					this._DiameterColor = value;
					this.SendPropertyChanged("DiameterColor");
					this.OnDiameterColorChanged();
				}
			}
		}
		
		[Column(Storage="_Height", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Column(Storage="_HeightColor", UpdateCheck=UpdateCheck.Never)]
		public string HeightColor
		{
			get
			{
				return this._HeightColor;
			}
			set
			{
				if ((this._HeightColor != value))
				{
					this.OnHeightColorChanging(value);
					this.SendPropertyChanging();
					this._HeightColor = value;
					this.SendPropertyChanged("HeightColor");
					this.OnHeightColorChanged();
				}
			}
		}
		
		[Column(Storage="_Internal", UpdateCheck=UpdateCheck.Never)]
		public string Internal
		{
			get
			{
				return this._Internal;
			}
			set
			{
				if ((this._Internal != value))
				{
					this.OnInternalChanging(value);
					this.SendPropertyChanging();
					this._Internal = value;
					this.SendPropertyChanged("Internal");
					this.OnInternalChanged();
				}
			}
		}
		
		[Column(Storage="_InternalColor", UpdateCheck=UpdateCheck.Never)]
		public string InternalColor
		{
			get
			{
				return this._InternalColor;
			}
			set
			{
				if ((this._InternalColor != value))
				{
					this.OnInternalColorChanging(value);
					this.SendPropertyChanging();
					this._InternalColor = value;
					this.SendPropertyChanged("InternalColor");
					this.OnInternalColorChanged();
				}
			}
		}
		
		[Column(Storage="_Segment", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Segment
		{
			get
			{
				return this._Segment;
			}
			set
			{
				if ((this._Segment != value))
				{
					this.OnSegmentChanging(value);
					this.SendPropertyChanging();
					this._Segment = value;
					this.SendPropertyChanged("Segment");
					this.OnSegmentChanged();
				}
			}
		}
		
		[Column(Storage="_SegmentColor", UpdateCheck=UpdateCheck.Never)]
		public string SegmentColor
		{
			get
			{
				return this._SegmentColor;
			}
			set
			{
				if ((this._SegmentColor != value))
				{
					this.OnSegmentColorChanging(value);
					this.SendPropertyChanging();
					this._SegmentColor = value;
					this.SendPropertyChanged("SegmentColor");
					this.OnSegmentColorChanged();
				}
			}
		}
		
		[Column(Storage="_Trays", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Trays
		{
			get
			{
				return this._Trays;
			}
			set
			{
				if ((this._Trays != value))
				{
					this.OnTraysChanging(value);
					this.SendPropertyChanging();
					this._Trays = value;
					this.SendPropertyChanged("Trays");
					this.OnTraysChanged();
				}
			}
		}
		
		[Column(Storage="_TraysColor", UpdateCheck=UpdateCheck.Never)]
		public string TraysColor
		{
			get
			{
				return this._TraysColor;
			}
			set
			{
				if ((this._TraysColor != value))
				{
					this.OnTraysColorChanging(value);
					this.SendPropertyChanging();
					this._TraysColor = value;
					this.SendPropertyChanged("TraysColor");
					this.OnTraysColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTowerFireCooler : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _Elevation;
		
		private string _ElevationColor;
		
		private System.Nullable<int> _EqID;
		
		private string _EqidColor;
		
		private System.Nullable<double> _PipingContingency;
		
		private string _PipingcontingencyColor;
		
		private System.Nullable<double> _WettedArea;
		
		private string _WettedareaColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnElevationChanging(System.Nullable<double> value);
    partial void OnElevationChanged();
    partial void OnElevationColorChanging(string value);
    partial void OnElevationColorChanged();
    partial void OnEqIDChanging(System.Nullable<int> value);
    partial void OnEqIDChanged();
    partial void OnEqidColorChanging(string value);
    partial void OnEqidColorChanged();
    partial void OnPipingContingencyChanging(System.Nullable<double> value);
    partial void OnPipingContingencyChanged();
    partial void OnPipingcontingencyColorChanging(string value);
    partial void OnPipingcontingencyColorChanged();
    partial void OnWettedAreaChanging(System.Nullable<double> value);
    partial void OnWettedAreaChanged();
    partial void OnWettedareaColorChanging(string value);
    partial void OnWettedareaColorChanged();
    #endregion
		
		public tbTowerFireCooler()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Elevation", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Elevation
		{
			get
			{
				return this._Elevation;
			}
			set
			{
				if ((this._Elevation != value))
				{
					this.OnElevationChanging(value);
					this.SendPropertyChanging();
					this._Elevation = value;
					this.SendPropertyChanged("Elevation");
					this.OnElevationChanged();
				}
			}
		}
		
		[Column(Storage="_ElevationColor", UpdateCheck=UpdateCheck.Never)]
		public string ElevationColor
		{
			get
			{
				return this._ElevationColor;
			}
			set
			{
				if ((this._ElevationColor != value))
				{
					this.OnElevationColorChanging(value);
					this.SendPropertyChanging();
					this._ElevationColor = value;
					this.SendPropertyChanged("ElevationColor");
					this.OnElevationColorChanged();
				}
			}
		}
		
		[Column(Storage="_EqID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EqID
		{
			get
			{
				return this._EqID;
			}
			set
			{
				if ((this._EqID != value))
				{
					this.OnEqIDChanging(value);
					this.SendPropertyChanging();
					this._EqID = value;
					this.SendPropertyChanged("EqID");
					this.OnEqIDChanged();
				}
			}
		}
		
		[Column(Storage="_EqidColor", UpdateCheck=UpdateCheck.Never)]
		public string EqidColor
		{
			get
			{
				return this._EqidColor;
			}
			set
			{
				if ((this._EqidColor != value))
				{
					this.OnEqidColorChanging(value);
					this.SendPropertyChanging();
					this._EqidColor = value;
					this.SendPropertyChanged("EqidColor");
					this.OnEqidColorChanged();
				}
			}
		}
		
		[Column(Storage="_PipingContingency", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> PipingContingency
		{
			get
			{
				return this._PipingContingency;
			}
			set
			{
				if ((this._PipingContingency != value))
				{
					this.OnPipingContingencyChanging(value);
					this.SendPropertyChanging();
					this._PipingContingency = value;
					this.SendPropertyChanged("PipingContingency");
					this.OnPipingContingencyChanged();
				}
			}
		}
		
		[Column(Storage="_PipingcontingencyColor", UpdateCheck=UpdateCheck.Never)]
		public string PipingcontingencyColor
		{
			get
			{
				return this._PipingcontingencyColor;
			}
			set
			{
				if ((this._PipingcontingencyColor != value))
				{
					this.OnPipingcontingencyColorChanging(value);
					this.SendPropertyChanging();
					this._PipingcontingencyColor = value;
					this.SendPropertyChanged("PipingcontingencyColor");
					this.OnPipingcontingencyColorChanged();
				}
			}
		}
		
		[Column(Storage="_WettedArea", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> WettedArea
		{
			get
			{
				return this._WettedArea;
			}
			set
			{
				if ((this._WettedArea != value))
				{
					this.OnWettedAreaChanging(value);
					this.SendPropertyChanging();
					this._WettedArea = value;
					this.SendPropertyChanged("WettedArea");
					this.OnWettedAreaChanged();
				}
			}
		}
		
		[Column(Storage="_WettedareaColor", UpdateCheck=UpdateCheck.Never)]
		public string WettedareaColor
		{
			get
			{
				return this._WettedareaColor;
			}
			set
			{
				if ((this._WettedareaColor != value))
				{
					this.OnWettedareaColorChanging(value);
					this.SendPropertyChanging();
					this._WettedareaColor = value;
					this.SendPropertyChanged("WettedareaColor");
					this.OnWettedareaColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTowerFireDrum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _BootDiameter;
		
		private string _BootdiameterColor;
		
		private System.Nullable<double> _BootHeight;
		
		private string _BootheightColor;
		
		private System.Nullable<double> _Diameter;
		
		private string _DiameterColor;
		
		private System.Nullable<double> _Elevation;
		
		private string _ElevationColor;
		
		private System.Nullable<int> _EqID;
		
		private string _EqidColor;
		
		private System.Nullable<int> _HeadNumber;
		
		private string _HeadnumberColor;
		
		private string _HeadType;
		
		private string _HeadtypeColor;
		
		private System.Nullable<double> _Length;
		
		private string _LengthColor;
		
		private System.Nullable<double> _NormalLiquidLevel;
		
		private string _NormalliquidlevelColor;
		
		private string _Orientation;
		
		private string _OrientationColor;
		
		private System.Nullable<double> _PipingContingency;
		
		private string _PipingcontingencyColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBootDiameterChanging(System.Nullable<double> value);
    partial void OnBootDiameterChanged();
    partial void OnBootdiameterColorChanging(string value);
    partial void OnBootdiameterColorChanged();
    partial void OnBootHeightChanging(System.Nullable<double> value);
    partial void OnBootHeightChanged();
    partial void OnBootheightColorChanging(string value);
    partial void OnBootheightColorChanged();
    partial void OnDiameterChanging(System.Nullable<double> value);
    partial void OnDiameterChanged();
    partial void OnDiameterColorChanging(string value);
    partial void OnDiameterColorChanged();
    partial void OnElevationChanging(System.Nullable<double> value);
    partial void OnElevationChanged();
    partial void OnElevationColorChanging(string value);
    partial void OnElevationColorChanged();
    partial void OnEqIDChanging(System.Nullable<int> value);
    partial void OnEqIDChanged();
    partial void OnEqidColorChanging(string value);
    partial void OnEqidColorChanged();
    partial void OnHeadNumberChanging(System.Nullable<int> value);
    partial void OnHeadNumberChanged();
    partial void OnHeadnumberColorChanging(string value);
    partial void OnHeadnumberColorChanged();
    partial void OnHeadTypeChanging(string value);
    partial void OnHeadTypeChanged();
    partial void OnHeadtypeColorChanging(string value);
    partial void OnHeadtypeColorChanged();
    partial void OnLengthChanging(System.Nullable<double> value);
    partial void OnLengthChanged();
    partial void OnLengthColorChanging(string value);
    partial void OnLengthColorChanged();
    partial void OnNormalLiquidLevelChanging(System.Nullable<double> value);
    partial void OnNormalLiquidLevelChanged();
    partial void OnNormalliquidlevelColorChanging(string value);
    partial void OnNormalliquidlevelColorChanged();
    partial void OnOrientationChanging(string value);
    partial void OnOrientationChanged();
    partial void OnOrientationColorChanging(string value);
    partial void OnOrientationColorChanged();
    partial void OnPipingContingencyChanging(System.Nullable<double> value);
    partial void OnPipingContingencyChanged();
    partial void OnPipingcontingencyColorChanging(string value);
    partial void OnPipingcontingencyColorChanged();
    #endregion
		
		public tbTowerFireDrum()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_BootDiameter", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BootDiameter
		{
			get
			{
				return this._BootDiameter;
			}
			set
			{
				if ((this._BootDiameter != value))
				{
					this.OnBootDiameterChanging(value);
					this.SendPropertyChanging();
					this._BootDiameter = value;
					this.SendPropertyChanged("BootDiameter");
					this.OnBootDiameterChanged();
				}
			}
		}
		
		[Column(Storage="_BootdiameterColor", UpdateCheck=UpdateCheck.Never)]
		public string BootdiameterColor
		{
			get
			{
				return this._BootdiameterColor;
			}
			set
			{
				if ((this._BootdiameterColor != value))
				{
					this.OnBootdiameterColorChanging(value);
					this.SendPropertyChanging();
					this._BootdiameterColor = value;
					this.SendPropertyChanged("BootdiameterColor");
					this.OnBootdiameterColorChanged();
				}
			}
		}
		
		[Column(Storage="_BootHeight", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BootHeight
		{
			get
			{
				return this._BootHeight;
			}
			set
			{
				if ((this._BootHeight != value))
				{
					this.OnBootHeightChanging(value);
					this.SendPropertyChanging();
					this._BootHeight = value;
					this.SendPropertyChanged("BootHeight");
					this.OnBootHeightChanged();
				}
			}
		}
		
		[Column(Storage="_BootheightColor", UpdateCheck=UpdateCheck.Never)]
		public string BootheightColor
		{
			get
			{
				return this._BootheightColor;
			}
			set
			{
				if ((this._BootheightColor != value))
				{
					this.OnBootheightColorChanging(value);
					this.SendPropertyChanging();
					this._BootheightColor = value;
					this.SendPropertyChanged("BootheightColor");
					this.OnBootheightColorChanged();
				}
			}
		}
		
		[Column(Storage="_Diameter", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Diameter
		{
			get
			{
				return this._Diameter;
			}
			set
			{
				if ((this._Diameter != value))
				{
					this.OnDiameterChanging(value);
					this.SendPropertyChanging();
					this._Diameter = value;
					this.SendPropertyChanged("Diameter");
					this.OnDiameterChanged();
				}
			}
		}
		
		[Column(Storage="_DiameterColor", UpdateCheck=UpdateCheck.Never)]
		public string DiameterColor
		{
			get
			{
				return this._DiameterColor;
			}
			set
			{
				if ((this._DiameterColor != value))
				{
					this.OnDiameterColorChanging(value);
					this.SendPropertyChanging();
					this._DiameterColor = value;
					this.SendPropertyChanged("DiameterColor");
					this.OnDiameterColorChanged();
				}
			}
		}
		
		[Column(Storage="_Elevation", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Elevation
		{
			get
			{
				return this._Elevation;
			}
			set
			{
				if ((this._Elevation != value))
				{
					this.OnElevationChanging(value);
					this.SendPropertyChanging();
					this._Elevation = value;
					this.SendPropertyChanged("Elevation");
					this.OnElevationChanged();
				}
			}
		}
		
		[Column(Storage="_ElevationColor", UpdateCheck=UpdateCheck.Never)]
		public string ElevationColor
		{
			get
			{
				return this._ElevationColor;
			}
			set
			{
				if ((this._ElevationColor != value))
				{
					this.OnElevationColorChanging(value);
					this.SendPropertyChanging();
					this._ElevationColor = value;
					this.SendPropertyChanged("ElevationColor");
					this.OnElevationColorChanged();
				}
			}
		}
		
		[Column(Storage="_EqID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EqID
		{
			get
			{
				return this._EqID;
			}
			set
			{
				if ((this._EqID != value))
				{
					this.OnEqIDChanging(value);
					this.SendPropertyChanging();
					this._EqID = value;
					this.SendPropertyChanged("EqID");
					this.OnEqIDChanged();
				}
			}
		}
		
		[Column(Storage="_EqidColor", UpdateCheck=UpdateCheck.Never)]
		public string EqidColor
		{
			get
			{
				return this._EqidColor;
			}
			set
			{
				if ((this._EqidColor != value))
				{
					this.OnEqidColorChanging(value);
					this.SendPropertyChanging();
					this._EqidColor = value;
					this.SendPropertyChanged("EqidColor");
					this.OnEqidColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeadNumber", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> HeadNumber
		{
			get
			{
				return this._HeadNumber;
			}
			set
			{
				if ((this._HeadNumber != value))
				{
					this.OnHeadNumberChanging(value);
					this.SendPropertyChanging();
					this._HeadNumber = value;
					this.SendPropertyChanged("HeadNumber");
					this.OnHeadNumberChanged();
				}
			}
		}
		
		[Column(Storage="_HeadnumberColor", UpdateCheck=UpdateCheck.Never)]
		public string HeadnumberColor
		{
			get
			{
				return this._HeadnumberColor;
			}
			set
			{
				if ((this._HeadnumberColor != value))
				{
					this.OnHeadnumberColorChanging(value);
					this.SendPropertyChanging();
					this._HeadnumberColor = value;
					this.SendPropertyChanged("HeadnumberColor");
					this.OnHeadnumberColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeadType", UpdateCheck=UpdateCheck.Never)]
		public string HeadType
		{
			get
			{
				return this._HeadType;
			}
			set
			{
				if ((this._HeadType != value))
				{
					this.OnHeadTypeChanging(value);
					this.SendPropertyChanging();
					this._HeadType = value;
					this.SendPropertyChanged("HeadType");
					this.OnHeadTypeChanged();
				}
			}
		}
		
		[Column(Storage="_HeadtypeColor", UpdateCheck=UpdateCheck.Never)]
		public string HeadtypeColor
		{
			get
			{
				return this._HeadtypeColor;
			}
			set
			{
				if ((this._HeadtypeColor != value))
				{
					this.OnHeadtypeColorChanging(value);
					this.SendPropertyChanging();
					this._HeadtypeColor = value;
					this.SendPropertyChanged("HeadtypeColor");
					this.OnHeadtypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_Length", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_LengthColor", UpdateCheck=UpdateCheck.Never)]
		public string LengthColor
		{
			get
			{
				return this._LengthColor;
			}
			set
			{
				if ((this._LengthColor != value))
				{
					this.OnLengthColorChanging(value);
					this.SendPropertyChanging();
					this._LengthColor = value;
					this.SendPropertyChanged("LengthColor");
					this.OnLengthColorChanged();
				}
			}
		}
		
		[Column(Storage="_NormalLiquidLevel", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> NormalLiquidLevel
		{
			get
			{
				return this._NormalLiquidLevel;
			}
			set
			{
				if ((this._NormalLiquidLevel != value))
				{
					this.OnNormalLiquidLevelChanging(value);
					this.SendPropertyChanging();
					this._NormalLiquidLevel = value;
					this.SendPropertyChanged("NormalLiquidLevel");
					this.OnNormalLiquidLevelChanged();
				}
			}
		}
		
		[Column(Storage="_NormalliquidlevelColor", UpdateCheck=UpdateCheck.Never)]
		public string NormalliquidlevelColor
		{
			get
			{
				return this._NormalliquidlevelColor;
			}
			set
			{
				if ((this._NormalliquidlevelColor != value))
				{
					this.OnNormalliquidlevelColorChanging(value);
					this.SendPropertyChanging();
					this._NormalliquidlevelColor = value;
					this.SendPropertyChanged("NormalliquidlevelColor");
					this.OnNormalliquidlevelColorChanged();
				}
			}
		}
		
		[Column(Storage="_Orientation", UpdateCheck=UpdateCheck.Never)]
		public string Orientation
		{
			get
			{
				return this._Orientation;
			}
			set
			{
				if ((this._Orientation != value))
				{
					this.OnOrientationChanging(value);
					this.SendPropertyChanging();
					this._Orientation = value;
					this.SendPropertyChanged("Orientation");
					this.OnOrientationChanged();
				}
			}
		}
		
		[Column(Storage="_OrientationColor", UpdateCheck=UpdateCheck.Never)]
		public string OrientationColor
		{
			get
			{
				return this._OrientationColor;
			}
			set
			{
				if ((this._OrientationColor != value))
				{
					this.OnOrientationColorChanging(value);
					this.SendPropertyChanging();
					this._OrientationColor = value;
					this.SendPropertyChanged("OrientationColor");
					this.OnOrientationColorChanged();
				}
			}
		}
		
		[Column(Storage="_PipingContingency", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> PipingContingency
		{
			get
			{
				return this._PipingContingency;
			}
			set
			{
				if ((this._PipingContingency != value))
				{
					this.OnPipingContingencyChanging(value);
					this.SendPropertyChanging();
					this._PipingContingency = value;
					this.SendPropertyChanged("PipingContingency");
					this.OnPipingContingencyChanged();
				}
			}
		}
		
		[Column(Storage="_PipingcontingencyColor", UpdateCheck=UpdateCheck.Never)]
		public string PipingcontingencyColor
		{
			get
			{
				return this._PipingcontingencyColor;
			}
			set
			{
				if ((this._PipingcontingencyColor != value))
				{
					this.OnPipingcontingencyColorChanging(value);
					this.SendPropertyChanging();
					this._PipingcontingencyColor = value;
					this.SendPropertyChanged("PipingcontingencyColor");
					this.OnPipingcontingencyColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTowerFireEq : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _Elevation;
		
		private string _ElevationColor;
		
		private string _EqName;
		
		private string _EqnameColor;
		
		private string _EqType;
		
		private System.Nullable<double> _FFactor;
		
		private string _FfactorColor;
		
		private string _FireidColor;
		
		private bool _FireZone;
		
		private string _FirezoneColor;
		
		private string _HeatInput;
		
		private string _HeatinputColor;
		
		private System.Nullable<double> _ReliefLoad;
		
		private string _ReliefloadColor;
		
		private System.Nullable<int> _ScenarioID;
		
		private string _TypeColor;
		
		private System.Nullable<double> _WettedArea;
		
		private string _WettedareaColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnElevationChanging(System.Nullable<double> value);
    partial void OnElevationChanged();
    partial void OnElevationColorChanging(string value);
    partial void OnElevationColorChanged();
    partial void OnEqNameChanging(string value);
    partial void OnEqNameChanged();
    partial void OnEqnameColorChanging(string value);
    partial void OnEqnameColorChanged();
    partial void OnEqTypeChanging(string value);
    partial void OnEqTypeChanged();
    partial void OnFFactorChanging(System.Nullable<double> value);
    partial void OnFFactorChanged();
    partial void OnFfactorColorChanging(string value);
    partial void OnFfactorColorChanged();
    partial void OnFireidColorChanging(string value);
    partial void OnFireidColorChanged();
    partial void OnFireZoneChanging(bool value);
    partial void OnFireZoneChanged();
    partial void OnFirezoneColorChanging(string value);
    partial void OnFirezoneColorChanged();
    partial void OnHeatInputChanging(string value);
    partial void OnHeatInputChanged();
    partial void OnHeatinputColorChanging(string value);
    partial void OnHeatinputColorChanged();
    partial void OnReliefLoadChanging(System.Nullable<double> value);
    partial void OnReliefLoadChanged();
    partial void OnReliefloadColorChanging(string value);
    partial void OnReliefloadColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnTypeColorChanging(string value);
    partial void OnTypeColorChanged();
    partial void OnWettedAreaChanging(System.Nullable<double> value);
    partial void OnWettedAreaChanged();
    partial void OnWettedareaColorChanging(string value);
    partial void OnWettedareaColorChanged();
    #endregion
		
		public tbTowerFireEq()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Elevation", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Elevation
		{
			get
			{
				return this._Elevation;
			}
			set
			{
				if ((this._Elevation != value))
				{
					this.OnElevationChanging(value);
					this.SendPropertyChanging();
					this._Elevation = value;
					this.SendPropertyChanged("Elevation");
					this.OnElevationChanged();
				}
			}
		}
		
		[Column(Storage="_ElevationColor", UpdateCheck=UpdateCheck.Never)]
		public string ElevationColor
		{
			get
			{
				return this._ElevationColor;
			}
			set
			{
				if ((this._ElevationColor != value))
				{
					this.OnElevationColorChanging(value);
					this.SendPropertyChanging();
					this._ElevationColor = value;
					this.SendPropertyChanged("ElevationColor");
					this.OnElevationColorChanged();
				}
			}
		}
		
		[Column(Storage="_EqName", UpdateCheck=UpdateCheck.Never)]
		public string EqName
		{
			get
			{
				return this._EqName;
			}
			set
			{
				if ((this._EqName != value))
				{
					this.OnEqNameChanging(value);
					this.SendPropertyChanging();
					this._EqName = value;
					this.SendPropertyChanged("EqName");
					this.OnEqNameChanged();
				}
			}
		}
		
		[Column(Storage="_EqnameColor", UpdateCheck=UpdateCheck.Never)]
		public string EqnameColor
		{
			get
			{
				return this._EqnameColor;
			}
			set
			{
				if ((this._EqnameColor != value))
				{
					this.OnEqnameColorChanging(value);
					this.SendPropertyChanging();
					this._EqnameColor = value;
					this.SendPropertyChanged("EqnameColor");
					this.OnEqnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_EqType", UpdateCheck=UpdateCheck.Never)]
		public string EqType
		{
			get
			{
				return this._EqType;
			}
			set
			{
				if ((this._EqType != value))
				{
					this.OnEqTypeChanging(value);
					this.SendPropertyChanging();
					this._EqType = value;
					this.SendPropertyChanged("EqType");
					this.OnEqTypeChanged();
				}
			}
		}
		
		[Column(Storage="_FFactor", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> FFactor
		{
			get
			{
				return this._FFactor;
			}
			set
			{
				if ((this._FFactor != value))
				{
					this.OnFFactorChanging(value);
					this.SendPropertyChanging();
					this._FFactor = value;
					this.SendPropertyChanged("FFactor");
					this.OnFFactorChanged();
				}
			}
		}
		
		[Column(Storage="_FfactorColor", UpdateCheck=UpdateCheck.Never)]
		public string FfactorColor
		{
			get
			{
				return this._FfactorColor;
			}
			set
			{
				if ((this._FfactorColor != value))
				{
					this.OnFfactorColorChanging(value);
					this.SendPropertyChanging();
					this._FfactorColor = value;
					this.SendPropertyChanged("FfactorColor");
					this.OnFfactorColorChanged();
				}
			}
		}
		
		[Column(Storage="_FireidColor", UpdateCheck=UpdateCheck.Never)]
		public string FireidColor
		{
			get
			{
				return this._FireidColor;
			}
			set
			{
				if ((this._FireidColor != value))
				{
					this.OnFireidColorChanging(value);
					this.SendPropertyChanging();
					this._FireidColor = value;
					this.SendPropertyChanged("FireidColor");
					this.OnFireidColorChanged();
				}
			}
		}
		
		[Column(Storage="_FireZone", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool FireZone
		{
			get
			{
				return this._FireZone;
			}
			set
			{
				if ((this._FireZone != value))
				{
					this.OnFireZoneChanging(value);
					this.SendPropertyChanging();
					this._FireZone = value;
					this.SendPropertyChanged("FireZone");
					this.OnFireZoneChanged();
				}
			}
		}
		
		[Column(Storage="_FirezoneColor", UpdateCheck=UpdateCheck.Never)]
		public string FirezoneColor
		{
			get
			{
				return this._FirezoneColor;
			}
			set
			{
				if ((this._FirezoneColor != value))
				{
					this.OnFirezoneColorChanging(value);
					this.SendPropertyChanging();
					this._FirezoneColor = value;
					this.SendPropertyChanged("FirezoneColor");
					this.OnFirezoneColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeatInput", UpdateCheck=UpdateCheck.Never)]
		public string HeatInput
		{
			get
			{
				return this._HeatInput;
			}
			set
			{
				if ((this._HeatInput != value))
				{
					this.OnHeatInputChanging(value);
					this.SendPropertyChanging();
					this._HeatInput = value;
					this.SendPropertyChanged("HeatInput");
					this.OnHeatInputChanged();
				}
			}
		}
		
		[Column(Storage="_HeatinputColor", UpdateCheck=UpdateCheck.Never)]
		public string HeatinputColor
		{
			get
			{
				return this._HeatinputColor;
			}
			set
			{
				if ((this._HeatinputColor != value))
				{
					this.OnHeatinputColorChanging(value);
					this.SendPropertyChanging();
					this._HeatinputColor = value;
					this.SendPropertyChanged("HeatinputColor");
					this.OnHeatinputColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefLoad", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefLoad
		{
			get
			{
				return this._ReliefLoad;
			}
			set
			{
				if ((this._ReliefLoad != value))
				{
					this.OnReliefLoadChanging(value);
					this.SendPropertyChanging();
					this._ReliefLoad = value;
					this.SendPropertyChanged("ReliefLoad");
					this.OnReliefLoadChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefloadColor", UpdateCheck=UpdateCheck.Never)]
		public string ReliefloadColor
		{
			get
			{
				return this._ReliefloadColor;
			}
			set
			{
				if ((this._ReliefloadColor != value))
				{
					this.OnReliefloadColorChanging(value);
					this.SendPropertyChanging();
					this._ReliefloadColor = value;
					this.SendPropertyChanged("ReliefloadColor");
					this.OnReliefloadColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeColor", UpdateCheck=UpdateCheck.Never)]
		public string TypeColor
		{
			get
			{
				return this._TypeColor;
			}
			set
			{
				if ((this._TypeColor != value))
				{
					this.OnTypeColorChanging(value);
					this.SendPropertyChanging();
					this._TypeColor = value;
					this.SendPropertyChanged("TypeColor");
					this.OnTypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_WettedArea", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> WettedArea
		{
			get
			{
				return this._WettedArea;
			}
			set
			{
				if ((this._WettedArea != value))
				{
					this.OnWettedAreaChanging(value);
					this.SendPropertyChanging();
					this._WettedArea = value;
					this.SendPropertyChanged("WettedArea");
					this.OnWettedAreaChanged();
				}
			}
		}
		
		[Column(Storage="_WettedareaColor", UpdateCheck=UpdateCheck.Never)]
		public string WettedareaColor
		{
			get
			{
				return this._WettedareaColor;
			}
			set
			{
				if ((this._WettedareaColor != value))
				{
					this.OnWettedareaColorChanging(value);
					this.SendPropertyChanging();
					this._WettedareaColor = value;
					this.SendPropertyChanged("WettedareaColor");
					this.OnWettedareaColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTowerFireHX : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _Elevation;
		
		private string _ElevationColor;
		
		private System.Nullable<int> _EqID;
		
		private string _EqidColor;
		
		private string _ExposedToFire;
		
		private string _ExposedtofireColor;
		
		private System.Nullable<double> _Length;
		
		private string _LengthColor;
		
		private System.Nullable<double> _Od;
		
		private string _OdColor;
		
		private System.Nullable<double> _PipingContingency;
		
		private string _PipingcontingencyColor;
		
		private string _Type;
		
		private string _TypeColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnElevationChanging(System.Nullable<double> value);
    partial void OnElevationChanged();
    partial void OnElevationColorChanging(string value);
    partial void OnElevationColorChanged();
    partial void OnEqIDChanging(System.Nullable<int> value);
    partial void OnEqIDChanged();
    partial void OnEqidColorChanging(string value);
    partial void OnEqidColorChanged();
    partial void OnExposedToFireChanging(string value);
    partial void OnExposedToFireChanged();
    partial void OnExposedtofireColorChanging(string value);
    partial void OnExposedtofireColorChanged();
    partial void OnLengthChanging(System.Nullable<double> value);
    partial void OnLengthChanged();
    partial void OnLengthColorChanging(string value);
    partial void OnLengthColorChanged();
    partial void OnOdChanging(System.Nullable<double> value);
    partial void OnOdChanged();
    partial void OnOdColorChanging(string value);
    partial void OnOdColorChanged();
    partial void OnPipingContingencyChanging(System.Nullable<double> value);
    partial void OnPipingContingencyChanged();
    partial void OnPipingcontingencyColorChanging(string value);
    partial void OnPipingcontingencyColorChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTypeColorChanging(string value);
    partial void OnTypeColorChanged();
    #endregion
		
		public tbTowerFireHX()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Elevation", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Elevation
		{
			get
			{
				return this._Elevation;
			}
			set
			{
				if ((this._Elevation != value))
				{
					this.OnElevationChanging(value);
					this.SendPropertyChanging();
					this._Elevation = value;
					this.SendPropertyChanged("Elevation");
					this.OnElevationChanged();
				}
			}
		}
		
		[Column(Storage="_ElevationColor", UpdateCheck=UpdateCheck.Never)]
		public string ElevationColor
		{
			get
			{
				return this._ElevationColor;
			}
			set
			{
				if ((this._ElevationColor != value))
				{
					this.OnElevationColorChanging(value);
					this.SendPropertyChanging();
					this._ElevationColor = value;
					this.SendPropertyChanged("ElevationColor");
					this.OnElevationColorChanged();
				}
			}
		}
		
		[Column(Storage="_EqID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EqID
		{
			get
			{
				return this._EqID;
			}
			set
			{
				if ((this._EqID != value))
				{
					this.OnEqIDChanging(value);
					this.SendPropertyChanging();
					this._EqID = value;
					this.SendPropertyChanged("EqID");
					this.OnEqIDChanged();
				}
			}
		}
		
		[Column(Storage="_EqidColor", UpdateCheck=UpdateCheck.Never)]
		public string EqidColor
		{
			get
			{
				return this._EqidColor;
			}
			set
			{
				if ((this._EqidColor != value))
				{
					this.OnEqidColorChanging(value);
					this.SendPropertyChanging();
					this._EqidColor = value;
					this.SendPropertyChanged("EqidColor");
					this.OnEqidColorChanged();
				}
			}
		}
		
		[Column(Storage="_ExposedToFire", UpdateCheck=UpdateCheck.Never)]
		public string ExposedToFire
		{
			get
			{
				return this._ExposedToFire;
			}
			set
			{
				if ((this._ExposedToFire != value))
				{
					this.OnExposedToFireChanging(value);
					this.SendPropertyChanging();
					this._ExposedToFire = value;
					this.SendPropertyChanged("ExposedToFire");
					this.OnExposedToFireChanged();
				}
			}
		}
		
		[Column(Storage="_ExposedtofireColor", UpdateCheck=UpdateCheck.Never)]
		public string ExposedtofireColor
		{
			get
			{
				return this._ExposedtofireColor;
			}
			set
			{
				if ((this._ExposedtofireColor != value))
				{
					this.OnExposedtofireColorChanging(value);
					this.SendPropertyChanging();
					this._ExposedtofireColor = value;
					this.SendPropertyChanged("ExposedtofireColor");
					this.OnExposedtofireColorChanged();
				}
			}
		}
		
		[Column(Storage="_Length", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_LengthColor", UpdateCheck=UpdateCheck.Never)]
		public string LengthColor
		{
			get
			{
				return this._LengthColor;
			}
			set
			{
				if ((this._LengthColor != value))
				{
					this.OnLengthColorChanging(value);
					this.SendPropertyChanging();
					this._LengthColor = value;
					this.SendPropertyChanged("LengthColor");
					this.OnLengthColorChanged();
				}
			}
		}
		
		[Column(Storage="_Od", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Od
		{
			get
			{
				return this._Od;
			}
			set
			{
				if ((this._Od != value))
				{
					this.OnOdChanging(value);
					this.SendPropertyChanging();
					this._Od = value;
					this.SendPropertyChanged("Od");
					this.OnOdChanged();
				}
			}
		}
		
		[Column(Storage="_OdColor", UpdateCheck=UpdateCheck.Never)]
		public string OdColor
		{
			get
			{
				return this._OdColor;
			}
			set
			{
				if ((this._OdColor != value))
				{
					this.OnOdColorChanging(value);
					this.SendPropertyChanging();
					this._OdColor = value;
					this.SendPropertyChanged("OdColor");
					this.OnOdColorChanged();
				}
			}
		}
		
		[Column(Storage="_PipingContingency", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> PipingContingency
		{
			get
			{
				return this._PipingContingency;
			}
			set
			{
				if ((this._PipingContingency != value))
				{
					this.OnPipingContingencyChanging(value);
					this.SendPropertyChanging();
					this._PipingContingency = value;
					this.SendPropertyChanged("PipingContingency");
					this.OnPipingContingencyChanged();
				}
			}
		}
		
		[Column(Storage="_PipingcontingencyColor", UpdateCheck=UpdateCheck.Never)]
		public string PipingcontingencyColor
		{
			get
			{
				return this._PipingcontingencyColor;
			}
			set
			{
				if ((this._PipingcontingencyColor != value))
				{
					this.OnPipingcontingencyColorChanging(value);
					this.SendPropertyChanging();
					this._PipingcontingencyColor = value;
					this.SendPropertyChanged("PipingcontingencyColor");
					this.OnPipingcontingencyColorChanged();
				}
			}
		}
		
		[Column(Storage="_Type", UpdateCheck=UpdateCheck.Never)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TypeColor", UpdateCheck=UpdateCheck.Never)]
		public string TypeColor
		{
			get
			{
				return this._TypeColor;
			}
			set
			{
				if ((this._TypeColor != value))
				{
					this.OnTypeColorChanging(value);
					this.SendPropertyChanging();
					this._TypeColor = value;
					this.SendPropertyChanged("TypeColor");
					this.OnTypeColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTowerFireOther : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _EqID;
		
		private string _EqidColor;
		
		private System.Nullable<double> _PipingContingency;
		
		private string _PipingcontingencyColor;
		
		private System.Nullable<double> _WettedArea;
		
		private string _WettedareaColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEqIDChanging(System.Nullable<int> value);
    partial void OnEqIDChanged();
    partial void OnEqidColorChanging(string value);
    partial void OnEqidColorChanged();
    partial void OnPipingContingencyChanging(System.Nullable<double> value);
    partial void OnPipingContingencyChanged();
    partial void OnPipingcontingencyColorChanging(string value);
    partial void OnPipingcontingencyColorChanged();
    partial void OnWettedAreaChanging(System.Nullable<double> value);
    partial void OnWettedAreaChanged();
    partial void OnWettedareaColorChanging(string value);
    partial void OnWettedareaColorChanged();
    #endregion
		
		public tbTowerFireOther()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_EqID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EqID
		{
			get
			{
				return this._EqID;
			}
			set
			{
				if ((this._EqID != value))
				{
					this.OnEqIDChanging(value);
					this.SendPropertyChanging();
					this._EqID = value;
					this.SendPropertyChanged("EqID");
					this.OnEqIDChanged();
				}
			}
		}
		
		[Column(Storage="_EqidColor", UpdateCheck=UpdateCheck.Never)]
		public string EqidColor
		{
			get
			{
				return this._EqidColor;
			}
			set
			{
				if ((this._EqidColor != value))
				{
					this.OnEqidColorChanging(value);
					this.SendPropertyChanging();
					this._EqidColor = value;
					this.SendPropertyChanged("EqidColor");
					this.OnEqidColorChanged();
				}
			}
		}
		
		[Column(Storage="_PipingContingency", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> PipingContingency
		{
			get
			{
				return this._PipingContingency;
			}
			set
			{
				if ((this._PipingContingency != value))
				{
					this.OnPipingContingencyChanging(value);
					this.SendPropertyChanging();
					this._PipingContingency = value;
					this.SendPropertyChanged("PipingContingency");
					this.OnPipingContingencyChanged();
				}
			}
		}
		
		[Column(Storage="_PipingcontingencyColor", UpdateCheck=UpdateCheck.Never)]
		public string PipingcontingencyColor
		{
			get
			{
				return this._PipingcontingencyColor;
			}
			set
			{
				if ((this._PipingcontingencyColor != value))
				{
					this.OnPipingcontingencyColorChanging(value);
					this.SendPropertyChanging();
					this._PipingcontingencyColor = value;
					this.SendPropertyChanged("PipingcontingencyColor");
					this.OnPipingcontingencyColorChanged();
				}
			}
		}
		
		[Column(Storage="_WettedArea", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> WettedArea
		{
			get
			{
				return this._WettedArea;
			}
			set
			{
				if ((this._WettedArea != value))
				{
					this.OnWettedAreaChanging(value);
					this.SendPropertyChanging();
					this._WettedArea = value;
					this.SendPropertyChanged("WettedArea");
					this.OnWettedAreaChanged();
				}
			}
		}
		
		[Column(Storage="_WettedareaColor", UpdateCheck=UpdateCheck.Never)]
		public string WettedareaColor
		{
			get
			{
				return this._WettedareaColor;
			}
			set
			{
				if ((this._WettedareaColor != value))
				{
					this.OnWettedareaColorChanging(value);
					this.SendPropertyChanging();
					this._WettedareaColor = value;
					this.SendPropertyChanged("WettedareaColor");
					this.OnWettedareaColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTowerFlashProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _BulkCP;
		
		private string _BulkcpColor;
		
		private System.Nullable<double> _BulkCPCVRatio;
		
		private string _BulkcpcvratioColor;
		
		private System.Nullable<double> _BulkDensityAct;
		
		private string _BulkdensityactColor;
		
		private System.Nullable<double> _BulkMwOfPhase;
		
		private string _BulkmwofphaseColor;
		
		private string _BulkSurfTension;
		
		private string _BulksurftensionColor;
		
		private System.Nullable<double> _BulkThermalCond;
		
		private string _BulkthermalcondColor;
		
		private System.Nullable<double> _BulkViscosity;
		
		private string _BulkviscosityColor;
		
		private string _CompIn;
		
		private string _CompinColor;
		
		private string _ComponentId;
		
		private string _ComponentidColor;
		
		private string _Description;
		
		private string _DescriptionColor;
		
		private System.Nullable<int> _DeviceID;
		
		private string _Enthalpy;
		
		private string _EnthalpyColor;
		
		private string _InertWeightEnthalpy;
		
		private string _InertweightenthalpyColor;
		
		private string _InertWeightRate;
		
		private string _InertweightrateColor;
		
		private System.Nullable<double> _Pressure;
		
		private string _PressureColor;
		
		private string _Prodtype;
		
		private string _ProdtypeColor;
		
		private string _Sourcetype;
		
		private string _SourcetypeColor;
		
		private string _Spenthalpy;
		
		private string _SpenthalpyColor;
		
		private string _Streamname;
		
		private string _StreamnameColor;
		
		private System.Nullable<double> _Temperature;
		
		private string _TemperatureColor;
		
		private string _TotalComposition;
		
		private string _TotalcompositionColor;
		
		private string _TotalMolarEnthalpy;
		
		private string _TotalmolarenthalpyColor;
		
		private string _TotalMolarRate;
		
		private string _TotalmolarrateColor;
		
		private string _Tray;
		
		private string _TrayColor;
		
		private string _Type;
		
		private string _TypeColor;
		
		private System.Nullable<double> _Vaporfraction;
		
		private string _VaporfractionColor;
		
		private System.Nullable<double> _VaporZFmKVal;
		
		private string _VaporzfmkvalColor;
		
		private string _Weightflow;
		
		private string _WeightflowColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBulkCPChanging(System.Nullable<double> value);
    partial void OnBulkCPChanged();
    partial void OnBulkcpColorChanging(string value);
    partial void OnBulkcpColorChanged();
    partial void OnBulkCPCVRatioChanging(System.Nullable<double> value);
    partial void OnBulkCPCVRatioChanged();
    partial void OnBulkcpcvratioColorChanging(string value);
    partial void OnBulkcpcvratioColorChanged();
    partial void OnBulkDensityActChanging(System.Nullable<double> value);
    partial void OnBulkDensityActChanged();
    partial void OnBulkdensityactColorChanging(string value);
    partial void OnBulkdensityactColorChanged();
    partial void OnBulkMwOfPhaseChanging(System.Nullable<double> value);
    partial void OnBulkMwOfPhaseChanged();
    partial void OnBulkmwofphaseColorChanging(string value);
    partial void OnBulkmwofphaseColorChanged();
    partial void OnBulkSurfTensionChanging(string value);
    partial void OnBulkSurfTensionChanged();
    partial void OnBulksurftensionColorChanging(string value);
    partial void OnBulksurftensionColorChanged();
    partial void OnBulkThermalCondChanging(System.Nullable<double> value);
    partial void OnBulkThermalCondChanged();
    partial void OnBulkthermalcondColorChanging(string value);
    partial void OnBulkthermalcondColorChanged();
    partial void OnBulkViscosityChanging(System.Nullable<double> value);
    partial void OnBulkViscosityChanged();
    partial void OnBulkviscosityColorChanging(string value);
    partial void OnBulkviscosityColorChanged();
    partial void OnCompInChanging(string value);
    partial void OnCompInChanged();
    partial void OnCompinColorChanging(string value);
    partial void OnCompinColorChanged();
    partial void OnComponentIdChanging(string value);
    partial void OnComponentIdChanged();
    partial void OnComponentidColorChanging(string value);
    partial void OnComponentidColorChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDescriptionColorChanging(string value);
    partial void OnDescriptionColorChanged();
    partial void OnDeviceIDChanging(System.Nullable<int> value);
    partial void OnDeviceIDChanged();
    partial void OnEnthalpyChanging(string value);
    partial void OnEnthalpyChanged();
    partial void OnEnthalpyColorChanging(string value);
    partial void OnEnthalpyColorChanged();
    partial void OnInertWeightEnthalpyChanging(string value);
    partial void OnInertWeightEnthalpyChanged();
    partial void OnInertweightenthalpyColorChanging(string value);
    partial void OnInertweightenthalpyColorChanged();
    partial void OnInertWeightRateChanging(string value);
    partial void OnInertWeightRateChanged();
    partial void OnInertweightrateColorChanging(string value);
    partial void OnInertweightrateColorChanged();
    partial void OnPressureChanging(System.Nullable<double> value);
    partial void OnPressureChanged();
    partial void OnPressureColorChanging(string value);
    partial void OnPressureColorChanged();
    partial void OnProdtypeChanging(string value);
    partial void OnProdtypeChanged();
    partial void OnProdtypeColorChanging(string value);
    partial void OnProdtypeColorChanged();
    partial void OnSourcetypeChanging(string value);
    partial void OnSourcetypeChanged();
    partial void OnSourcetypeColorChanging(string value);
    partial void OnSourcetypeColorChanged();
    partial void OnSpenthalpyChanging(string value);
    partial void OnSpenthalpyChanged();
    partial void OnSpenthalpyColorChanging(string value);
    partial void OnSpenthalpyColorChanged();
    partial void OnStreamnameChanging(string value);
    partial void OnStreamnameChanged();
    partial void OnStreamnameColorChanging(string value);
    partial void OnStreamnameColorChanged();
    partial void OnTemperatureChanging(System.Nullable<double> value);
    partial void OnTemperatureChanged();
    partial void OnTemperatureColorChanging(string value);
    partial void OnTemperatureColorChanged();
    partial void OnTotalCompositionChanging(string value);
    partial void OnTotalCompositionChanged();
    partial void OnTotalcompositionColorChanging(string value);
    partial void OnTotalcompositionColorChanged();
    partial void OnTotalMolarEnthalpyChanging(string value);
    partial void OnTotalMolarEnthalpyChanged();
    partial void OnTotalmolarenthalpyColorChanging(string value);
    partial void OnTotalmolarenthalpyColorChanged();
    partial void OnTotalMolarRateChanging(string value);
    partial void OnTotalMolarRateChanged();
    partial void OnTotalmolarrateColorChanging(string value);
    partial void OnTotalmolarrateColorChanged();
    partial void OnTrayChanging(string value);
    partial void OnTrayChanged();
    partial void OnTrayColorChanging(string value);
    partial void OnTrayColorChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTypeColorChanging(string value);
    partial void OnTypeColorChanged();
    partial void OnVaporfractionChanging(System.Nullable<double> value);
    partial void OnVaporfractionChanged();
    partial void OnVaporfractionColorChanging(string value);
    partial void OnVaporfractionColorChanged();
    partial void OnVaporZFmKValChanging(System.Nullable<double> value);
    partial void OnVaporZFmKValChanged();
    partial void OnVaporzfmkvalColorChanging(string value);
    partial void OnVaporzfmkvalColorChanged();
    partial void OnWeightflowChanging(string value);
    partial void OnWeightflowChanged();
    partial void OnWeightflowColorChanging(string value);
    partial void OnWeightflowColorChanged();
    #endregion
		
		public tbTowerFlashProduct()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_BulkCP", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkCP
		{
			get
			{
				return this._BulkCP;
			}
			set
			{
				if ((this._BulkCP != value))
				{
					this.OnBulkCPChanging(value);
					this.SendPropertyChanging();
					this._BulkCP = value;
					this.SendPropertyChanged("BulkCP");
					this.OnBulkCPChanged();
				}
			}
		}
		
		[Column(Storage="_BulkcpColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkcpColor
		{
			get
			{
				return this._BulkcpColor;
			}
			set
			{
				if ((this._BulkcpColor != value))
				{
					this.OnBulkcpColorChanging(value);
					this.SendPropertyChanging();
					this._BulkcpColor = value;
					this.SendPropertyChanged("BulkcpColor");
					this.OnBulkcpColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkCPCVRatio", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkCPCVRatio
		{
			get
			{
				return this._BulkCPCVRatio;
			}
			set
			{
				if ((this._BulkCPCVRatio != value))
				{
					this.OnBulkCPCVRatioChanging(value);
					this.SendPropertyChanging();
					this._BulkCPCVRatio = value;
					this.SendPropertyChanged("BulkCPCVRatio");
					this.OnBulkCPCVRatioChanged();
				}
			}
		}
		
		[Column(Storage="_BulkcpcvratioColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkcpcvratioColor
		{
			get
			{
				return this._BulkcpcvratioColor;
			}
			set
			{
				if ((this._BulkcpcvratioColor != value))
				{
					this.OnBulkcpcvratioColorChanging(value);
					this.SendPropertyChanging();
					this._BulkcpcvratioColor = value;
					this.SendPropertyChanged("BulkcpcvratioColor");
					this.OnBulkcpcvratioColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkDensityAct", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkDensityAct
		{
			get
			{
				return this._BulkDensityAct;
			}
			set
			{
				if ((this._BulkDensityAct != value))
				{
					this.OnBulkDensityActChanging(value);
					this.SendPropertyChanging();
					this._BulkDensityAct = value;
					this.SendPropertyChanged("BulkDensityAct");
					this.OnBulkDensityActChanged();
				}
			}
		}
		
		[Column(Storage="_BulkdensityactColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkdensityactColor
		{
			get
			{
				return this._BulkdensityactColor;
			}
			set
			{
				if ((this._BulkdensityactColor != value))
				{
					this.OnBulkdensityactColorChanging(value);
					this.SendPropertyChanging();
					this._BulkdensityactColor = value;
					this.SendPropertyChanged("BulkdensityactColor");
					this.OnBulkdensityactColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkMwOfPhase", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkMwOfPhase
		{
			get
			{
				return this._BulkMwOfPhase;
			}
			set
			{
				if ((this._BulkMwOfPhase != value))
				{
					this.OnBulkMwOfPhaseChanging(value);
					this.SendPropertyChanging();
					this._BulkMwOfPhase = value;
					this.SendPropertyChanged("BulkMwOfPhase");
					this.OnBulkMwOfPhaseChanged();
				}
			}
		}
		
		[Column(Storage="_BulkmwofphaseColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkmwofphaseColor
		{
			get
			{
				return this._BulkmwofphaseColor;
			}
			set
			{
				if ((this._BulkmwofphaseColor != value))
				{
					this.OnBulkmwofphaseColorChanging(value);
					this.SendPropertyChanging();
					this._BulkmwofphaseColor = value;
					this.SendPropertyChanged("BulkmwofphaseColor");
					this.OnBulkmwofphaseColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkSurfTension", UpdateCheck=UpdateCheck.Never)]
		public string BulkSurfTension
		{
			get
			{
				return this._BulkSurfTension;
			}
			set
			{
				if ((this._BulkSurfTension != value))
				{
					this.OnBulkSurfTensionChanging(value);
					this.SendPropertyChanging();
					this._BulkSurfTension = value;
					this.SendPropertyChanged("BulkSurfTension");
					this.OnBulkSurfTensionChanged();
				}
			}
		}
		
		[Column(Storage="_BulksurftensionColor", UpdateCheck=UpdateCheck.Never)]
		public string BulksurftensionColor
		{
			get
			{
				return this._BulksurftensionColor;
			}
			set
			{
				if ((this._BulksurftensionColor != value))
				{
					this.OnBulksurftensionColorChanging(value);
					this.SendPropertyChanging();
					this._BulksurftensionColor = value;
					this.SendPropertyChanged("BulksurftensionColor");
					this.OnBulksurftensionColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkThermalCond", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkThermalCond
		{
			get
			{
				return this._BulkThermalCond;
			}
			set
			{
				if ((this._BulkThermalCond != value))
				{
					this.OnBulkThermalCondChanging(value);
					this.SendPropertyChanging();
					this._BulkThermalCond = value;
					this.SendPropertyChanged("BulkThermalCond");
					this.OnBulkThermalCondChanged();
				}
			}
		}
		
		[Column(Storage="_BulkthermalcondColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkthermalcondColor
		{
			get
			{
				return this._BulkthermalcondColor;
			}
			set
			{
				if ((this._BulkthermalcondColor != value))
				{
					this.OnBulkthermalcondColorChanging(value);
					this.SendPropertyChanging();
					this._BulkthermalcondColor = value;
					this.SendPropertyChanged("BulkthermalcondColor");
					this.OnBulkthermalcondColorChanged();
				}
			}
		}
		
		[Column(Storage="_BulkViscosity", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> BulkViscosity
		{
			get
			{
				return this._BulkViscosity;
			}
			set
			{
				if ((this._BulkViscosity != value))
				{
					this.OnBulkViscosityChanging(value);
					this.SendPropertyChanging();
					this._BulkViscosity = value;
					this.SendPropertyChanged("BulkViscosity");
					this.OnBulkViscosityChanged();
				}
			}
		}
		
		[Column(Storage="_BulkviscosityColor", UpdateCheck=UpdateCheck.Never)]
		public string BulkviscosityColor
		{
			get
			{
				return this._BulkviscosityColor;
			}
			set
			{
				if ((this._BulkviscosityColor != value))
				{
					this.OnBulkviscosityColorChanging(value);
					this.SendPropertyChanging();
					this._BulkviscosityColor = value;
					this.SendPropertyChanged("BulkviscosityColor");
					this.OnBulkviscosityColorChanged();
				}
			}
		}
		
		[Column(Storage="_CompIn", UpdateCheck=UpdateCheck.Never)]
		public string CompIn
		{
			get
			{
				return this._CompIn;
			}
			set
			{
				if ((this._CompIn != value))
				{
					this.OnCompInChanging(value);
					this.SendPropertyChanging();
					this._CompIn = value;
					this.SendPropertyChanged("CompIn");
					this.OnCompInChanged();
				}
			}
		}
		
		[Column(Storage="_CompinColor", UpdateCheck=UpdateCheck.Never)]
		public string CompinColor
		{
			get
			{
				return this._CompinColor;
			}
			set
			{
				if ((this._CompinColor != value))
				{
					this.OnCompinColorChanging(value);
					this.SendPropertyChanging();
					this._CompinColor = value;
					this.SendPropertyChanged("CompinColor");
					this.OnCompinColorChanged();
				}
			}
		}
		
		[Column(Storage="_ComponentId", UpdateCheck=UpdateCheck.Never)]
		public string ComponentId
		{
			get
			{
				return this._ComponentId;
			}
			set
			{
				if ((this._ComponentId != value))
				{
					this.OnComponentIdChanging(value);
					this.SendPropertyChanging();
					this._ComponentId = value;
					this.SendPropertyChanged("ComponentId");
					this.OnComponentIdChanged();
				}
			}
		}
		
		[Column(Storage="_ComponentidColor", UpdateCheck=UpdateCheck.Never)]
		public string ComponentidColor
		{
			get
			{
				return this._ComponentidColor;
			}
			set
			{
				if ((this._ComponentidColor != value))
				{
					this.OnComponentidColorChanging(value);
					this.SendPropertyChanging();
					this._ComponentidColor = value;
					this.SendPropertyChanged("ComponentidColor");
					this.OnComponentidColorChanged();
				}
			}
		}
		
		[Column(Storage="_Description", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DescriptionColor", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionColor
		{
			get
			{
				return this._DescriptionColor;
			}
			set
			{
				if ((this._DescriptionColor != value))
				{
					this.OnDescriptionColorChanging(value);
					this.SendPropertyChanging();
					this._DescriptionColor = value;
					this.SendPropertyChanged("DescriptionColor");
					this.OnDescriptionColorChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Enthalpy", UpdateCheck=UpdateCheck.Never)]
		public string Enthalpy
		{
			get
			{
				return this._Enthalpy;
			}
			set
			{
				if ((this._Enthalpy != value))
				{
					this.OnEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._Enthalpy = value;
					this.SendPropertyChanged("Enthalpy");
					this.OnEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_EnthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string EnthalpyColor
		{
			get
			{
				return this._EnthalpyColor;
			}
			set
			{
				if ((this._EnthalpyColor != value))
				{
					this.OnEnthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._EnthalpyColor = value;
					this.SendPropertyChanged("EnthalpyColor");
					this.OnEnthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_InertWeightEnthalpy", UpdateCheck=UpdateCheck.Never)]
		public string InertWeightEnthalpy
		{
			get
			{
				return this._InertWeightEnthalpy;
			}
			set
			{
				if ((this._InertWeightEnthalpy != value))
				{
					this.OnInertWeightEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._InertWeightEnthalpy = value;
					this.SendPropertyChanged("InertWeightEnthalpy");
					this.OnInertWeightEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_InertweightenthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string InertweightenthalpyColor
		{
			get
			{
				return this._InertweightenthalpyColor;
			}
			set
			{
				if ((this._InertweightenthalpyColor != value))
				{
					this.OnInertweightenthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._InertweightenthalpyColor = value;
					this.SendPropertyChanged("InertweightenthalpyColor");
					this.OnInertweightenthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_InertWeightRate", UpdateCheck=UpdateCheck.Never)]
		public string InertWeightRate
		{
			get
			{
				return this._InertWeightRate;
			}
			set
			{
				if ((this._InertWeightRate != value))
				{
					this.OnInertWeightRateChanging(value);
					this.SendPropertyChanging();
					this._InertWeightRate = value;
					this.SendPropertyChanged("InertWeightRate");
					this.OnInertWeightRateChanged();
				}
			}
		}
		
		[Column(Storage="_InertweightrateColor", UpdateCheck=UpdateCheck.Never)]
		public string InertweightrateColor
		{
			get
			{
				return this._InertweightrateColor;
			}
			set
			{
				if ((this._InertweightrateColor != value))
				{
					this.OnInertweightrateColorChanging(value);
					this.SendPropertyChanging();
					this._InertweightrateColor = value;
					this.SendPropertyChanged("InertweightrateColor");
					this.OnInertweightrateColorChanged();
				}
			}
		}
		
		[Column(Storage="_Pressure", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this.OnPressureChanging(value);
					this.SendPropertyChanging();
					this._Pressure = value;
					this.SendPropertyChanged("Pressure");
					this.OnPressureChanged();
				}
			}
		}
		
		[Column(Storage="_PressureColor", UpdateCheck=UpdateCheck.Never)]
		public string PressureColor
		{
			get
			{
				return this._PressureColor;
			}
			set
			{
				if ((this._PressureColor != value))
				{
					this.OnPressureColorChanging(value);
					this.SendPropertyChanging();
					this._PressureColor = value;
					this.SendPropertyChanged("PressureColor");
					this.OnPressureColorChanged();
				}
			}
		}
		
		[Column(Storage="_Prodtype", UpdateCheck=UpdateCheck.Never)]
		public string Prodtype
		{
			get
			{
				return this._Prodtype;
			}
			set
			{
				if ((this._Prodtype != value))
				{
					this.OnProdtypeChanging(value);
					this.SendPropertyChanging();
					this._Prodtype = value;
					this.SendPropertyChanged("Prodtype");
					this.OnProdtypeChanged();
				}
			}
		}
		
		[Column(Storage="_ProdtypeColor", UpdateCheck=UpdateCheck.Never)]
		public string ProdtypeColor
		{
			get
			{
				return this._ProdtypeColor;
			}
			set
			{
				if ((this._ProdtypeColor != value))
				{
					this.OnProdtypeColorChanging(value);
					this.SendPropertyChanging();
					this._ProdtypeColor = value;
					this.SendPropertyChanged("ProdtypeColor");
					this.OnProdtypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_Sourcetype", UpdateCheck=UpdateCheck.Never)]
		public string Sourcetype
		{
			get
			{
				return this._Sourcetype;
			}
			set
			{
				if ((this._Sourcetype != value))
				{
					this.OnSourcetypeChanging(value);
					this.SendPropertyChanging();
					this._Sourcetype = value;
					this.SendPropertyChanged("Sourcetype");
					this.OnSourcetypeChanged();
				}
			}
		}
		
		[Column(Storage="_SourcetypeColor", UpdateCheck=UpdateCheck.Never)]
		public string SourcetypeColor
		{
			get
			{
				return this._SourcetypeColor;
			}
			set
			{
				if ((this._SourcetypeColor != value))
				{
					this.OnSourcetypeColorChanging(value);
					this.SendPropertyChanging();
					this._SourcetypeColor = value;
					this.SendPropertyChanged("SourcetypeColor");
					this.OnSourcetypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_Spenthalpy", UpdateCheck=UpdateCheck.Never)]
		public string Spenthalpy
		{
			get
			{
				return this._Spenthalpy;
			}
			set
			{
				if ((this._Spenthalpy != value))
				{
					this.OnSpenthalpyChanging(value);
					this.SendPropertyChanging();
					this._Spenthalpy = value;
					this.SendPropertyChanged("Spenthalpy");
					this.OnSpenthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_SpenthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string SpenthalpyColor
		{
			get
			{
				return this._SpenthalpyColor;
			}
			set
			{
				if ((this._SpenthalpyColor != value))
				{
					this.OnSpenthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._SpenthalpyColor = value;
					this.SendPropertyChanged("SpenthalpyColor");
					this.OnSpenthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_Streamname", UpdateCheck=UpdateCheck.Never)]
		public string Streamname
		{
			get
			{
				return this._Streamname;
			}
			set
			{
				if ((this._Streamname != value))
				{
					this.OnStreamnameChanging(value);
					this.SendPropertyChanging();
					this._Streamname = value;
					this.SendPropertyChanged("Streamname");
					this.OnStreamnameChanged();
				}
			}
		}
		
		[Column(Storage="_StreamnameColor", UpdateCheck=UpdateCheck.Never)]
		public string StreamnameColor
		{
			get
			{
				return this._StreamnameColor;
			}
			set
			{
				if ((this._StreamnameColor != value))
				{
					this.OnStreamnameColorChanging(value);
					this.SendPropertyChanging();
					this._StreamnameColor = value;
					this.SendPropertyChanged("StreamnameColor");
					this.OnStreamnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_Temperature", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_TemperatureColor", UpdateCheck=UpdateCheck.Never)]
		public string TemperatureColor
		{
			get
			{
				return this._TemperatureColor;
			}
			set
			{
				if ((this._TemperatureColor != value))
				{
					this.OnTemperatureColorChanging(value);
					this.SendPropertyChanging();
					this._TemperatureColor = value;
					this.SendPropertyChanged("TemperatureColor");
					this.OnTemperatureColorChanged();
				}
			}
		}
		
		[Column(Storage="_TotalComposition", UpdateCheck=UpdateCheck.Never)]
		public string TotalComposition
		{
			get
			{
				return this._TotalComposition;
			}
			set
			{
				if ((this._TotalComposition != value))
				{
					this.OnTotalCompositionChanging(value);
					this.SendPropertyChanging();
					this._TotalComposition = value;
					this.SendPropertyChanged("TotalComposition");
					this.OnTotalCompositionChanged();
				}
			}
		}
		
		[Column(Storage="_TotalcompositionColor", UpdateCheck=UpdateCheck.Never)]
		public string TotalcompositionColor
		{
			get
			{
				return this._TotalcompositionColor;
			}
			set
			{
				if ((this._TotalcompositionColor != value))
				{
					this.OnTotalcompositionColorChanging(value);
					this.SendPropertyChanging();
					this._TotalcompositionColor = value;
					this.SendPropertyChanged("TotalcompositionColor");
					this.OnTotalcompositionColorChanged();
				}
			}
		}
		
		[Column(Storage="_TotalMolarEnthalpy", UpdateCheck=UpdateCheck.Never)]
		public string TotalMolarEnthalpy
		{
			get
			{
				return this._TotalMolarEnthalpy;
			}
			set
			{
				if ((this._TotalMolarEnthalpy != value))
				{
					this.OnTotalMolarEnthalpyChanging(value);
					this.SendPropertyChanging();
					this._TotalMolarEnthalpy = value;
					this.SendPropertyChanged("TotalMolarEnthalpy");
					this.OnTotalMolarEnthalpyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalmolarenthalpyColor", UpdateCheck=UpdateCheck.Never)]
		public string TotalmolarenthalpyColor
		{
			get
			{
				return this._TotalmolarenthalpyColor;
			}
			set
			{
				if ((this._TotalmolarenthalpyColor != value))
				{
					this.OnTotalmolarenthalpyColorChanging(value);
					this.SendPropertyChanging();
					this._TotalmolarenthalpyColor = value;
					this.SendPropertyChanged("TotalmolarenthalpyColor");
					this.OnTotalmolarenthalpyColorChanged();
				}
			}
		}
		
		[Column(Storage="_TotalMolarRate", UpdateCheck=UpdateCheck.Never)]
		public string TotalMolarRate
		{
			get
			{
				return this._TotalMolarRate;
			}
			set
			{
				if ((this._TotalMolarRate != value))
				{
					this.OnTotalMolarRateChanging(value);
					this.SendPropertyChanging();
					this._TotalMolarRate = value;
					this.SendPropertyChanged("TotalMolarRate");
					this.OnTotalMolarRateChanged();
				}
			}
		}
		
		[Column(Storage="_TotalmolarrateColor", UpdateCheck=UpdateCheck.Never)]
		public string TotalmolarrateColor
		{
			get
			{
				return this._TotalmolarrateColor;
			}
			set
			{
				if ((this._TotalmolarrateColor != value))
				{
					this.OnTotalmolarrateColorChanging(value);
					this.SendPropertyChanging();
					this._TotalmolarrateColor = value;
					this.SendPropertyChanged("TotalmolarrateColor");
					this.OnTotalmolarrateColorChanged();
				}
			}
		}
		
		[Column(Storage="_Tray", UpdateCheck=UpdateCheck.Never)]
		public string Tray
		{
			get
			{
				return this._Tray;
			}
			set
			{
				if ((this._Tray != value))
				{
					this.OnTrayChanging(value);
					this.SendPropertyChanging();
					this._Tray = value;
					this.SendPropertyChanged("Tray");
					this.OnTrayChanged();
				}
			}
		}
		
		[Column(Storage="_TrayColor", UpdateCheck=UpdateCheck.Never)]
		public string TrayColor
		{
			get
			{
				return this._TrayColor;
			}
			set
			{
				if ((this._TrayColor != value))
				{
					this.OnTrayColorChanging(value);
					this.SendPropertyChanging();
					this._TrayColor = value;
					this.SendPropertyChanged("TrayColor");
					this.OnTrayColorChanged();
				}
			}
		}
		
		[Column(Storage="_Type", UpdateCheck=UpdateCheck.Never)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TypeColor", UpdateCheck=UpdateCheck.Never)]
		public string TypeColor
		{
			get
			{
				return this._TypeColor;
			}
			set
			{
				if ((this._TypeColor != value))
				{
					this.OnTypeColorChanging(value);
					this.SendPropertyChanging();
					this._TypeColor = value;
					this.SendPropertyChanged("TypeColor");
					this.OnTypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_Vaporfraction", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Vaporfraction
		{
			get
			{
				return this._Vaporfraction;
			}
			set
			{
				if ((this._Vaporfraction != value))
				{
					this.OnVaporfractionChanging(value);
					this.SendPropertyChanging();
					this._Vaporfraction = value;
					this.SendPropertyChanged("Vaporfraction");
					this.OnVaporfractionChanged();
				}
			}
		}
		
		[Column(Storage="_VaporfractionColor", UpdateCheck=UpdateCheck.Never)]
		public string VaporfractionColor
		{
			get
			{
				return this._VaporfractionColor;
			}
			set
			{
				if ((this._VaporfractionColor != value))
				{
					this.OnVaporfractionColorChanging(value);
					this.SendPropertyChanging();
					this._VaporfractionColor = value;
					this.SendPropertyChanged("VaporfractionColor");
					this.OnVaporfractionColorChanged();
				}
			}
		}
		
		[Column(Storage="_VaporZFmKVal", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> VaporZFmKVal
		{
			get
			{
				return this._VaporZFmKVal;
			}
			set
			{
				if ((this._VaporZFmKVal != value))
				{
					this.OnVaporZFmKValChanging(value);
					this.SendPropertyChanging();
					this._VaporZFmKVal = value;
					this.SendPropertyChanged("VaporZFmKVal");
					this.OnVaporZFmKValChanged();
				}
			}
		}
		
		[Column(Storage="_VaporzfmkvalColor", UpdateCheck=UpdateCheck.Never)]
		public string VaporzfmkvalColor
		{
			get
			{
				return this._VaporzfmkvalColor;
			}
			set
			{
				if ((this._VaporzfmkvalColor != value))
				{
					this.OnVaporzfmkvalColorChanging(value);
					this.SendPropertyChanging();
					this._VaporzfmkvalColor = value;
					this.SendPropertyChanged("VaporzfmkvalColor");
					this.OnVaporzfmkvalColorChanged();
				}
			}
		}
		
		[Column(Storage="_Weightflow", UpdateCheck=UpdateCheck.Never)]
		public string Weightflow
		{
			get
			{
				return this._Weightflow;
			}
			set
			{
				if ((this._Weightflow != value))
				{
					this.OnWeightflowChanging(value);
					this.SendPropertyChanging();
					this._Weightflow = value;
					this.SendPropertyChanged("Weightflow");
					this.OnWeightflowChanged();
				}
			}
		}
		
		[Column(Storage="_WeightflowColor", UpdateCheck=UpdateCheck.Never)]
		public string WeightflowColor
		{
			get
			{
				return this._WeightflowColor;
			}
			set
			{
				if ((this._WeightflowColor != value))
				{
					this.OnWeightflowColorChanging(value);
					this.SendPropertyChanging();
					this._WeightflowColor = value;
					this.SendPropertyChanged("WeightflowColor");
					this.OnWeightflowColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTowerHX : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private string _DescriptionColor;
		
		private System.Nullable<int> _DeviceID;
		
		private System.Nullable<double> _Heaterduty;
		
		private string _HeaterdutyColor;
		
		private string _Heatername;
		
		private string _HeaternameColor;
		
		private System.Nullable<int> _HeaterType;
		
		private string _HeatertypeColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDescriptionColorChanging(string value);
    partial void OnDescriptionColorChanged();
    partial void OnDeviceIDChanging(System.Nullable<int> value);
    partial void OnDeviceIDChanged();
    partial void OnHeaterdutyChanging(System.Nullable<double> value);
    partial void OnHeaterdutyChanged();
    partial void OnHeaterdutyColorChanging(string value);
    partial void OnHeaterdutyColorChanged();
    partial void OnHeaternameChanging(string value);
    partial void OnHeaternameChanged();
    partial void OnHeaternameColorChanging(string value);
    partial void OnHeaternameColorChanged();
    partial void OnHeaterTypeChanging(System.Nullable<int> value);
    partial void OnHeaterTypeChanged();
    partial void OnHeatertypeColorChanging(string value);
    partial void OnHeatertypeColorChanged();
    #endregion
		
		public tbTowerHX()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DescriptionColor", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionColor
		{
			get
			{
				return this._DescriptionColor;
			}
			set
			{
				if ((this._DescriptionColor != value))
				{
					this.OnDescriptionColorChanging(value);
					this.SendPropertyChanging();
					this._DescriptionColor = value;
					this.SendPropertyChanged("DescriptionColor");
					this.OnDescriptionColorChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Heaterduty", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Heaterduty
		{
			get
			{
				return this._Heaterduty;
			}
			set
			{
				if ((this._Heaterduty != value))
				{
					this.OnHeaterdutyChanging(value);
					this.SendPropertyChanging();
					this._Heaterduty = value;
					this.SendPropertyChanged("Heaterduty");
					this.OnHeaterdutyChanged();
				}
			}
		}
		
		[Column(Storage="_HeaterdutyColor", UpdateCheck=UpdateCheck.Never)]
		public string HeaterdutyColor
		{
			get
			{
				return this._HeaterdutyColor;
			}
			set
			{
				if ((this._HeaterdutyColor != value))
				{
					this.OnHeaterdutyColorChanging(value);
					this.SendPropertyChanging();
					this._HeaterdutyColor = value;
					this.SendPropertyChanged("HeaterdutyColor");
					this.OnHeaterdutyColorChanged();
				}
			}
		}
		
		[Column(Storage="_Heatername", UpdateCheck=UpdateCheck.Never)]
		public string Heatername
		{
			get
			{
				return this._Heatername;
			}
			set
			{
				if ((this._Heatername != value))
				{
					this.OnHeaternameChanging(value);
					this.SendPropertyChanging();
					this._Heatername = value;
					this.SendPropertyChanged("Heatername");
					this.OnHeaternameChanged();
				}
			}
		}
		
		[Column(Storage="_HeaternameColor", UpdateCheck=UpdateCheck.Never)]
		public string HeaternameColor
		{
			get
			{
				return this._HeaternameColor;
			}
			set
			{
				if ((this._HeaternameColor != value))
				{
					this.OnHeaternameColorChanging(value);
					this.SendPropertyChanging();
					this._HeaternameColor = value;
					this.SendPropertyChanged("HeaternameColor");
					this.OnHeaternameColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeaterType", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> HeaterType
		{
			get
			{
				return this._HeaterType;
			}
			set
			{
				if ((this._HeaterType != value))
				{
					this.OnHeaterTypeChanging(value);
					this.SendPropertyChanging();
					this._HeaterType = value;
					this.SendPropertyChanged("HeaterType");
					this.OnHeaterTypeChanged();
				}
			}
		}
		
		[Column(Storage="_HeatertypeColor", UpdateCheck=UpdateCheck.Never)]
		public string HeatertypeColor
		{
			get
			{
				return this._HeatertypeColor;
			}
			set
			{
				if ((this._HeatertypeColor != value))
				{
					this.OnHeatertypeColorChanging(value);
					this.SendPropertyChanging();
					this._HeatertypeColor = value;
					this.SendPropertyChanged("HeatertypeColor");
					this.OnHeatertypeColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTowerHXDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _DetailName;
		
		private string _DetailnameColor;
		
		private System.Nullable<double> _Duty;
		
		private string _DutyColor;
		
		private System.Nullable<double> _DutyPercentage;
		
		private string _DutypercentageColor;
		
		private string _HxidColor;
		
		private string _Medium;
		
		private string _MediumColor;
		
		private string _MediumSideFlowSource;
		
		private string _MediumsideflowsourceColor;
		
		private string _ProcessSideFlowSource;
		
		private string _ProcesssideflowsourceColor;
		
		private System.Nullable<int> _TowerHXID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDetailNameChanging(string value);
    partial void OnDetailNameChanged();
    partial void OnDetailnameColorChanging(string value);
    partial void OnDetailnameColorChanged();
    partial void OnDutyChanging(System.Nullable<double> value);
    partial void OnDutyChanged();
    partial void OnDutyColorChanging(string value);
    partial void OnDutyColorChanged();
    partial void OnDutyPercentageChanging(System.Nullable<double> value);
    partial void OnDutyPercentageChanged();
    partial void OnDutypercentageColorChanging(string value);
    partial void OnDutypercentageColorChanged();
    partial void OnHxidColorChanging(string value);
    partial void OnHxidColorChanged();
    partial void OnMediumChanging(string value);
    partial void OnMediumChanged();
    partial void OnMediumColorChanging(string value);
    partial void OnMediumColorChanged();
    partial void OnMediumSideFlowSourceChanging(string value);
    partial void OnMediumSideFlowSourceChanged();
    partial void OnMediumsideflowsourceColorChanging(string value);
    partial void OnMediumsideflowsourceColorChanged();
    partial void OnProcessSideFlowSourceChanging(string value);
    partial void OnProcessSideFlowSourceChanged();
    partial void OnProcesssideflowsourceColorChanging(string value);
    partial void OnProcesssideflowsourceColorChanged();
    partial void OnTowerHXIDChanging(System.Nullable<int> value);
    partial void OnTowerHXIDChanged();
    #endregion
		
		public tbTowerHXDetail()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DetailName", UpdateCheck=UpdateCheck.Never)]
		public string DetailName
		{
			get
			{
				return this._DetailName;
			}
			set
			{
				if ((this._DetailName != value))
				{
					this.OnDetailNameChanging(value);
					this.SendPropertyChanging();
					this._DetailName = value;
					this.SendPropertyChanged("DetailName");
					this.OnDetailNameChanged();
				}
			}
		}
		
		[Column(Storage="_DetailnameColor", UpdateCheck=UpdateCheck.Never)]
		public string DetailnameColor
		{
			get
			{
				return this._DetailnameColor;
			}
			set
			{
				if ((this._DetailnameColor != value))
				{
					this.OnDetailnameColorChanging(value);
					this.SendPropertyChanging();
					this._DetailnameColor = value;
					this.SendPropertyChanged("DetailnameColor");
					this.OnDetailnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_Duty", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Duty
		{
			get
			{
				return this._Duty;
			}
			set
			{
				if ((this._Duty != value))
				{
					this.OnDutyChanging(value);
					this.SendPropertyChanging();
					this._Duty = value;
					this.SendPropertyChanged("Duty");
					this.OnDutyChanged();
				}
			}
		}
		
		[Column(Storage="_DutyColor", UpdateCheck=UpdateCheck.Never)]
		public string DutyColor
		{
			get
			{
				return this._DutyColor;
			}
			set
			{
				if ((this._DutyColor != value))
				{
					this.OnDutyColorChanging(value);
					this.SendPropertyChanging();
					this._DutyColor = value;
					this.SendPropertyChanged("DutyColor");
					this.OnDutyColorChanged();
				}
			}
		}
		
		[Column(Storage="_DutyPercentage", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> DutyPercentage
		{
			get
			{
				return this._DutyPercentage;
			}
			set
			{
				if ((this._DutyPercentage != value))
				{
					this.OnDutyPercentageChanging(value);
					this.SendPropertyChanging();
					this._DutyPercentage = value;
					this.SendPropertyChanged("DutyPercentage");
					this.OnDutyPercentageChanged();
				}
			}
		}
		
		[Column(Storage="_DutypercentageColor", UpdateCheck=UpdateCheck.Never)]
		public string DutypercentageColor
		{
			get
			{
				return this._DutypercentageColor;
			}
			set
			{
				if ((this._DutypercentageColor != value))
				{
					this.OnDutypercentageColorChanging(value);
					this.SendPropertyChanging();
					this._DutypercentageColor = value;
					this.SendPropertyChanged("DutypercentageColor");
					this.OnDutypercentageColorChanged();
				}
			}
		}
		
		[Column(Storage="_HxidColor", UpdateCheck=UpdateCheck.Never)]
		public string HxidColor
		{
			get
			{
				return this._HxidColor;
			}
			set
			{
				if ((this._HxidColor != value))
				{
					this.OnHxidColorChanging(value);
					this.SendPropertyChanging();
					this._HxidColor = value;
					this.SendPropertyChanged("HxidColor");
					this.OnHxidColorChanged();
				}
			}
		}
		
		[Column(Storage="_Medium", UpdateCheck=UpdateCheck.Never)]
		public string Medium
		{
			get
			{
				return this._Medium;
			}
			set
			{
				if ((this._Medium != value))
				{
					this.OnMediumChanging(value);
					this.SendPropertyChanging();
					this._Medium = value;
					this.SendPropertyChanged("Medium");
					this.OnMediumChanged();
				}
			}
		}
		
		[Column(Storage="_MediumColor", UpdateCheck=UpdateCheck.Never)]
		public string MediumColor
		{
			get
			{
				return this._MediumColor;
			}
			set
			{
				if ((this._MediumColor != value))
				{
					this.OnMediumColorChanging(value);
					this.SendPropertyChanging();
					this._MediumColor = value;
					this.SendPropertyChanged("MediumColor");
					this.OnMediumColorChanged();
				}
			}
		}
		
		[Column(Storage="_MediumSideFlowSource", UpdateCheck=UpdateCheck.Never)]
		public string MediumSideFlowSource
		{
			get
			{
				return this._MediumSideFlowSource;
			}
			set
			{
				if ((this._MediumSideFlowSource != value))
				{
					this.OnMediumSideFlowSourceChanging(value);
					this.SendPropertyChanging();
					this._MediumSideFlowSource = value;
					this.SendPropertyChanged("MediumSideFlowSource");
					this.OnMediumSideFlowSourceChanged();
				}
			}
		}
		
		[Column(Storage="_MediumsideflowsourceColor", UpdateCheck=UpdateCheck.Never)]
		public string MediumsideflowsourceColor
		{
			get
			{
				return this._MediumsideflowsourceColor;
			}
			set
			{
				if ((this._MediumsideflowsourceColor != value))
				{
					this.OnMediumsideflowsourceColorChanging(value);
					this.SendPropertyChanging();
					this._MediumsideflowsourceColor = value;
					this.SendPropertyChanged("MediumsideflowsourceColor");
					this.OnMediumsideflowsourceColorChanged();
				}
			}
		}
		
		[Column(Storage="_ProcessSideFlowSource", UpdateCheck=UpdateCheck.Never)]
		public string ProcessSideFlowSource
		{
			get
			{
				return this._ProcessSideFlowSource;
			}
			set
			{
				if ((this._ProcessSideFlowSource != value))
				{
					this.OnProcessSideFlowSourceChanging(value);
					this.SendPropertyChanging();
					this._ProcessSideFlowSource = value;
					this.SendPropertyChanged("ProcessSideFlowSource");
					this.OnProcessSideFlowSourceChanged();
				}
			}
		}
		
		[Column(Storage="_ProcesssideflowsourceColor", UpdateCheck=UpdateCheck.Never)]
		public string ProcesssideflowsourceColor
		{
			get
			{
				return this._ProcesssideflowsourceColor;
			}
			set
			{
				if ((this._ProcesssideflowsourceColor != value))
				{
					this.OnProcesssideflowsourceColorChanging(value);
					this.SendPropertyChanging();
					this._ProcesssideflowsourceColor = value;
					this.SendPropertyChanged("ProcesssideflowsourceColor");
					this.OnProcesssideflowsourceColorChanged();
				}
			}
		}
		
		[Column(Storage="_TowerHXID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> TowerHXID
		{
			get
			{
				return this._TowerHXID;
			}
			set
			{
				if ((this._TowerHXID != value))
				{
					this.OnTowerHXIDChanging(value);
					this.SendPropertyChanging();
					this._TowerHXID = value;
					this.SendPropertyChanged("TowerHXID");
					this.OnTowerHXIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTowerScenarioHX : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _DetailID;
		
		private string _DetailidColor;
		
		private string _DetailName;
		
		private string _DetailnameColor;
		
		private System.Nullable<double> _Dutycalcfactor;
		
		private string _DutycalcfactorColor;
		
		private bool _Dutylost;
		
		private string _DutylostColor;
		
		private System.Nullable<int> _HeaterType;
		
		private string _HeatertypeColor;
		
		private bool _IsPinch;
		
		private string _IspinchColor;
		
		private string _Medium;
		
		private string _MediumColor;
		
		private System.Nullable<double> _PinchFactor;
		
		private string _PinchfactorColor;
		
		private System.Nullable<int> _ScenarioID;
		
		private string _ScenarioidColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDetailIDChanging(System.Nullable<int> value);
    partial void OnDetailIDChanged();
    partial void OnDetailidColorChanging(string value);
    partial void OnDetailidColorChanged();
    partial void OnDetailNameChanging(string value);
    partial void OnDetailNameChanged();
    partial void OnDetailnameColorChanging(string value);
    partial void OnDetailnameColorChanged();
    partial void OnDutycalcfactorChanging(System.Nullable<double> value);
    partial void OnDutycalcfactorChanged();
    partial void OnDutycalcfactorColorChanging(string value);
    partial void OnDutycalcfactorColorChanged();
    partial void OnDutylostChanging(bool value);
    partial void OnDutylostChanged();
    partial void OnDutylostColorChanging(string value);
    partial void OnDutylostColorChanged();
    partial void OnHeaterTypeChanging(System.Nullable<int> value);
    partial void OnHeaterTypeChanged();
    partial void OnHeatertypeColorChanging(string value);
    partial void OnHeatertypeColorChanged();
    partial void OnIsPinchChanging(bool value);
    partial void OnIsPinchChanged();
    partial void OnIspinchColorChanging(string value);
    partial void OnIspinchColorChanged();
    partial void OnMediumChanging(string value);
    partial void OnMediumChanged();
    partial void OnMediumColorChanging(string value);
    partial void OnMediumColorChanged();
    partial void OnPinchFactorChanging(System.Nullable<double> value);
    partial void OnPinchFactorChanged();
    partial void OnPinchfactorColorChanging(string value);
    partial void OnPinchfactorColorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnScenarioidColorChanging(string value);
    partial void OnScenarioidColorChanged();
    #endregion
		
		public tbTowerScenarioHX()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DetailID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[Column(Storage="_DetailidColor", UpdateCheck=UpdateCheck.Never)]
		public string DetailidColor
		{
			get
			{
				return this._DetailidColor;
			}
			set
			{
				if ((this._DetailidColor != value))
				{
					this.OnDetailidColorChanging(value);
					this.SendPropertyChanging();
					this._DetailidColor = value;
					this.SendPropertyChanged("DetailidColor");
					this.OnDetailidColorChanged();
				}
			}
		}
		
		[Column(Storage="_DetailName", UpdateCheck=UpdateCheck.Never)]
		public string DetailName
		{
			get
			{
				return this._DetailName;
			}
			set
			{
				if ((this._DetailName != value))
				{
					this.OnDetailNameChanging(value);
					this.SendPropertyChanging();
					this._DetailName = value;
					this.SendPropertyChanged("DetailName");
					this.OnDetailNameChanged();
				}
			}
		}
		
		[Column(Storage="_DetailnameColor", UpdateCheck=UpdateCheck.Never)]
		public string DetailnameColor
		{
			get
			{
				return this._DetailnameColor;
			}
			set
			{
				if ((this._DetailnameColor != value))
				{
					this.OnDetailnameColorChanging(value);
					this.SendPropertyChanging();
					this._DetailnameColor = value;
					this.SendPropertyChanged("DetailnameColor");
					this.OnDetailnameColorChanged();
				}
			}
		}
		
		[Column(Storage="_Dutycalcfactor", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Dutycalcfactor
		{
			get
			{
				return this._Dutycalcfactor;
			}
			set
			{
				if ((this._Dutycalcfactor != value))
				{
					this.OnDutycalcfactorChanging(value);
					this.SendPropertyChanging();
					this._Dutycalcfactor = value;
					this.SendPropertyChanged("Dutycalcfactor");
					this.OnDutycalcfactorChanged();
				}
			}
		}
		
		[Column(Storage="_DutycalcfactorColor", UpdateCheck=UpdateCheck.Never)]
		public string DutycalcfactorColor
		{
			get
			{
				return this._DutycalcfactorColor;
			}
			set
			{
				if ((this._DutycalcfactorColor != value))
				{
					this.OnDutycalcfactorColorChanging(value);
					this.SendPropertyChanging();
					this._DutycalcfactorColor = value;
					this.SendPropertyChanged("DutycalcfactorColor");
					this.OnDutycalcfactorColorChanged();
				}
			}
		}
		
		[Column(Storage="_Dutylost", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool Dutylost
		{
			get
			{
				return this._Dutylost;
			}
			set
			{
				if ((this._Dutylost != value))
				{
					this.OnDutylostChanging(value);
					this.SendPropertyChanging();
					this._Dutylost = value;
					this.SendPropertyChanged("Dutylost");
					this.OnDutylostChanged();
				}
			}
		}
		
		[Column(Storage="_DutylostColor", UpdateCheck=UpdateCheck.Never)]
		public string DutylostColor
		{
			get
			{
				return this._DutylostColor;
			}
			set
			{
				if ((this._DutylostColor != value))
				{
					this.OnDutylostColorChanging(value);
					this.SendPropertyChanging();
					this._DutylostColor = value;
					this.SendPropertyChanged("DutylostColor");
					this.OnDutylostColorChanged();
				}
			}
		}
		
		[Column(Storage="_HeaterType", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> HeaterType
		{
			get
			{
				return this._HeaterType;
			}
			set
			{
				if ((this._HeaterType != value))
				{
					this.OnHeaterTypeChanging(value);
					this.SendPropertyChanging();
					this._HeaterType = value;
					this.SendPropertyChanged("HeaterType");
					this.OnHeaterTypeChanged();
				}
			}
		}
		
		[Column(Storage="_HeatertypeColor", UpdateCheck=UpdateCheck.Never)]
		public string HeatertypeColor
		{
			get
			{
				return this._HeatertypeColor;
			}
			set
			{
				if ((this._HeatertypeColor != value))
				{
					this.OnHeatertypeColorChanging(value);
					this.SendPropertyChanging();
					this._HeatertypeColor = value;
					this.SendPropertyChanged("HeatertypeColor");
					this.OnHeatertypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsPinch", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsPinch
		{
			get
			{
				return this._IsPinch;
			}
			set
			{
				if ((this._IsPinch != value))
				{
					this.OnIsPinchChanging(value);
					this.SendPropertyChanging();
					this._IsPinch = value;
					this.SendPropertyChanged("IsPinch");
					this.OnIsPinchChanged();
				}
			}
		}
		
		[Column(Storage="_IspinchColor", UpdateCheck=UpdateCheck.Never)]
		public string IspinchColor
		{
			get
			{
				return this._IspinchColor;
			}
			set
			{
				if ((this._IspinchColor != value))
				{
					this.OnIspinchColorChanging(value);
					this.SendPropertyChanging();
					this._IspinchColor = value;
					this.SendPropertyChanged("IspinchColor");
					this.OnIspinchColorChanged();
				}
			}
		}
		
		[Column(Storage="_Medium", UpdateCheck=UpdateCheck.Never)]
		public string Medium
		{
			get
			{
				return this._Medium;
			}
			set
			{
				if ((this._Medium != value))
				{
					this.OnMediumChanging(value);
					this.SendPropertyChanging();
					this._Medium = value;
					this.SendPropertyChanged("Medium");
					this.OnMediumChanged();
				}
			}
		}
		
		[Column(Storage="_MediumColor", UpdateCheck=UpdateCheck.Never)]
		public string MediumColor
		{
			get
			{
				return this._MediumColor;
			}
			set
			{
				if ((this._MediumColor != value))
				{
					this.OnMediumColorChanging(value);
					this.SendPropertyChanging();
					this._MediumColor = value;
					this.SendPropertyChanged("MediumColor");
					this.OnMediumColorChanged();
				}
			}
		}
		
		[Column(Storage="_PinchFactor", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> PinchFactor
		{
			get
			{
				return this._PinchFactor;
			}
			set
			{
				if ((this._PinchFactor != value))
				{
					this.OnPinchFactorChanging(value);
					this.SendPropertyChanging();
					this._PinchFactor = value;
					this.SendPropertyChanged("PinchFactor");
					this.OnPinchFactorChanged();
				}
			}
		}
		
		[Column(Storage="_PinchfactorColor", UpdateCheck=UpdateCheck.Never)]
		public string PinchfactorColor
		{
			get
			{
				return this._PinchfactorColor;
			}
			set
			{
				if ((this._PinchfactorColor != value))
				{
					this.OnPinchfactorColorChanging(value);
					this.SendPropertyChanging();
					this._PinchfactorColor = value;
					this.SendPropertyChanged("PinchfactorColor");
					this.OnPinchfactorColorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioidColor", UpdateCheck=UpdateCheck.Never)]
		public string ScenarioidColor
		{
			get
			{
				return this._ScenarioidColor;
			}
			set
			{
				if ((this._ScenarioidColor != value))
				{
					this.OnScenarioidColorChanging(value);
					this.SendPropertyChanging();
					this._ScenarioidColor = value;
					this.SendPropertyChanged("ScenarioidColor");
					this.OnScenarioidColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTowerScenarioStream : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Flowcalcfactor;
		
		private string _FlowcalcfactorColor;
		
		private bool _Flowstop;
		
		private string _FlowstopColor;
		
		private bool _IsNormal;
		
		private bool _IsProduct;
		
		private string _IsproductColor;
		
		private System.Nullable<double> _ReliefNormalFactor;
		
		private System.Nullable<int> _ScenarioID;
		
		private string _ScenarioidColor;
		
		private System.Nullable<int> _SourceID;
		
		private string _SourceidColor;
		
		private string _SourceType;
		
		private string _SourcetypeColor;
		
		private string _StreamName;
		
		private string _StreamnameColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFlowcalcfactorChanging(string value);
    partial void OnFlowcalcfactorChanged();
    partial void OnFlowcalcfactorColorChanging(string value);
    partial void OnFlowcalcfactorColorChanged();
    partial void OnFlowstopChanging(bool value);
    partial void OnFlowstopChanged();
    partial void OnFlowstopColorChanging(string value);
    partial void OnFlowstopColorChanged();
    partial void OnIsNormalChanging(bool value);
    partial void OnIsNormalChanged();
    partial void OnIsProductChanging(bool value);
    partial void OnIsProductChanged();
    partial void OnIsproductColorChanging(string value);
    partial void OnIsproductColorChanged();
    partial void OnReliefNormalFactorChanging(System.Nullable<double> value);
    partial void OnReliefNormalFactorChanged();
    partial void OnScenarioIDChanging(System.Nullable<int> value);
    partial void OnScenarioIDChanged();
    partial void OnScenarioidColorChanging(string value);
    partial void OnScenarioidColorChanged();
    partial void OnSourceIDChanging(System.Nullable<int> value);
    partial void OnSourceIDChanged();
    partial void OnSourceidColorChanging(string value);
    partial void OnSourceidColorChanged();
    partial void OnSourceTypeChanging(string value);
    partial void OnSourceTypeChanged();
    partial void OnSourcetypeColorChanging(string value);
    partial void OnSourcetypeColorChanged();
    partial void OnStreamNameChanging(string value);
    partial void OnStreamNameChanged();
    partial void OnStreamnameColorChanging(string value);
    partial void OnStreamnameColorChanged();
    #endregion
		
		public tbTowerScenarioStream()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Flowcalcfactor", UpdateCheck=UpdateCheck.Never)]
		public string Flowcalcfactor
		{
			get
			{
				return this._Flowcalcfactor;
			}
			set
			{
				if ((this._Flowcalcfactor != value))
				{
					this.OnFlowcalcfactorChanging(value);
					this.SendPropertyChanging();
					this._Flowcalcfactor = value;
					this.SendPropertyChanged("Flowcalcfactor");
					this.OnFlowcalcfactorChanged();
				}
			}
		}
		
		[Column(Storage="_FlowcalcfactorColor", UpdateCheck=UpdateCheck.Never)]
		public string FlowcalcfactorColor
		{
			get
			{
				return this._FlowcalcfactorColor;
			}
			set
			{
				if ((this._FlowcalcfactorColor != value))
				{
					this.OnFlowcalcfactorColorChanging(value);
					this.SendPropertyChanging();
					this._FlowcalcfactorColor = value;
					this.SendPropertyChanged("FlowcalcfactorColor");
					this.OnFlowcalcfactorColorChanged();
				}
			}
		}
		
		[Column(Storage="_Flowstop", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool Flowstop
		{
			get
			{
				return this._Flowstop;
			}
			set
			{
				if ((this._Flowstop != value))
				{
					this.OnFlowstopChanging(value);
					this.SendPropertyChanging();
					this._Flowstop = value;
					this.SendPropertyChanged("Flowstop");
					this.OnFlowstopChanged();
				}
			}
		}
		
		[Column(Storage="_FlowstopColor", UpdateCheck=UpdateCheck.Never)]
		public string FlowstopColor
		{
			get
			{
				return this._FlowstopColor;
			}
			set
			{
				if ((this._FlowstopColor != value))
				{
					this.OnFlowstopColorChanging(value);
					this.SendPropertyChanging();
					this._FlowstopColor = value;
					this.SendPropertyChanged("FlowstopColor");
					this.OnFlowstopColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsNormal", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsNormal
		{
			get
			{
				return this._IsNormal;
			}
			set
			{
				if ((this._IsNormal != value))
				{
					this.OnIsNormalChanging(value);
					this.SendPropertyChanging();
					this._IsNormal = value;
					this.SendPropertyChanged("IsNormal");
					this.OnIsNormalChanged();
				}
			}
		}
		
		[Column(Storage="_IsProduct", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public bool IsProduct
		{
			get
			{
				return this._IsProduct;
			}
			set
			{
				if ((this._IsProduct != value))
				{
					this.OnIsProductChanging(value);
					this.SendPropertyChanging();
					this._IsProduct = value;
					this.SendPropertyChanged("IsProduct");
					this.OnIsProductChanged();
				}
			}
		}
		
		[Column(Storage="_IsproductColor", UpdateCheck=UpdateCheck.Never)]
		public string IsproductColor
		{
			get
			{
				return this._IsproductColor;
			}
			set
			{
				if ((this._IsproductColor != value))
				{
					this.OnIsproductColorChanging(value);
					this.SendPropertyChanging();
					this._IsproductColor = value;
					this.SendPropertyChanged("IsproductColor");
					this.OnIsproductColorChanged();
				}
			}
		}
		
		[Column(Storage="_ReliefNormalFactor", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> ReliefNormalFactor
		{
			get
			{
				return this._ReliefNormalFactor;
			}
			set
			{
				if ((this._ReliefNormalFactor != value))
				{
					this.OnReliefNormalFactorChanging(value);
					this.SendPropertyChanging();
					this._ReliefNormalFactor = value;
					this.SendPropertyChanged("ReliefNormalFactor");
					this.OnReliefNormalFactorChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[Column(Storage="_ScenarioidColor", UpdateCheck=UpdateCheck.Never)]
		public string ScenarioidColor
		{
			get
			{
				return this._ScenarioidColor;
			}
			set
			{
				if ((this._ScenarioidColor != value))
				{
					this.OnScenarioidColorChanging(value);
					this.SendPropertyChanging();
					this._ScenarioidColor = value;
					this.SendPropertyChanged("ScenarioidColor");
					this.OnScenarioidColorChanged();
				}
			}
		}
		
		[Column(Storage="_SourceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					this.OnSourceIDChanging(value);
					this.SendPropertyChanging();
					this._SourceID = value;
					this.SendPropertyChanged("SourceID");
					this.OnSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_SourceidColor", UpdateCheck=UpdateCheck.Never)]
		public string SourceidColor
		{
			get
			{
				return this._SourceidColor;
			}
			set
			{
				if ((this._SourceidColor != value))
				{
					this.OnSourceidColorChanging(value);
					this.SendPropertyChanging();
					this._SourceidColor = value;
					this.SendPropertyChanged("SourceidColor");
					this.OnSourceidColorChanged();
				}
			}
		}
		
		[Column(Storage="_SourceType", UpdateCheck=UpdateCheck.Never)]
		public string SourceType
		{
			get
			{
				return this._SourceType;
			}
			set
			{
				if ((this._SourceType != value))
				{
					this.OnSourceTypeChanging(value);
					this.SendPropertyChanging();
					this._SourceType = value;
					this.SendPropertyChanged("SourceType");
					this.OnSourceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SourcetypeColor", UpdateCheck=UpdateCheck.Never)]
		public string SourcetypeColor
		{
			get
			{
				return this._SourcetypeColor;
			}
			set
			{
				if ((this._SourcetypeColor != value))
				{
					this.OnSourcetypeColorChanging(value);
					this.SendPropertyChanging();
					this._SourcetypeColor = value;
					this.SendPropertyChanged("SourcetypeColor");
					this.OnSourcetypeColorChanged();
				}
			}
		}
		
		[Column(Storage="_StreamName", UpdateCheck=UpdateCheck.Never)]
		public string StreamName
		{
			get
			{
				return this._StreamName;
			}
			set
			{
				if ((this._StreamName != value))
				{
					this.OnStreamNameChanging(value);
					this.SendPropertyChanging();
					this._StreamName = value;
					this.SendPropertyChanged("StreamName");
					this.OnStreamNameChanged();
				}
			}
		}
		
		[Column(Storage="_StreamnameColor", UpdateCheck=UpdateCheck.Never)]
		public string StreamnameColor
		{
			get
			{
				return this._StreamnameColor;
			}
			set
			{
				if ((this._StreamnameColor != value))
				{
					this.OnStreamnameColorChanging(value);
					this.SendPropertyChanging();
					this._StreamnameColor = value;
					this.SendPropertyChanged("StreamnameColor");
					this.OnStreamnameColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTowerSideColumn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _DeviceID;
		
		private string _EqName;
		
		private string _EqnameColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDeviceIDChanging(System.Nullable<int> value);
    partial void OnDeviceIDChanged();
    partial void OnEqNameChanging(string value);
    partial void OnEqNameChanged();
    partial void OnEqnameColorChanging(string value);
    partial void OnEqnameColorChanged();
    #endregion
		
		public tbTowerSideColumn()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceID", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[Column(Storage="_EqName", UpdateCheck=UpdateCheck.Never)]
		public string EqName
		{
			get
			{
				return this._EqName;
			}
			set
			{
				if ((this._EqName != value))
				{
					this.OnEqNameChanging(value);
					this.SendPropertyChanging();
					this._EqName = value;
					this.SendPropertyChanged("EqName");
					this.OnEqNameChanged();
				}
			}
		}
		
		[Column(Storage="_EqnameColor", UpdateCheck=UpdateCheck.Never)]
		public string EqnameColor
		{
			get
			{
				return this._EqnameColor;
			}
			set
			{
				if ((this._EqnameColor != value))
				{
					this.OnEqnameColorChanging(value);
					this.SendPropertyChanging();
					this._EqnameColor = value;
					this.SendPropertyChanged("EqnameColor");
					this.OnEqnameColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTreePS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PSName;
		
		private string _UnitID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPSNameChanging(string value);
    partial void OnPSNameChanged();
    partial void OnUnitIDChanging(string value);
    partial void OnUnitIDChanged();
    #endregion
		
		public tbTreePS()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_PSName", UpdateCheck=UpdateCheck.Never)]
		public string PSName
		{
			get
			{
				return this._PSName;
			}
			set
			{
				if ((this._PSName != value))
				{
					this.OnPSNameChanging(value);
					this.SendPropertyChanging();
					this._PSName = value;
					this.SendPropertyChanged("PSName");
					this.OnPSNameChanged();
				}
			}
		}
		
		[Column(Storage="_UnitID", UpdateCheck=UpdateCheck.Never)]
		public string UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class tbTreeUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PlantName;
		
		private string _PUName;
		
		private string _UnitName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ALinq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlantNameChanging(string value);
    partial void OnPlantNameChanged();
    partial void OnPUNameChanging(string value);
    partial void OnPUNameChanged();
    partial void OnUnitNameChanging(string value);
    partial void OnUnitNameChanged();
    #endregion
		
		public tbTreeUnit()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", CanBeNull=false, IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_PlantName", UpdateCheck=UpdateCheck.Never)]
		public string PlantName
		{
			get
			{
				return this._PlantName;
			}
			set
			{
				if ((this._PlantName != value))
				{
					this.OnPlantNameChanging(value);
					this.SendPropertyChanging();
					this._PlantName = value;
					this.SendPropertyChanged("PlantName");
					this.OnPlantNameChanged();
				}
			}
		}
		
		[Column(Storage="_PUName", UpdateCheck=UpdateCheck.Never)]
		public string PUName
		{
			get
			{
				return this._PUName;
			}
			set
			{
				if ((this._PUName != value))
				{
					this.OnPUNameChanging(value);
					this.SendPropertyChanging();
					this._PUName = value;
					this.SendPropertyChanged("PUName");
					this.OnPUNameChanged();
				}
			}
		}
		
		[Column(Storage="_UnitName", UpdateCheck=UpdateCheck.Never)]
		public string UnitName
		{
			get
			{
				return this._UnitName;
			}
			set
			{
				if ((this._UnitName != value))
				{
					this.OnUnitNameChanging(value);
					this.SendPropertyChanging();
					this._UnitName = value;
					this.SendPropertyChanged("UnitName");
					this.OnUnitNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
